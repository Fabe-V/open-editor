"use strict";var e=Object.defineProperty,t=Object.defineProperties,n=Object.getOwnPropertyDescriptors,r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable,a=(t,n,r)=>n in t?e(t,n,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[n]=r,s=(e,t)=>{for(var n in t||(t={}))i.call(t,n)&&a(e,n,t[n]);if(r)for(var n of r(t))o.call(t,n)&&a(e,n,t[n]);return e},l=(e,r)=>t(e,n(r)),c=require("events"),u=require("crypto"),d=require("fs"),h=require("stream"),p=require("url"),f=require("string_decoder"),m=require("constants"),g=require("util"),y=require("assert"),E=require("path"),v=require("fs/promises"),w=require("os"),b=require("electron"),A=require("child_process"),T=require("zlib"),O=require("http");function _(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}function S(e,t){return t.forEach((function(t){t&&"string"!=typeof t&&!Array.isArray(t)&&Object.keys(t).forEach((function(n){if("default"!==n&&!(n in e)){var r=Object.getOwnPropertyDescriptor(t,n);Object.defineProperty(e,n,r.get?r:{enumerable:!0,get:function(){return t[n]}})}}))})),Object.freeze(e)}var I=_(c),C=_(u),N=_(d),R=_(h),D=_(p),P=_(f),k=_(m),F=_(g),$=_(y),x=_(E),U=_(v),L=_(w),j=_(b),M=_(A),q=_(T),B=_(O),H="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function G(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var V={},z={},W={};Object.defineProperty(W,"__esModule",{value:!0}),W.CancellationError=W.CancellationToken=void 0;const Y=I.default;class X extends Y.EventEmitter{constructor(e){super(),this.parentCancelHandler=null,this._parent=null,this._cancelled=!1,null!=e&&(this.parent=e)}get cancelled(){return this._cancelled||null!=this._parent&&this._parent.cancelled}set parent(e){this.removeParentCancelHandler(),this._parent=e,this.parentCancelHandler=()=>this.cancel(),this._parent.onCancel(this.parentCancelHandler)}cancel(){this._cancelled=!0,this.emit("cancel")}onCancel(e){this.cancelled?e():this.once("cancel",e)}createPromise(e){if(this.cancelled)return Promise.reject(new J);const t=()=>{if(null!=n)try{this.removeListener("cancel",n),n=null}catch(e){}};let n=null;return new Promise(((t,r)=>{let i=null;n=()=>{try{null!=i&&(i(),i=null)}finally{r(new J)}},this.cancelled?n():(this.onCancel(n),e(t,r,(e=>{i=e})))})).then((e=>(t(),e))).catch((e=>{throw t(),e}))}removeParentCancelHandler(){const e=this._parent;null!=e&&null!=this.parentCancelHandler&&(e.removeListener("cancel",this.parentCancelHandler),this.parentCancelHandler=null)}dispose(){try{this.removeParentCancelHandler()}finally{this.removeAllListeners(),this._parent=null}}}W.CancellationToken=X;class J extends Error{constructor(){super("cancelled")}}W.CancellationError=J;var K={},Q={exports:{}},Z=1e3,ee=60*Z,te=60*ee,ne=24*te,re=function(e,t){t=t||{};var n,r,i=typeof e;if("string"===i&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(t){var n=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*n;case"weeks":case"week":case"w":return 6048e5*n;case"days":case"day":case"d":return n*ne;case"hours":case"hour":case"hrs":case"hr":case"h":return n*te;case"minutes":case"minute":case"mins":case"min":case"m":return n*ee;case"seconds":case"second":case"secs":case"sec":case"s":return n*Z;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return n;default:return}}}}(e);if("number"===i&&isFinite(e))return t.long?(n=e,(r=Math.abs(n))>=ne?ie(n,r,ne,"day"):r>=te?ie(n,r,te,"hour"):r>=ee?ie(n,r,ee,"minute"):r>=Z?ie(n,r,Z,"second"):n+" ms"):function(e){var t=Math.abs(e);return t>=ne?Math.round(e/ne)+"d":t>=te?Math.round(e/te)+"h":t>=ee?Math.round(e/ee)+"m":t>=Z?Math.round(e/Z)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))};function ie(e,t,n,r){var i=t>=1.5*n;return Math.round(e/n)+" "+r+(i?"s":"")}!function(e,t){t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let r=0,i=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(r++,"%c"===e&&(i=r))})),t.splice(i,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e={}.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=function(e){function t(e){let r,i,o,a=null;function s(...e){if(!s.enabled)return;const n=s,i=Number(new Date),o=i-(r||i);n.diff=o,n.prev=r,n.curr=i,r=i,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let a=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((r,i)=>{if("%%"===r)return"%";a++;const o=t.formatters[i];if("function"==typeof o){const t=e[a];r=o.call(n,t),e.splice(a,1),a--}return r})),t.formatArgs.call(n,e),(n.log||t.log).apply(n,e)}return s.namespace=e,s.useColors=t.useColors(),s.color=t.selectColor(e),s.extend=n,s.destroy=t.destroy,Object.defineProperty(s,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==a?a:(i!==t.namespaces&&(i=t.namespaces,o=t.enabled(e)),o),set:e=>{a=e}}),"function"==typeof t.init&&t.init(s),s}function n(e,n){const r=t(this.namespace+(void 0===n?":":n)+e);return r.log=this.log,r}function r(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(r),...t.skips.map(r).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let n;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const r=("string"==typeof e?e:"").split(/[\s,]+/),i=r.length;for(n=0;n<i;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=re,t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((n=>{t[n]=e[n]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let n=0;for(let t=0;t<e.length;t++)n=(n<<5)-n+e.charCodeAt(t),n|=0;return t.colors[Math.abs(n)%t.colors.length]},t.enable(t.load()),t}(t);const{formatters:n}=e.exports;n.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}}(Q,Q.exports);var oe={};Object.defineProperty(oe,"__esModule",{value:!0}),oe.ProgressCallbackTransform=void 0;const ae=R.default;class se extends ae.Transform{constructor(e,t,n){super(),this.total=e,this.cancellationToken=t,this.onProgress=n,this.start=Date.now(),this.transferred=0,this.delta=0,this.nextUpdate=this.start+1e3}_transform(e,t,n){if(this.cancellationToken.cancelled)return void n(new Error("cancelled"),null);this.transferred+=e.length,this.delta+=e.length;const r=Date.now();r>=this.nextUpdate&&this.transferred!==this.total&&(this.nextUpdate=r+1e3,this.onProgress({total:this.total,delta:this.delta,transferred:this.transferred,percent:this.transferred/this.total*100,bytesPerSecond:Math.round(this.transferred/((r-this.start)/1e3))}),this.delta=0),n(null,e)}_flush(e){this.cancellationToken.cancelled?e(new Error("cancelled")):(this.onProgress({total:this.total,delta:this.delta,transferred:this.total,percent:100,bytesPerSecond:Math.round(this.transferred/((Date.now()-this.start)/1e3))}),this.delta=0,e(null))}}oe.ProgressCallbackTransform=se,Object.defineProperty(K,"__esModule",{value:!0}),K.safeStringifyJson=K.configureRequestOptions=K.safeGetHeader=K.DigestTransform=K.configureRequestUrl=K.configureRequestOptionsFromUrl=K.HttpExecutor=K.parseJson=K.HttpError=K.createHttpError=void 0;const le=C.default,ce=Q.exports,ue=N.default,de=R.default,he=D.default,pe=W,fe=z,me=oe,ge=ce.default("electron-builder");function ye(e,t=null){return new ve(e.statusCode||-1,`${e.statusCode} ${e.statusMessage}`+(null==t?"":"\n"+JSON.stringify(t,null,"  "))+"\nHeaders: "+Se(e.headers),t)}K.createHttpError=ye;const Ee=new Map([[429,"Too many requests"],[400,"Bad request"],[403,"Forbidden"],[404,"Not found"],[405,"Method not allowed"],[406,"Not acceptable"],[408,"Request timeout"],[413,"Request entity too large"],[500,"Internal server error"],[502,"Bad gateway"],[503,"Service unavailable"],[504,"Gateway timeout"],[505,"HTTP version not supported"]]);class ve extends Error{constructor(e,t=`HTTP error: ${Ee.get(e)||e}`,n=null){super(t),this.statusCode=e,this.description=n,this.name="HttpError",this.code=`HTTP_ERROR_${e}`}}K.HttpError=ve,K.parseJson=function(e){return e.then((e=>null==e||0===e.length?null:JSON.parse(e)))};class we{constructor(){this.maxRedirects=10}request(e,t=new pe.CancellationToken,n){_e(e);const r=null==n?void 0:Buffer.from(JSON.stringify(n));return null!=r&&(e.method="post",e.headers["Content-Type"]="application/json",e.headers["Content-Length"]=r.length),this.doApiRequest(e,t,(e=>{e.end(r)}))}doApiRequest(e,t,n,r=0){return ge.enabled&&ge(`Request: ${Se(e)}`),t.createPromise(((i,o,a)=>{const s=this.createRequest(e,(a=>{try{this.handleResponse(a,e,t,i,o,r,n)}catch(e){o(e)}}));this.addErrorAndTimeoutHandlers(s,o),this.addRedirectHandlers(s,e,o,r,(e=>{this.doApiRequest(e,t,n,r).then(i).catch(o)})),n(s,o),a((()=>s.abort()))}))}addRedirectHandlers(e,t,n,r,i){}addErrorAndTimeoutHandlers(e,t){this.addTimeOutHandler(e,t),e.on("error",t),e.on("aborted",(()=>{t(new Error("Request has been aborted by the server"))}))}handleResponse(e,t,n,r,i,o,a){if(ge.enabled&&ge(`Response: ${e.statusCode} ${e.statusMessage}, request options: ${Se(t)}`),404===e.statusCode)return void i(ye(e,`method: ${t.method||"GET"} url: ${t.protocol||"https:"}//${t.hostname}${t.port?`:${t.port}`:""}${t.path}\n\nPlease double check that your authentication token is correct. Due to security reasons actual status maybe not reported, but 404.\n`));if(204===e.statusCode)return void r();const s=Oe(e,"location");if(null!=s)return o>this.maxRedirects?void i(this.createMaxRedirectError()):void this.doApiRequest(we.prepareRedirectUrlOptions(s,t),n,a,o).then(r).catch(i);e.setEncoding("utf8");let l="";e.on("error",i),e.on("data",(e=>l+=e)),e.on("end",(()=>{try{if(null!=e.statusCode&&e.statusCode>=400){const t=Oe(e,"content-type"),n=null!=t&&(Array.isArray(t)?null!=t.find((e=>e.includes("json"))):t.includes("json"));i(ye(e,n?JSON.parse(l):l))}else r(0===l.length?null:l)}catch(e){i(e)}}))}async downloadToBuffer(e,t){return await t.cancellationToken.createPromise(((n,r,i)=>{let o=null;const a={headers:t.headers||void 0,redirect:"manual"};Ae(e,a),_e(a),this.doDownload(a,{destination:null,options:t,onCancel:i,callback:e=>{null==e?n(o):r(e)},responseHandler:(e,t)=>{const n=Oe(e,"content-length");let r=-1;if(null!=n){const e=parseInt(n,10);if(e>0){if(e>524288e3)return void t(new Error("Maximum allowed size is 500 MB"));o=Buffer.alloc(e),r=0}}e.on("data",(e=>{if(-1!==r)e.copy(o,r),r+=e.length;else if(null==o)o=e;else{if(o.length>524288e3)return void t(new Error("Maximum allowed size is 500 MB"));o=Buffer.concat([o,e])}})),e.on("end",(()=>{null!=o&&-1!==r&&r!==o.length?t(new Error(`Received data length ${r} is not equal to expected ${o.length}`)):t(null)}))}},0)}))}doDownload(e,t,n){const r=this.createRequest(e,(r=>{if(r.statusCode>=400)return void t.callback(new Error(`Cannot download "${e.protocol||"https:"}//${e.hostname}${e.path}", status ${r.statusCode}: ${r.statusMessage}`));r.on("error",t.callback);const i=Oe(r,"location");null==i?null==t.responseHandler?function(e,t){if(n=Oe(t,"X-Checksum-Sha2"),r=e.options.sha2,i=e.callback,null!=n&&null!=r&&n!==r&&(i(new Error(`checksum mismatch: expected ${r} but got ${n} (X-Checksum-Sha2 header)`)),1))return;var n,r,i;const o=[];if(null!=e.options.onProgress){const n=Oe(t,"content-length");null!=n&&o.push(new me.ProgressCallbackTransform(parseInt(n,10),e.options.cancellationToken,e.options.onProgress))}const a=e.options.sha512;null!=a?o.push(new Te(a,"sha512",128!==a.length||a.includes("+")||a.includes("Z")||a.includes("=")?"base64":"hex")):null!=e.options.sha2&&o.push(new Te(e.options.sha2,"sha256","hex"));const s=ue.createWriteStream(e.destination);o.push(s);let l=t;for(const t of o)t.on("error",(t=>{e.options.cancellationToken.cancelled||e.callback(t)})),l=l.pipe(t);s.on("finish",(()=>{s.close(e.callback)}))}(t,r):t.responseHandler(r,t.callback):n<this.maxRedirects?this.doDownload(we.prepareRedirectUrlOptions(i,e),t,n++):t.callback(this.createMaxRedirectError())}));this.addErrorAndTimeoutHandlers(r,t.callback),this.addRedirectHandlers(r,e,t.callback,n,(e=>{this.doDownload(e,t,n++)})),r.end()}createMaxRedirectError(){return new Error(`Too many redirects (> ${this.maxRedirects})`)}addTimeOutHandler(e,t){e.on("socket",(n=>{n.setTimeout(6e4,(()=>{e.abort(),t(new Error("Request timed out"))}))}))}static prepareRedirectUrlOptions(e,t){const n=be(e,s({},t)),r=n.headers;if(null!=r&&null!=r.authorization&&r.authorization.startsWith("token")){const t=new he.URL(e);(t.hostname.endsWith(".amazonaws.com")||t.searchParams.has("X-Amz-Credential"))&&delete r.authorization}return n}}function be(e,t){const n=_e(t);return Ae(new he.URL(e),n),n}function Ae(e,t){t.protocol=e.protocol,t.hostname=e.hostname,e.port?t.port=e.port:t.port&&delete t.port,t.path=e.pathname+e.search}K.HttpExecutor=we,K.configureRequestOptionsFromUrl=be,K.configureRequestUrl=Ae;class Te extends de.Transform{constructor(e,t="sha512",n="base64"){super(),this.expected=e,this.algorithm=t,this.encoding=n,this._actual=null,this.isValidateOnEnd=!0,this.digester=le.createHash(t)}get actual(){return this._actual}_transform(e,t,n){this.digester.update(e),n(null,e)}_flush(e){if(this._actual=this.digester.digest(this.encoding),this.isValidateOnEnd)try{this.validate()}catch(t){return void e(t)}e(null)}validate(){if(null==this._actual)throw fe.newError("Not finished yet","ERR_STREAM_NOT_FINISHED");if(this._actual!==this.expected)throw fe.newError(`${this.algorithm} checksum mismatch, expected ${this.expected}, got ${this._actual}`,"ERR_CHECKSUM_MISMATCH");return null}}function Oe(e,t){const n=e.headers[t];return null==n?null:Array.isArray(n)?0===n.length?null:n[n.length-1]:n}function _e(e,t,n){null!=n&&(e.method=n),e.headers=s({},e.headers);const r=e.headers;return null!=t&&(r.authorization=t.startsWith("Basic")?t:`token ${t}`),null==r["User-Agent"]&&(r["User-Agent"]="electron-builder"),null!=n&&"GET"!==n&&null!=r["Cache-Control"]||(r["Cache-Control"]="no-cache"),null==e.protocol&&null!=process.versions.electron&&(e.protocol="https:"),e}function Se(e,t){return JSON.stringify(e,((e,n)=>e.endsWith("authorization")||e.endsWith("Password")||e.endsWith("PASSWORD")||e.endsWith("Token")||e.includes("password")||e.includes("token")||null!=t&&t.has(e)?"<stripped sensitive data>":n),2)}K.DigestTransform=Te,K.safeGetHeader=Oe,K.configureRequestOptions=_e,K.safeStringifyJson=Se;var Ie={};function Ce(e,t){return null!=t&&t.length>0&&(t.startsWith("/")||(e+="/"),e+=t),e}Object.defineProperty(Ie,"__esModule",{value:!0}),Ie.getS3LikeProviderBaseUrl=Ie.githubUrl=void 0,Ie.githubUrl=function(e,t="github.com"){return`${e.protocol||"https"}://${e.host||t}`},Ie.getS3LikeProviderBaseUrl=function(e){const t=e.provider;if("s3"===t)return function(e){let t;if(null!=e.endpoint)t=`${e.endpoint}/${e.bucket}`;else if(e.bucket.includes(".")){if(null==e.region)throw new Error(`Bucket name "${e.bucket}" includes a dot, but S3 region is missing`);t="us-east-1"===e.region?`https://s3.amazonaws.com/${e.bucket}`:`https://s3-${e.region}.amazonaws.com/${e.bucket}`}else t="cn-north-1"===e.region?`https://${e.bucket}.s3.${e.region}.amazonaws.com.cn`:`https://${e.bucket}.s3.amazonaws.com`;return Ce(t,e.path)}(e);if("spaces"===t)return function(e){if(null==e.name)throw new Error("name is missing");if(null==e.region)throw new Error("region is missing");return Ce(`https://${e.name}.${e.region}.digitaloceanspaces.com`,e.path)}(e);throw new Error(`Not supported provider: ${t}`)};var Ne={};Object.defineProperty(Ne,"__esModule",{value:!0}),Ne.parseDn=void 0,Ne.parseDn=function(e){let t=!1,n=null,r="",i=0;e=e.trim();const o=new Map;for(let a=0;a<=e.length;a++){if(a===e.length){null!==n&&o.set(n,r);break}const s=e[a];if(t){if('"'===s){t=!1;continue}}else{if('"'===s){t=!0;continue}if("\\"===s){a++;const t=parseInt(e.slice(a,a+2),16);Number.isNaN(t)?r+=e[a]:(a++,r+=String.fromCharCode(t));continue}if(null===n&&"="===s){n=r,r="";continue}if(","===s||";"===s||"+"===s){null!==n&&o.set(n,r),n=null,r="";continue}}if(" "===s&&!t){if(0===r.length)continue;if(a>i){let t=a;for(;" "===e[t];)t++;i=t}if(i>=e.length||","===e[i]||";"===e[i]||null===n&&"="===e[i]||null!==n&&"+"===e[i]){a=i-1;continue}}r+=s}return o};var Re={};Object.defineProperty(Re,"__esModule",{value:!0}),Re.nil=Re.UUID=void 0;const De=C.default,Pe=z,ke=De.randomBytes(16);ke[0]=1|ke[0];const Fe={},$e=[];for(let e=0;e<256;e++){const t=(e+256).toString(16).substr(1);Fe[t]=e,$e[e]=t}class xe{constructor(e){this.ascii=null,this.binary=null;const t=xe.check(e);if(!t)throw new Error("not a UUID");this.version=t.version,"ascii"===t.format?this.ascii=e:this.binary=e}static v5(e,t){return function(e,t,n,r,i=Le.ASCII){const o=De.createHash(t);if("string"!=typeof e&&!Buffer.isBuffer(e))throw Pe.newError("options.name must be either a string or a Buffer","ERR_INVALID_UUID_NAME");o.update(r),o.update(e);const a=o.digest();let s;switch(i){case Le.BINARY:a[6]=15&a[6]|n,a[8]=63&a[8]|128,s=a;break;case Le.OBJECT:a[6]=15&a[6]|n,a[8]=63&a[8]|128,s=new xe(a);break;default:s=$e[a[0]]+$e[a[1]]+$e[a[2]]+$e[a[3]]+"-"+$e[a[4]]+$e[a[5]]+"-"+$e[15&a[6]|n]+$e[a[7]]+"-"+$e[63&a[8]|128]+$e[a[9]]+"-"+$e[a[10]]+$e[a[11]]+$e[a[12]]+$e[a[13]]+$e[a[14]]+$e[a[15]]}return s}(e,"sha1",80,t)}toString(){var e;return null==this.ascii&&(this.ascii=(e=this.binary,$e[e[0]]+$e[e[1]]+$e[e[2]]+$e[e[3]]+"-"+$e[e[4]]+$e[e[5]]+"-"+$e[e[6]]+$e[e[7]]+"-"+$e[e[8]]+$e[e[9]]+"-"+$e[e[10]]+$e[e[11]]+$e[e[12]]+$e[e[13]]+$e[e[14]]+$e[e[15]])),this.ascii}inspect(){return`UUID v${this.version} ${this.toString()}`}static check(e,t=0){if("string"==typeof e)return e=e.toLowerCase(),!!/^[a-f0-9]{8}(-[a-f0-9]{4}){3}-([a-f0-9]{12})$/.test(e)&&("00000000-0000-0000-0000-000000000000"===e?{version:void 0,variant:"nil",format:"ascii"}:{version:(240&Fe[e[14]+e[15]])>>4,variant:Ue((224&Fe[e[19]+e[20]])>>5),format:"ascii"});if(Buffer.isBuffer(e)){if(e.length<t+16)return!1;let n=0;for(;n<16&&0===e[t+n];n++);return 16===n?{version:void 0,variant:"nil",format:"binary"}:{version:(240&e[t+6])>>4,variant:Ue((224&e[t+8])>>5),format:"binary"}}throw Pe.newError("Unknown type of uuid","ERR_UNKNOWN_UUID_TYPE")}static parse(e){const t=Buffer.allocUnsafe(16);let n=0;for(let r=0;r<16;r++)t[r]=Fe[e[n++]+e[n++]],3!==r&&5!==r&&7!==r&&9!==r||(n+=1);return t}}function Ue(e){switch(e){case 0:case 1:case 3:return"ncs";case 4:case 5:return"rfc4122";case 6:return"microsoft";default:return"future"}}var Le,je;Re.UUID=xe,xe.OID=xe.parse("6ba7b812-9dad-11d1-80b4-00c04fd430c8"),(je=Le||(Le={}))[je.ASCII=0]="ASCII",je[je.BINARY=1]="BINARY",je[je.OBJECT=2]="OBJECT",Re.nil=new xe("00000000-0000-0000-0000-000000000000");var Me={},qe={};!function(e){e.parser=function(e,t){return new r(e,t)},e.SAXParser=r,e.SAXStream=o,e.createStream=function(e,t){return new o(e,t)},e.MAX_BUFFER_LENGTH=65536;var t,n=["comment","sgmlDecl","textNode","tagName","doctype","procInstName","procInstBody","entity","attribName","attribValue","cdata","script"];function r(t,i){if(!(this instanceof r))return new r(t,i);var o=this;!function(e){for(var t=0,r=n.length;t<r;t++)e[n[t]]=""}(o),o.q=o.c="",o.bufferCheckPosition=e.MAX_BUFFER_LENGTH,o.opt=i||{},o.opt.lowercase=o.opt.lowercase||o.opt.lowercasetags,o.looseCase=o.opt.lowercase?"toLowerCase":"toUpperCase",o.tags=[],o.closed=o.closedRoot=o.sawRoot=!1,o.tag=o.error=null,o.strict=!!t,o.noscript=!(!t&&!o.opt.noscript),o.state=b.BEGIN,o.strictEntities=o.opt.strictEntities,o.ENTITIES=o.strictEntities?Object.create(e.XML_ENTITIES):Object.create(e.ENTITIES),o.attribList=[],o.opt.xmlns&&(o.ns=Object.create(l)),o.trackPosition=!1!==o.opt.position,o.trackPosition&&(o.position=o.line=o.column=0),T(o,"onready")}e.EVENTS=["text","processinginstruction","sgmldeclaration","doctype","comment","opentagstart","attribute","opentag","closetag","opencdata","cdata","closecdata","error","end","ready","script","opennamespace","closenamespace"],Object.create||(Object.create=function(e){function t(){}return t.prototype=e,new t}),Object.keys||(Object.keys=function(e){var t=[];for(var n in e)e.hasOwnProperty(n)&&t.push(n);return t}),r.prototype={end:function(){C(this)},write:function(t){var r=this;if(this.error)throw this.error;if(r.closed)return I(r,"Cannot write after close. Assign an onready handler.");if(null===t)return C(r);"object"==typeof t&&(t=t.toString());for(var i=0,o="";o=L(t,i++),r.c=o,o;)switch(r.trackPosition&&(r.position++,"\n"===o?(r.line++,r.column=0):r.column++),r.state){case b.BEGIN:if(r.state=b.BEGIN_WHITESPACE,"\ufeff"===o)continue;U(r,o);continue;case b.BEGIN_WHITESPACE:U(r,o);continue;case b.TEXT:if(r.sawRoot&&!r.closedRoot){for(var a=i-1;o&&"<"!==o&&"&"!==o;)(o=L(t,i++))&&r.trackPosition&&(r.position++,"\n"===o?(r.line++,r.column=0):r.column++);r.textNode+=t.substring(a,i-1)}"<"!==o||r.sawRoot&&r.closedRoot&&!r.strict?(p(o)||r.sawRoot&&!r.closedRoot||N(r,"Text data outside of root node."),"&"===o?r.state=b.TEXT_ENTITY:r.textNode+=o):(r.state=b.OPEN_WAKA,r.startTagPosition=r.position);continue;case b.SCRIPT:"<"===o?r.state=b.SCRIPT_ENDING:r.script+=o;continue;case b.SCRIPT_ENDING:"/"===o?r.state=b.CLOSE_TAG:(r.script+="<"+o,r.state=b.SCRIPT);continue;case b.OPEN_WAKA:if("!"===o)r.state=b.SGML_DECL,r.sgmlDecl="";else if(p(o));else if(g(c,o))r.state=b.OPEN_TAG,r.tagName=o;else if("/"===o)r.state=b.CLOSE_TAG,r.tagName="";else if("?"===o)r.state=b.PROC_INST,r.procInstName=r.procInstBody="";else{if(N(r,"Unencoded <"),r.startTagPosition+1<r.position){var s=r.position-r.startTagPosition;o=new Array(s).join(" ")+o}r.textNode+="<"+o,r.state=b.TEXT}continue;case b.SGML_DECL:"[CDATA["===(r.sgmlDecl+o).toUpperCase()?(O(r,"onopencdata"),r.state=b.CDATA,r.sgmlDecl="",r.cdata=""):r.sgmlDecl+o==="--"?(r.state=b.COMMENT,r.comment="",r.sgmlDecl=""):"DOCTYPE"===(r.sgmlDecl+o).toUpperCase()?(r.state=b.DOCTYPE,(r.doctype||r.sawRoot)&&N(r,"Inappropriately located doctype declaration"),r.doctype="",r.sgmlDecl=""):">"===o?(O(r,"onsgmldeclaration",r.sgmlDecl),r.sgmlDecl="",r.state=b.TEXT):f(o)?(r.state=b.SGML_DECL_QUOTED,r.sgmlDecl+=o):r.sgmlDecl+=o;continue;case b.SGML_DECL_QUOTED:o===r.q&&(r.state=b.SGML_DECL,r.q=""),r.sgmlDecl+=o;continue;case b.DOCTYPE:">"===o?(r.state=b.TEXT,O(r,"ondoctype",r.doctype),r.doctype=!0):(r.doctype+=o,"["===o?r.state=b.DOCTYPE_DTD:f(o)&&(r.state=b.DOCTYPE_QUOTED,r.q=o));continue;case b.DOCTYPE_QUOTED:r.doctype+=o,o===r.q&&(r.q="",r.state=b.DOCTYPE);continue;case b.DOCTYPE_DTD:r.doctype+=o,"]"===o?r.state=b.DOCTYPE:f(o)&&(r.state=b.DOCTYPE_DTD_QUOTED,r.q=o);continue;case b.DOCTYPE_DTD_QUOTED:r.doctype+=o,o===r.q&&(r.state=b.DOCTYPE_DTD,r.q="");continue;case b.COMMENT:"-"===o?r.state=b.COMMENT_ENDING:r.comment+=o;continue;case b.COMMENT_ENDING:"-"===o?(r.state=b.COMMENT_ENDED,r.comment=S(r.opt,r.comment),r.comment&&O(r,"oncomment",r.comment),r.comment=""):(r.comment+="-"+o,r.state=b.COMMENT);continue;case b.COMMENT_ENDED:">"!==o?(N(r,"Malformed comment"),r.comment+="--"+o,r.state=b.COMMENT):r.state=b.TEXT;continue;case b.CDATA:"]"===o?r.state=b.CDATA_ENDING:r.cdata+=o;continue;case b.CDATA_ENDING:"]"===o?r.state=b.CDATA_ENDING_2:(r.cdata+="]"+o,r.state=b.CDATA);continue;case b.CDATA_ENDING_2:">"===o?(r.cdata&&O(r,"oncdata",r.cdata),O(r,"onclosecdata"),r.cdata="",r.state=b.TEXT):"]"===o?r.cdata+="]":(r.cdata+="]]"+o,r.state=b.CDATA);continue;case b.PROC_INST:"?"===o?r.state=b.PROC_INST_ENDING:p(o)?r.state=b.PROC_INST_BODY:r.procInstName+=o;continue;case b.PROC_INST_BODY:if(!r.procInstBody&&p(o))continue;"?"===o?r.state=b.PROC_INST_ENDING:r.procInstBody+=o;continue;case b.PROC_INST_ENDING:">"===o?(O(r,"onprocessinginstruction",{name:r.procInstName,body:r.procInstBody}),r.procInstName=r.procInstBody="",r.state=b.TEXT):(r.procInstBody+="?"+o,r.state=b.PROC_INST_BODY);continue;case b.OPEN_TAG:g(u,o)?r.tagName+=o:(R(r),">"===o?F(r):"/"===o?r.state=b.OPEN_TAG_SLASH:(p(o)||N(r,"Invalid character in tag name"),r.state=b.ATTRIB));continue;case b.OPEN_TAG_SLASH:">"===o?(F(r,!0),$(r)):(N(r,"Forward-slash in opening tag not followed by >"),r.state=b.ATTRIB);continue;case b.ATTRIB:if(p(o))continue;">"===o?F(r):"/"===o?r.state=b.OPEN_TAG_SLASH:g(c,o)?(r.attribName=o,r.attribValue="",r.state=b.ATTRIB_NAME):N(r,"Invalid attribute name");continue;case b.ATTRIB_NAME:"="===o?r.state=b.ATTRIB_VALUE:">"===o?(N(r,"Attribute without value"),r.attribValue=r.attribName,k(r),F(r)):p(o)?r.state=b.ATTRIB_NAME_SAW_WHITE:g(u,o)?r.attribName+=o:N(r,"Invalid attribute name");continue;case b.ATTRIB_NAME_SAW_WHITE:if("="===o)r.state=b.ATTRIB_VALUE;else{if(p(o))continue;N(r,"Attribute without value"),r.tag.attributes[r.attribName]="",r.attribValue="",O(r,"onattribute",{name:r.attribName,value:""}),r.attribName="",">"===o?F(r):g(c,o)?(r.attribName=o,r.state=b.ATTRIB_NAME):(N(r,"Invalid attribute name"),r.state=b.ATTRIB)}continue;case b.ATTRIB_VALUE:if(p(o))continue;f(o)?(r.q=o,r.state=b.ATTRIB_VALUE_QUOTED):(N(r,"Unquoted attribute value"),r.state=b.ATTRIB_VALUE_UNQUOTED,r.attribValue=o);continue;case b.ATTRIB_VALUE_QUOTED:if(o!==r.q){"&"===o?r.state=b.ATTRIB_VALUE_ENTITY_Q:r.attribValue+=o;continue}k(r),r.q="",r.state=b.ATTRIB_VALUE_CLOSED;continue;case b.ATTRIB_VALUE_CLOSED:p(o)?r.state=b.ATTRIB:">"===o?F(r):"/"===o?r.state=b.OPEN_TAG_SLASH:g(c,o)?(N(r,"No whitespace between attributes"),r.attribName=o,r.attribValue="",r.state=b.ATTRIB_NAME):N(r,"Invalid attribute name");continue;case b.ATTRIB_VALUE_UNQUOTED:if(!m(o)){"&"===o?r.state=b.ATTRIB_VALUE_ENTITY_U:r.attribValue+=o;continue}k(r),">"===o?F(r):r.state=b.ATTRIB;continue;case b.CLOSE_TAG:if(r.tagName)">"===o?$(r):g(u,o)?r.tagName+=o:r.script?(r.script+="</"+r.tagName,r.tagName="",r.state=b.SCRIPT):(p(o)||N(r,"Invalid tagname in closing tag"),r.state=b.CLOSE_TAG_SAW_WHITE);else{if(p(o))continue;y(c,o)?r.script?(r.script+="</"+o,r.state=b.SCRIPT):N(r,"Invalid tagname in closing tag."):r.tagName=o}continue;case b.CLOSE_TAG_SAW_WHITE:if(p(o))continue;">"===o?$(r):N(r,"Invalid characters in closing tag");continue;case b.TEXT_ENTITY:case b.ATTRIB_VALUE_ENTITY_Q:case b.ATTRIB_VALUE_ENTITY_U:var l,E;switch(r.state){case b.TEXT_ENTITY:l=b.TEXT,E="textNode";break;case b.ATTRIB_VALUE_ENTITY_Q:l=b.ATTRIB_VALUE_QUOTED,E="attribValue";break;case b.ATTRIB_VALUE_ENTITY_U:l=b.ATTRIB_VALUE_UNQUOTED,E="attribValue"}";"===o?(r[E]+=x(r),r.entity="",r.state=l):g(r.entity.length?h:d,o)?r.entity+=o:(N(r,"Invalid character in entity name"),r[E]+="&"+r.entity+o,r.entity="",r.state=l);continue;default:throw new Error(r,"Unknown state: "+r.state)}return r.position>=r.bufferCheckPosition&&function(t){for(var r=Math.max(e.MAX_BUFFER_LENGTH,10),i=0,o=0,a=n.length;o<a;o++){var s=t[n[o]].length;if(s>r)switch(n[o]){case"textNode":_(t);break;case"cdata":O(t,"oncdata",t.cdata),t.cdata="";break;case"script":O(t,"onscript",t.script),t.script="";break;default:I(t,"Max buffer length exceeded: "+n[o])}i=Math.max(i,s)}var l=e.MAX_BUFFER_LENGTH-i;t.bufferCheckPosition=l+t.position}(r),r}
/*! http://mths.be/fromcodepoint v0.1.0 by @mathias */,resume:function(){return this.error=null,this},close:function(){return this.write(null)},flush:function(){var e;_(e=this),""!==e.cdata&&(O(e,"oncdata",e.cdata),e.cdata=""),""!==e.script&&(O(e,"onscript",e.script),e.script="")}};try{t=require("stream").Stream}catch(e){t=function(){}}var i=e.EVENTS.filter((function(e){return"error"!==e&&"end"!==e}));function o(e,n){if(!(this instanceof o))return new o(e,n);t.apply(this),this._parser=new r(e,n),this.writable=!0,this.readable=!0;var a=this;this._parser.onend=function(){a.emit("end")},this._parser.onerror=function(e){a.emit("error",e),a._parser.error=null},this._decoder=null,i.forEach((function(e){Object.defineProperty(a,"on"+e,{get:function(){return a._parser["on"+e]},set:function(t){if(!t)return a.removeAllListeners(e),a._parser["on"+e]=t,t;a.on(e,t)},enumerable:!0,configurable:!1})}))}o.prototype=Object.create(t.prototype,{constructor:{value:o}}),o.prototype.write=function(e){if("function"==typeof Buffer&&"function"==typeof Buffer.isBuffer&&Buffer.isBuffer(e)){if(!this._decoder){var t=P.default.StringDecoder;this._decoder=new t("utf8")}e=this._decoder.write(e)}return this._parser.write(e.toString()),this.emit("data",e),!0},o.prototype.end=function(e){return e&&e.length&&this.write(e),this._parser.end(),!0},o.prototype.on=function(e,n){var r=this;return r._parser["on"+e]||-1===i.indexOf(e)||(r._parser["on"+e]=function(){var t=1===arguments.length?[arguments[0]]:Array.apply(null,arguments);t.splice(0,0,e),r.emit.apply(r,t)}),t.prototype.on.call(r,e,n)};var a="http://www.w3.org/XML/1998/namespace",s="http://www.w3.org/2000/xmlns/",l={xml:a,xmlns:s},c=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,u=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/,d=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,h=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;function p(e){return" "===e||"\n"===e||"\r"===e||"\t"===e}function f(e){return'"'===e||"'"===e}function m(e){return">"===e||p(e)}function g(e,t){return e.test(t)}function y(e,t){return!g(e,t)}var E,v,w,b=0;for(var A in e.STATE={BEGIN:b++,BEGIN_WHITESPACE:b++,TEXT:b++,TEXT_ENTITY:b++,OPEN_WAKA:b++,SGML_DECL:b++,SGML_DECL_QUOTED:b++,DOCTYPE:b++,DOCTYPE_QUOTED:b++,DOCTYPE_DTD:b++,DOCTYPE_DTD_QUOTED:b++,COMMENT_STARTING:b++,COMMENT:b++,COMMENT_ENDING:b++,COMMENT_ENDED:b++,CDATA:b++,CDATA_ENDING:b++,CDATA_ENDING_2:b++,PROC_INST:b++,PROC_INST_BODY:b++,PROC_INST_ENDING:b++,OPEN_TAG:b++,OPEN_TAG_SLASH:b++,ATTRIB:b++,ATTRIB_NAME:b++,ATTRIB_NAME_SAW_WHITE:b++,ATTRIB_VALUE:b++,ATTRIB_VALUE_QUOTED:b++,ATTRIB_VALUE_CLOSED:b++,ATTRIB_VALUE_UNQUOTED:b++,ATTRIB_VALUE_ENTITY_Q:b++,ATTRIB_VALUE_ENTITY_U:b++,CLOSE_TAG:b++,CLOSE_TAG_SAW_WHITE:b++,SCRIPT:b++,SCRIPT_ENDING:b++},e.XML_ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'"},e.ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'",AElig:198,Aacute:193,Acirc:194,Agrave:192,Aring:197,Atilde:195,Auml:196,Ccedil:199,ETH:208,Eacute:201,Ecirc:202,Egrave:200,Euml:203,Iacute:205,Icirc:206,Igrave:204,Iuml:207,Ntilde:209,Oacute:211,Ocirc:212,Ograve:210,Oslash:216,Otilde:213,Ouml:214,THORN:222,Uacute:218,Ucirc:219,Ugrave:217,Uuml:220,Yacute:221,aacute:225,acirc:226,aelig:230,agrave:224,aring:229,atilde:227,auml:228,ccedil:231,eacute:233,ecirc:234,egrave:232,eth:240,euml:235,iacute:237,icirc:238,igrave:236,iuml:239,ntilde:241,oacute:243,ocirc:244,ograve:242,oslash:248,otilde:245,ouml:246,szlig:223,thorn:254,uacute:250,ucirc:251,ugrave:249,uuml:252,yacute:253,yuml:255,copy:169,reg:174,nbsp:160,iexcl:161,cent:162,pound:163,curren:164,yen:165,brvbar:166,sect:167,uml:168,ordf:170,laquo:171,not:172,shy:173,macr:175,deg:176,plusmn:177,sup1:185,sup2:178,sup3:179,acute:180,micro:181,para:182,middot:183,cedil:184,ordm:186,raquo:187,frac14:188,frac12:189,frac34:190,iquest:191,times:215,divide:247,OElig:338,oelig:339,Scaron:352,scaron:353,Yuml:376,fnof:402,circ:710,tilde:732,Alpha:913,Beta:914,Gamma:915,Delta:916,Epsilon:917,Zeta:918,Eta:919,Theta:920,Iota:921,Kappa:922,Lambda:923,Mu:924,Nu:925,Xi:926,Omicron:927,Pi:928,Rho:929,Sigma:931,Tau:932,Upsilon:933,Phi:934,Chi:935,Psi:936,Omega:937,alpha:945,beta:946,gamma:947,delta:948,epsilon:949,zeta:950,eta:951,theta:952,iota:953,kappa:954,lambda:955,mu:956,nu:957,xi:958,omicron:959,pi:960,rho:961,sigmaf:962,sigma:963,tau:964,upsilon:965,phi:966,chi:967,psi:968,omega:969,thetasym:977,upsih:978,piv:982,ensp:8194,emsp:8195,thinsp:8201,zwnj:8204,zwj:8205,lrm:8206,rlm:8207,ndash:8211,mdash:8212,lsquo:8216,rsquo:8217,sbquo:8218,ldquo:8220,rdquo:8221,bdquo:8222,dagger:8224,Dagger:8225,bull:8226,hellip:8230,permil:8240,prime:8242,Prime:8243,lsaquo:8249,rsaquo:8250,oline:8254,frasl:8260,euro:8364,image:8465,weierp:8472,real:8476,trade:8482,alefsym:8501,larr:8592,uarr:8593,rarr:8594,darr:8595,harr:8596,crarr:8629,lArr:8656,uArr:8657,rArr:8658,dArr:8659,hArr:8660,forall:8704,part:8706,exist:8707,empty:8709,nabla:8711,isin:8712,notin:8713,ni:8715,prod:8719,sum:8721,minus:8722,lowast:8727,radic:8730,prop:8733,infin:8734,ang:8736,and:8743,or:8744,cap:8745,cup:8746,int:8747,there4:8756,sim:8764,cong:8773,asymp:8776,ne:8800,equiv:8801,le:8804,ge:8805,sub:8834,sup:8835,nsub:8836,sube:8838,supe:8839,oplus:8853,otimes:8855,perp:8869,sdot:8901,lceil:8968,rceil:8969,lfloor:8970,rfloor:8971,lang:9001,rang:9002,loz:9674,spades:9824,clubs:9827,hearts:9829,diams:9830},Object.keys(e.ENTITIES).forEach((function(t){var n=e.ENTITIES[t],r="number"==typeof n?String.fromCharCode(n):n;e.ENTITIES[t]=r})),e.STATE)e.STATE[e.STATE[A]]=A;function T(e,t,n){e[t]&&e[t](n)}function O(e,t,n){e.textNode&&_(e),T(e,t,n)}function _(e){e.textNode=S(e.opt,e.textNode),e.textNode&&T(e,"ontext",e.textNode),e.textNode=""}function S(e,t){return e.trim&&(t=t.trim()),e.normalize&&(t=t.replace(/\s+/g," ")),t}function I(e,t){return _(e),e.trackPosition&&(t+="\nLine: "+e.line+"\nColumn: "+e.column+"\nChar: "+e.c),t=new Error(t),e.error=t,T(e,"onerror",t),e}function C(e){return e.sawRoot&&!e.closedRoot&&N(e,"Unclosed root tag"),e.state!==b.BEGIN&&e.state!==b.BEGIN_WHITESPACE&&e.state!==b.TEXT&&I(e,"Unexpected end"),_(e),e.c="",e.closed=!0,T(e,"onend"),r.call(e,e.strict,e.opt),e}function N(e,t){if("object"!=typeof e||!(e instanceof r))throw new Error("bad call to strictFail");e.strict&&I(e,t)}function R(e){e.strict||(e.tagName=e.tagName[e.looseCase]());var t=e.tags[e.tags.length-1]||e,n=e.tag={name:e.tagName,attributes:{}};e.opt.xmlns&&(n.ns=t.ns),e.attribList.length=0,O(e,"onopentagstart",n)}function D(e,t){var n=e.indexOf(":")<0?["",e]:e.split(":"),r=n[0],i=n[1];return t&&"xmlns"===e&&(r="xmlns",i=""),{prefix:r,local:i}}function k(e){if(e.strict||(e.attribName=e.attribName[e.looseCase]()),-1!==e.attribList.indexOf(e.attribName)||e.tag.attributes.hasOwnProperty(e.attribName))e.attribName=e.attribValue="";else{if(e.opt.xmlns){var t=D(e.attribName,!0),n=t.prefix,r=t.local;if("xmlns"===n)if("xml"===r&&e.attribValue!==a)N(e,"xml: prefix must be bound to "+a+"\nActual: "+e.attribValue);else if("xmlns"===r&&e.attribValue!==s)N(e,"xmlns: prefix must be bound to "+s+"\nActual: "+e.attribValue);else{var i=e.tag,o=e.tags[e.tags.length-1]||e;i.ns===o.ns&&(i.ns=Object.create(o.ns)),i.ns[r]=e.attribValue}e.attribList.push([e.attribName,e.attribValue])}else e.tag.attributes[e.attribName]=e.attribValue,O(e,"onattribute",{name:e.attribName,value:e.attribValue});e.attribName=e.attribValue=""}}function F(e,t){if(e.opt.xmlns){var n=e.tag,r=D(e.tagName);n.prefix=r.prefix,n.local=r.local,n.uri=n.ns[r.prefix]||"",n.prefix&&!n.uri&&(N(e,"Unbound namespace prefix: "+JSON.stringify(e.tagName)),n.uri=r.prefix);var i=e.tags[e.tags.length-1]||e;n.ns&&i.ns!==n.ns&&Object.keys(n.ns).forEach((function(t){O(e,"onopennamespace",{prefix:t,uri:n.ns[t]})}));for(var o=0,a=e.attribList.length;o<a;o++){var s=e.attribList[o],l=s[0],c=s[1],u=D(l,!0),d=u.prefix,h=u.local,p=""===d?"":n.ns[d]||"",f={name:l,value:c,prefix:d,local:h,uri:p};d&&"xmlns"!==d&&!p&&(N(e,"Unbound namespace prefix: "+JSON.stringify(d)),f.uri=d),e.tag.attributes[l]=f,O(e,"onattribute",f)}e.attribList.length=0}e.tag.isSelfClosing=!!t,e.sawRoot=!0,e.tags.push(e.tag),O(e,"onopentag",e.tag),t||(e.noscript||"script"!==e.tagName.toLowerCase()?e.state=b.TEXT:e.state=b.SCRIPT,e.tag=null,e.tagName=""),e.attribName=e.attribValue="",e.attribList.length=0}function $(e){if(!e.tagName)return N(e,"Weird empty close tag."),e.textNode+="</>",void(e.state=b.TEXT);if(e.script){if("script"!==e.tagName)return e.script+="</"+e.tagName+">",e.tagName="",void(e.state=b.SCRIPT);O(e,"onscript",e.script),e.script=""}var t=e.tags.length,n=e.tagName;e.strict||(n=n[e.looseCase]());for(var r=n;t--&&e.tags[t].name!==r;)N(e,"Unexpected close tag");if(t<0)return N(e,"Unmatched closing tag: "+e.tagName),e.textNode+="</"+e.tagName+">",void(e.state=b.TEXT);e.tagName=n;for(var i=e.tags.length;i-- >t;){var o=e.tag=e.tags.pop();e.tagName=e.tag.name,O(e,"onclosetag",e.tagName);var a={};for(var s in o.ns)a[s]=o.ns[s];var l=e.tags[e.tags.length-1]||e;e.opt.xmlns&&o.ns!==l.ns&&Object.keys(o.ns).forEach((function(t){var n=o.ns[t];O(e,"onclosenamespace",{prefix:t,uri:n})}))}0===t&&(e.closedRoot=!0),e.tagName=e.attribValue=e.attribName="",e.attribList.length=0,e.state=b.TEXT}function x(e){var t,n=e.entity,r=n.toLowerCase(),i="";return e.ENTITIES[n]?e.ENTITIES[n]:e.ENTITIES[r]?e.ENTITIES[r]:("#"===(n=r).charAt(0)&&("x"===n.charAt(1)?(n=n.slice(2),i=(t=parseInt(n,16)).toString(16)):(n=n.slice(1),i=(t=parseInt(n,10)).toString(10))),n=n.replace(/^0+/,""),isNaN(t)||i.toLowerCase()!==n?(N(e,"Invalid character entity"),"&"+e.entity+";"):String.fromCodePoint(t))}function U(e,t){"<"===t?(e.state=b.OPEN_WAKA,e.startTagPosition=e.position):p(t)||(N(e,"Non-whitespace before first tag."),e.textNode=t,e.state=b.TEXT)}function L(e,t){var n="";return t<e.length&&(n=e.charAt(t)),n}b=e.STATE,String.fromCodePoint||(E=String.fromCharCode,v=Math.floor,w=function(){var e,t,n=16384,r=[],i=-1,o=arguments.length;if(!o)return"";for(var a="";++i<o;){var s=Number(arguments[i]);if(!isFinite(s)||s<0||s>1114111||v(s)!==s)throw RangeError("Invalid code point: "+s);s<=65535?r.push(s):(e=55296+((s-=65536)>>10),t=s%1024+56320,r.push(e,t)),(i+1===o||r.length>n)&&(a+=E.apply(null,r),r.length=0)}return a},Object.defineProperty?Object.defineProperty(String,"fromCodePoint",{value:w,configurable:!0,writable:!0}):String.fromCodePoint=w)}(qe),Object.defineProperty(Me,"__esModule",{value:!0}),Me.parseXml=Me.XElement=void 0;const Be=qe,He=z;class Ge{constructor(e){if(this.name=e,this.value="",this.attributes=null,this.isCData=!1,this.elements=null,!e)throw He.newError("Element name cannot be empty","ERR_XML_ELEMENT_NAME_EMPTY");if(!function(e){return Ve.test(e)}(e))throw He.newError(`Invalid element name: ${e}`,"ERR_XML_ELEMENT_INVALID_NAME")}attribute(e){const t=null===this.attributes?null:this.attributes[e];if(null==t)throw He.newError(`No attribute "${e}"`,"ERR_XML_MISSED_ATTRIBUTE");return t}removeAttribute(e){null!==this.attributes&&delete this.attributes[e]}element(e,t=!1,n=null){const r=this.elementOrNull(e,t);if(null===r)throw He.newError(n||`No element "${e}"`,"ERR_XML_MISSED_ELEMENT");return r}elementOrNull(e,t=!1){if(null===this.elements)return null;for(const n of this.elements)if(ze(n,e,t))return n;return null}getElements(e,t=!1){return null===this.elements?[]:this.elements.filter((n=>ze(n,e,t)))}elementValueOrEmpty(e,t=!1){const n=this.elementOrNull(e,t);return null===n?"":n.value}}Me.XElement=Ge;const Ve=new RegExp(/^[A-Za-z_][:A-Za-z0-9_-]*$/i);function ze(e,t,n){const r=e.name;return r===t||!0===n&&r.length===t.length&&r.toLowerCase()===t.toLowerCase()}Me.parseXml=function(e){let t=null;const n=Be.parser(!0,{}),r=[];return n.onopentag=e=>{const n=new Ge(e.name);if(n.attributes=e.attributes,null===t)t=n;else{const e=r[r.length-1];null==e.elements&&(e.elements=[]),e.elements.push(n)}r.push(n)},n.onclosetag=()=>{r.pop()},n.ontext=e=>{r.length>0&&(r[r.length-1].value=e)},n.oncdata=e=>{const t=r[r.length-1];t.value=e,t.isCData=!0},n.onerror=e=>{throw e},n.write(e),t},function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.newError=e.asArray=e.CURRENT_APP_PACKAGE_FILE_NAME=e.CURRENT_APP_INSTALLER_FILE_NAME=e.XElement=e.parseXml=e.ProgressCallbackTransform=e.UUID=e.parseDn=e.githubUrl=e.getS3LikeProviderBaseUrl=e.configureRequestUrl=e.parseJson=e.safeStringifyJson=e.configureRequestOptionsFromUrl=e.configureRequestOptions=e.safeGetHeader=e.DigestTransform=e.HttpExecutor=e.createHttpError=e.HttpError=e.CancellationError=e.CancellationToken=void 0;var t=W;Object.defineProperty(e,"CancellationToken",{enumerable:!0,get:function(){return t.CancellationToken}}),Object.defineProperty(e,"CancellationError",{enumerable:!0,get:function(){return t.CancellationError}});var n=K;Object.defineProperty(e,"HttpError",{enumerable:!0,get:function(){return n.HttpError}}),Object.defineProperty(e,"createHttpError",{enumerable:!0,get:function(){return n.createHttpError}}),Object.defineProperty(e,"HttpExecutor",{enumerable:!0,get:function(){return n.HttpExecutor}}),Object.defineProperty(e,"DigestTransform",{enumerable:!0,get:function(){return n.DigestTransform}}),Object.defineProperty(e,"safeGetHeader",{enumerable:!0,get:function(){return n.safeGetHeader}}),Object.defineProperty(e,"configureRequestOptions",{enumerable:!0,get:function(){return n.configureRequestOptions}}),Object.defineProperty(e,"configureRequestOptionsFromUrl",{enumerable:!0,get:function(){return n.configureRequestOptionsFromUrl}}),Object.defineProperty(e,"safeStringifyJson",{enumerable:!0,get:function(){return n.safeStringifyJson}}),Object.defineProperty(e,"parseJson",{enumerable:!0,get:function(){return n.parseJson}}),Object.defineProperty(e,"configureRequestUrl",{enumerable:!0,get:function(){return n.configureRequestUrl}});var r=Ie;Object.defineProperty(e,"getS3LikeProviderBaseUrl",{enumerable:!0,get:function(){return r.getS3LikeProviderBaseUrl}}),Object.defineProperty(e,"githubUrl",{enumerable:!0,get:function(){return r.githubUrl}});var i=Ne;Object.defineProperty(e,"parseDn",{enumerable:!0,get:function(){return i.parseDn}});var o=Re;Object.defineProperty(e,"UUID",{enumerable:!0,get:function(){return o.UUID}});var a=oe;Object.defineProperty(e,"ProgressCallbackTransform",{enumerable:!0,get:function(){return a.ProgressCallbackTransform}});var s=Me;Object.defineProperty(e,"parseXml",{enumerable:!0,get:function(){return s.parseXml}}),Object.defineProperty(e,"XElement",{enumerable:!0,get:function(){return s.XElement}}),e.CURRENT_APP_INSTALLER_FILE_NAME="installer.exe",e.CURRENT_APP_PACKAGE_FILE_NAME="package.7z",e.asArray=function(e){return null==e?[]:Array.isArray(e)?e:[e]},e.newError=function(e,t){const n=new Error(e);return n.code=t,n}}(z);var We={},Ye={},Xe={fromCallback:function(e){return Object.defineProperty((function(...t){if("function"!=typeof t[t.length-1])return new Promise(((n,r)=>{e.call(this,...t,((e,t)=>null!=e?r(e):n(t)))}));e.apply(this,t)}),"name",{value:e.name})},fromPromise:function(e){return Object.defineProperty((function(...t){const n=t[t.length-1];if("function"!=typeof n)return e.apply(this,t);e.apply(this,t.slice(0,-1)).then((e=>n(null,e)),n)}),"name",{value:e.name})}},Je=k.default,Ke=process.cwd,Qe=null,Ze=process.platform;process.cwd=function(){return Qe||(Qe=Ke.call(process)),Qe};try{process.cwd()}catch(e){}if("function"==typeof process.chdir){var et=process.chdir;process.chdir=function(e){Qe=null,et.call(process,e)},Object.setPrototypeOf&&Object.setPrototypeOf(process.chdir,et)}var tt,nt,rt=R.default.Stream,it=Object.getPrototypeOf||function(e){return e.__proto__},ot=N.default,at=function(e){var t,n,r;function i(t){return t?function(n,r,i){return t.call(e,n,r,(function(e){u(e)&&(e=null),i&&i.apply(this,arguments)}))}:t}function o(t){return t?function(n,r){try{return t.call(e,n,r)}catch(e){if(!u(e))throw e}}:t}function a(t){return t?function(n,r,i,o){return t.call(e,n,r,i,(function(e){u(e)&&(e=null),o&&o.apply(this,arguments)}))}:t}function s(t){return t?function(n,r,i){try{return t.call(e,n,r,i)}catch(e){if(!u(e))throw e}}:t}function l(t){return t?function(n,r,i){function o(e,t){t&&(t.uid<0&&(t.uid+=4294967296),t.gid<0&&(t.gid+=4294967296)),i&&i.apply(this,arguments)}return"function"==typeof r&&(i=r,r=null),r?t.call(e,n,r,o):t.call(e,n,o)}:t}function c(t){return t?function(n,r){var i=r?t.call(e,n,r):t.call(e,n);return i.uid<0&&(i.uid+=4294967296),i.gid<0&&(i.gid+=4294967296),i}:t}function u(e){return!e||"ENOSYS"===e.code||!(process.getuid&&0===process.getuid()||"EINVAL"!==e.code&&"EPERM"!==e.code)}Je.hasOwnProperty("O_SYMLINK")&&process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)&&((t=e).lchmod=function(e,n,r){t.open(e,Je.O_WRONLY|Je.O_SYMLINK,n,(function(e,i){e?r&&r(e):t.fchmod(i,n,(function(e){t.close(i,(function(t){r&&r(e||t)}))}))}))},t.lchmodSync=function(e,n){var r,i=t.openSync(e,Je.O_WRONLY|Je.O_SYMLINK,n),o=!0;try{r=t.fchmodSync(i,n),o=!1}finally{if(o)try{t.closeSync(i)}catch(e){}else t.closeSync(i)}return r}),e.lutimes||function(e){Je.hasOwnProperty("O_SYMLINK")?(e.lutimes=function(t,n,r,i){e.open(t,Je.O_SYMLINK,(function(t,o){t?i&&i(t):e.futimes(o,n,r,(function(t){e.close(o,(function(e){i&&i(t||e)}))}))}))},e.lutimesSync=function(t,n,r){var i,o=e.openSync(t,Je.O_SYMLINK),a=!0;try{i=e.futimesSync(o,n,r),a=!1}finally{if(a)try{e.closeSync(o)}catch(e){}else e.closeSync(o)}return i}):(e.lutimes=function(e,t,n,r){r&&process.nextTick(r)},e.lutimesSync=function(){})}(e),e.chown=a(e.chown),e.fchown=a(e.fchown),e.lchown=a(e.lchown),e.chmod=i(e.chmod),e.fchmod=i(e.fchmod),e.lchmod=i(e.lchmod),e.chownSync=s(e.chownSync),e.fchownSync=s(e.fchownSync),e.lchownSync=s(e.lchownSync),e.chmodSync=o(e.chmodSync),e.fchmodSync=o(e.fchmodSync),e.lchmodSync=o(e.lchmodSync),e.stat=l(e.stat),e.fstat=l(e.fstat),e.lstat=l(e.lstat),e.statSync=c(e.statSync),e.fstatSync=c(e.fstatSync),e.lstatSync=c(e.lstatSync),e.lchmod||(e.lchmod=function(e,t,n){n&&process.nextTick(n)},e.lchmodSync=function(){}),e.lchown||(e.lchown=function(e,t,n,r){r&&process.nextTick(r)},e.lchownSync=function(){}),"win32"===Ze&&(e.rename=(n=e.rename,function(t,r,i){var o=Date.now(),a=0;n(t,r,(function s(l){if(l&&("EACCES"===l.code||"EPERM"===l.code)&&Date.now()-o<6e4)return setTimeout((function(){e.stat(r,(function(e,o){e&&"ENOENT"===e.code?n(t,r,s):i(l)}))}),a),void(a<100&&(a+=10));i&&i(l)}))})),e.read=function(t){function n(n,r,i,o,a,s){var l;if(s&&"function"==typeof s){var c=0;l=function(u,d,h){if(u&&"EAGAIN"===u.code&&c<10)return c++,t.call(e,n,r,i,o,a,l);s.apply(this,arguments)}}return t.call(e,n,r,i,o,a,l)}return Object.setPrototypeOf&&Object.setPrototypeOf(n,t),n}(e.read),e.readSync=(r=e.readSync,function(t,n,i,o,a){for(var s=0;;)try{return r.call(e,t,n,i,o,a)}catch(e){if("EAGAIN"===e.code&&s<10){s++;continue}throw e}})},st=function(e){return{ReadStream:function t(n,r){if(!(this instanceof t))return new t(n,r);rt.call(this);var i=this;this.path=n,this.fd=null,this.readable=!0,this.paused=!1,this.flags="r",this.mode=438,this.bufferSize=65536,r=r||{};for(var o=Object.keys(r),a=0,s=o.length;a<s;a++){var l=o[a];this[l]=r[l]}if(this.encoding&&this.setEncoding(this.encoding),void 0!==this.start){if("number"!=typeof this.start)throw TypeError("start must be a Number");if(void 0===this.end)this.end=1/0;else if("number"!=typeof this.end)throw TypeError("end must be a Number");if(this.start>this.end)throw new Error("start must be <= end");this.pos=this.start}null===this.fd?e.open(this.path,this.flags,this.mode,(function(e,t){if(e)return i.emit("error",e),void(i.readable=!1);i.fd=t,i.emit("open",t),i._read()})):process.nextTick((function(){i._read()}))},WriteStream:function t(n,r){if(!(this instanceof t))return new t(n,r);rt.call(this),this.path=n,this.fd=null,this.writable=!0,this.flags="w",this.encoding="binary",this.mode=438,this.bytesWritten=0,r=r||{};for(var i=Object.keys(r),o=0,a=i.length;o<a;o++){var s=i[o];this[s]=r[s]}if(void 0!==this.start){if("number"!=typeof this.start)throw TypeError("start must be a Number");if(this.start<0)throw new Error("start must be >= zero");this.pos=this.start}this.busy=!1,this._queue=[],null===this.fd&&(this._open=e.open,this._queue.push([this._open,this.path,this.flags,this.mode,void 0]),this.flush())}}},lt=function(e){if(null===e||"object"!=typeof e)return e;if(e instanceof Object)var t={__proto__:it(e)};else t=Object.create(null);return Object.getOwnPropertyNames(e).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))})),t},ct=F.default;function ut(e,t){Object.defineProperty(e,tt,{get:function(){return t}})}"function"==typeof Symbol&&"function"==typeof Symbol.for?(tt=Symbol.for("graceful-fs.queue"),nt=Symbol.for("graceful-fs.previous")):(tt="___graceful-fs.queue",nt="___graceful-fs.previous");var dt=function(){};if(ct.debuglog?dt=ct.debuglog("gfs4"):/\bgfs4\b/i.test("")&&(dt=function(){var e=ct.format.apply(ct,arguments);e="GFS4: "+e.split(/\n/).join("\nGFS4: "),console.error(e)}),!ot[tt]){var ht=H[tt]||[];ut(ot,ht),ot.close=function(e){function t(t,n){return e.call(ot,t,(function(e){e||mt(),"function"==typeof n&&n.apply(this,arguments)}))}return Object.defineProperty(t,nt,{value:e}),t}(ot.close),ot.closeSync=function(e){function t(t){e.apply(ot,arguments),mt()}return Object.defineProperty(t,nt,{value:e}),t}(ot.closeSync),/\bgfs4\b/i.test("")&&process.on("exit",(function(){dt(ot[tt]),$.default.equal(ot[tt].length,0)}))}H[tt]||ut(H,ot[tt]);var pt=function e(t){at(t),t.gracefulify=e,t.createReadStream=function(e,n){return new t.ReadStream(e,n)},t.createWriteStream=function(e,n){return new t.WriteStream(e,n)};var n=t.readFile;t.readFile=function(e,t,r){return"function"==typeof t&&(r=t,t=null),function e(t,r,i){return n(t,r,(function(n){!n||"EMFILE"!==n.code&&"ENFILE"!==n.code?("function"==typeof i&&i.apply(this,arguments),mt()):ft([e,[t,r,i]])}))}(e,t,r)};var r=t.writeFile;t.writeFile=function(e,t,n,i){return"function"==typeof n&&(i=n,n=null),function e(t,n,i,o){return r(t,n,i,(function(r){!r||"EMFILE"!==r.code&&"ENFILE"!==r.code?("function"==typeof o&&o.apply(this,arguments),mt()):ft([e,[t,n,i,o]])}))}(e,t,n,i)};var i=t.appendFile;i&&(t.appendFile=function(e,t,n,r){return"function"==typeof n&&(r=n,n=null),function e(t,n,r,o){return i(t,n,r,(function(i){!i||"EMFILE"!==i.code&&"ENFILE"!==i.code?("function"==typeof o&&o.apply(this,arguments),mt()):ft([e,[t,n,r,o]])}))}(e,t,n,r)});var o=t.copyFile;o&&(t.copyFile=function(e,t,n,r){return"function"==typeof n&&(r=n,n=0),o(e,t,n,(function(i){!i||"EMFILE"!==i.code&&"ENFILE"!==i.code?("function"==typeof r&&r.apply(this,arguments),mt()):ft([o,[e,t,n,r]])}))});var a=t.readdir;function s(e){return a.apply(t,e)}if(t.readdir=function(e,t,n){var r=[e];return"function"!=typeof t?r.push(t):n=t,r.push((function(e,t){t&&t.sort&&t.sort(),!e||"EMFILE"!==e.code&&"ENFILE"!==e.code?("function"==typeof n&&n.apply(this,arguments),mt()):ft([s,[r]])})),s(r)},"v0.8"===process.version.substr(0,4)){var l=st(t);p=l.ReadStream,f=l.WriteStream}var c=t.ReadStream;c&&(p.prototype=Object.create(c.prototype),p.prototype.open=function(){var e=this;g(e.path,e.flags,e.mode,(function(t,n){t?(e.autoClose&&e.destroy(),e.emit("error",t)):(e.fd=n,e.emit("open",n),e.read())}))});var u=t.WriteStream;u&&(f.prototype=Object.create(u.prototype),f.prototype.open=function(){var e=this;g(e.path,e.flags,e.mode,(function(t,n){t?(e.destroy(),e.emit("error",t)):(e.fd=n,e.emit("open",n))}))}),Object.defineProperty(t,"ReadStream",{get:function(){return p},set:function(e){p=e},enumerable:!0,configurable:!0}),Object.defineProperty(t,"WriteStream",{get:function(){return f},set:function(e){f=e},enumerable:!0,configurable:!0});var d=p;Object.defineProperty(t,"FileReadStream",{get:function(){return d},set:function(e){d=e},enumerable:!0,configurable:!0});var h=f;function p(e,t){return this instanceof p?(c.apply(this,arguments),this):p.apply(Object.create(p.prototype),arguments)}function f(e,t){return this instanceof f?(u.apply(this,arguments),this):f.apply(Object.create(f.prototype),arguments)}Object.defineProperty(t,"FileWriteStream",{get:function(){return h},set:function(e){h=e},enumerable:!0,configurable:!0});var m=t.open;function g(e,t,n,r){return"function"==typeof n&&(r=n,n=null),function e(t,n,r,i){return m(t,n,r,(function(o,a){!o||"EMFILE"!==o.code&&"ENFILE"!==o.code?("function"==typeof i&&i.apply(this,arguments),mt()):ft([e,[t,n,r,i]])}))}(e,t,n,r)}return t.open=g,t}(lt(ot));function ft(e){dt("ENQUEUE",e[0].name,e[1]),ot[tt].push(e)}function mt(){var e=ot[tt].shift();e&&(dt("RETRY",e[0].name,e[1]),e[0].apply(null,e[1]))}!function(e){const t=Xe.fromCallback,n=pt,r=["access","appendFile","chmod","chown","close","copyFile","fchmod","fchown","fdatasync","fstat","fsync","ftruncate","futimes","lchmod","lchown","link","lstat","mkdir","mkdtemp","open","opendir","readdir","readFile","readlink","realpath","rename","rm","rmdir","stat","symlink","truncate","unlink","utimes","writeFile"].filter((e=>"function"==typeof n[e]));Object.assign(e,n),r.forEach((r=>{e[r]=t(n[r])})),e.realpath.native=t(n.realpath.native),e.exists=function(e,t){return"function"==typeof t?n.exists(e,t):new Promise((t=>n.exists(e,t)))},e.read=function(e,t,r,i,o,a){return"function"==typeof a?n.read(e,t,r,i,o,a):new Promise(((a,s)=>{n.read(e,t,r,i,o,((e,t,n)=>{if(e)return s(e);a({bytesRead:t,buffer:n})}))}))},e.write=function(e,t,...r){return"function"==typeof r[r.length-1]?n.write(e,t,...r):new Promise(((i,o)=>{n.write(e,t,...r,((e,t,n)=>{if(e)return o(e);i({bytesWritten:t,buffer:n})}))}))},"function"==typeof n.writev&&(e.writev=function(e,t,...r){return"function"==typeof r[r.length-1]?n.writev(e,t,...r):new Promise(((i,o)=>{n.writev(e,t,...r,((e,t,n)=>{if(e)return o(e);i({bytesWritten:t,buffers:n})}))}))})}(Ye);var gt={},yt={};const Et=x.default;yt.checkPath=function(e){if("win32"===process.platform&&/[<>:"|?*]/.test(e.replace(Et.parse(e).root,""))){const t=new Error(`Path contains invalid characters: ${e}`);throw t.code="EINVAL",t}};const vt=Ye,{checkPath:wt}=yt,bt=e=>"number"==typeof e?e:s(s({},{mode:511}),e).mode;gt.makeDir=async(e,t)=>(wt(e),vt.mkdir(e,{mode:bt(t),recursive:!0})),gt.makeDirSync=(e,t)=>(wt(e),vt.mkdirSync(e,{mode:bt(t),recursive:!0}));const At=Xe.fromPromise,{makeDir:Tt,makeDirSync:Ot}=gt,_t=At(Tt);var St={mkdirs:_t,mkdirsSync:Ot,mkdirp:_t,mkdirpSync:Ot,ensureDir:_t,ensureDirSync:Ot};const It=pt;const Ct=Ye,Nt=x.default,Rt=F.default;function Dt(e,t,n){const r=n.dereference?e=>Ct.stat(e,{bigint:!0}):e=>Ct.lstat(e,{bigint:!0});return Promise.all([r(e),r(t).catch((e=>{if("ENOENT"===e.code)return null;throw e}))]).then((([e,t])=>({srcStat:e,destStat:t})))}function Pt(e,t){return t.ino&&t.dev&&t.ino===e.ino&&t.dev===e.dev}function kt(e,t){const n=Nt.resolve(e).split(Nt.sep).filter((e=>e)),r=Nt.resolve(t).split(Nt.sep).filter((e=>e));return n.reduce(((e,t,n)=>e&&r[n]===t),!0)}function Ft(e,t,n){return`Cannot ${n} '${e}' to a subdirectory of itself, '${t}'.`}var $t={checkPaths:function(e,t,n,r,i){Rt.callbackify(Dt)(e,t,r,((r,o)=>{if(r)return i(r);const{srcStat:a,destStat:s}=o;if(s){if(Pt(a,s)){const r=Nt.basename(e),o=Nt.basename(t);return"move"===n&&r!==o&&r.toLowerCase()===o.toLowerCase()?i(null,{srcStat:a,destStat:s,isChangingCase:!0}):i(new Error("Source and destination must not be the same."))}if(a.isDirectory()&&!s.isDirectory())return i(new Error(`Cannot overwrite non-directory '${t}' with directory '${e}'.`));if(!a.isDirectory()&&s.isDirectory())return i(new Error(`Cannot overwrite directory '${t}' with non-directory '${e}'.`))}return a.isDirectory()&&kt(e,t)?i(new Error(Ft(e,t,n))):i(null,{srcStat:a,destStat:s})}))},checkPathsSync:function(e,t,n,r){const{srcStat:i,destStat:o}=function(e,t,n){let r;const i=n.dereference?e=>Ct.statSync(e,{bigint:!0}):e=>Ct.lstatSync(e,{bigint:!0}),o=i(e);try{r=i(t)}catch(e){if("ENOENT"===e.code)return{srcStat:o,destStat:null};throw e}return{srcStat:o,destStat:r}}(e,t,r);if(o){if(Pt(i,o)){const r=Nt.basename(e),a=Nt.basename(t);if("move"===n&&r!==a&&r.toLowerCase()===a.toLowerCase())return{srcStat:i,destStat:o,isChangingCase:!0};throw new Error("Source and destination must not be the same.")}if(i.isDirectory()&&!o.isDirectory())throw new Error(`Cannot overwrite non-directory '${t}' with directory '${e}'.`);if(!i.isDirectory()&&o.isDirectory())throw new Error(`Cannot overwrite directory '${t}' with non-directory '${e}'.`)}if(i.isDirectory()&&kt(e,t))throw new Error(Ft(e,t,n));return{srcStat:i,destStat:o}},checkParentPaths:function e(t,n,r,i,o){const a=Nt.resolve(Nt.dirname(t)),s=Nt.resolve(Nt.dirname(r));if(s===a||s===Nt.parse(s).root)return o();Ct.stat(s,{bigint:!0},((a,l)=>a?"ENOENT"===a.code?o():o(a):Pt(n,l)?o(new Error(Ft(t,r,i))):e(t,n,s,i,o)))},checkParentPathsSync:function e(t,n,r,i){const o=Nt.resolve(Nt.dirname(t)),a=Nt.resolve(Nt.dirname(r));if(a===o||a===Nt.parse(a).root)return;let s;try{s=Ct.statSync(a,{bigint:!0})}catch(e){if("ENOENT"===e.code)return;throw e}if(Pt(n,s))throw new Error(Ft(t,r,i));return e(t,n,a,i)},isSrcSubdir:kt,areIdentical:Pt};const xt=pt,Ut=x.default,Lt=St.mkdirsSync,jt=function(e,t,n){const r=It.openSync(e,"r+");return It.futimesSync(r,t,n),It.closeSync(r)},Mt=$t;function qt(e,t,n,r){const i=(r.dereference?xt.statSync:xt.lstatSync)(t);if(i.isDirectory())return function(e,t,n,r,i){return t?Gt(n,r,i):function(e,t,n,r){return xt.mkdirSync(n),Gt(t,n,r),Ht(n,e)}(e.mode,n,r,i)}(i,e,t,n,r);if(i.isFile()||i.isCharacterDevice()||i.isBlockDevice())return function(e,t,n,r,i){return t?function(e,t,n,r){if(r.overwrite)return xt.unlinkSync(n),Bt(e,t,n,r);if(r.errorOnExist)throw new Error(`'${n}' already exists`)}(e,n,r,i):Bt(e,n,r,i)}(i,e,t,n,r);if(i.isSymbolicLink())return function(e,t,n,r){let i=xt.readlinkSync(t);if(r.dereference&&(i=Ut.resolve(process.cwd(),i)),e){let e;try{e=xt.readlinkSync(n)}catch(e){if("EINVAL"===e.code||"UNKNOWN"===e.code)return xt.symlinkSync(i,n);throw e}if(r.dereference&&(e=Ut.resolve(process.cwd(),e)),Mt.isSrcSubdir(i,e))throw new Error(`Cannot copy '${i}' to a subdirectory of itself, '${e}'.`);if(xt.statSync(n).isDirectory()&&Mt.isSrcSubdir(e,i))throw new Error(`Cannot overwrite '${e}' with '${i}'.`);return function(e,t){return xt.unlinkSync(t),xt.symlinkSync(e,t)}(i,n)}return xt.symlinkSync(i,n)}(e,t,n,r);if(i.isSocket())throw new Error(`Cannot copy a socket file: ${t}`);if(i.isFIFO())throw new Error(`Cannot copy a FIFO pipe: ${t}`);throw new Error(`Unknown file: ${t}`)}function Bt(e,t,n,r){return xt.copyFileSync(t,n),r.preserveTimestamps&&function(e,t,n){(function(e){return 0==(128&e)})(e)&&function(e,t){Ht(e,128|t)}(n,e),function(e,t){const n=xt.statSync(e);jt(t,n.atime,n.mtime)}(t,n)}(e.mode,t,n),Ht(n,e.mode)}function Ht(e,t){return xt.chmodSync(e,t)}function Gt(e,t,n){xt.readdirSync(e).forEach((r=>function(e,t,n,r){const i=Ut.join(t,e),o=Ut.join(n,e),{destStat:a}=Mt.checkPathsSync(i,o,"copy",r);return function(e,t,n,r){if(!r.filter||r.filter(t,n))return qt(e,t,n,r)}(a,i,o,r)}(r,e,t,n)))}var Vt={copySync:function(e,t,n){"function"==typeof n&&(n={filter:n}),(n=n||{}).clobber=!("clobber"in n)||!!n.clobber,n.overwrite="overwrite"in n?!!n.overwrite:n.clobber,n.preserveTimestamps&&"ia32"===process.arch&&console.warn("fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n\n    see https://github.com/jprichardson/node-fs-extra/issues/269");const{srcStat:r,destStat:i}=Mt.checkPathsSync(e,t,"copy",n);return Mt.checkParentPathsSync(e,r,t,"copy"),function(e,t,n,r){if(r.filter&&!r.filter(t,n))return;const i=Ut.dirname(n);return xt.existsSync(i)||Lt(i),qt(e,t,n,r)}(i,e,t,n)}};const zt=Ye;var Wt={pathExists:(0,Xe.fromPromise)((function(e){return zt.access(e).then((()=>!0)).catch((()=>!1))})),pathExistsSync:zt.existsSync};const Yt=pt,Xt=x.default,Jt=St.mkdirs,Kt=Wt.pathExists,Qt=function(e,t,n,r){It.open(e,"r+",((e,i)=>{if(e)return r(e);It.futimes(i,t,n,(e=>{It.close(i,(t=>{r&&r(e||t)}))}))}))},Zt=$t;function en(e,t,n,r,i){const o=Xt.dirname(n);Kt(o,((a,s)=>a?i(a):s?nn(e,t,n,r,i):void Jt(o,(o=>o?i(o):nn(e,t,n,r,i)))))}function tn(e,t,n,r,i,o){Promise.resolve(i.filter(n,r)).then((a=>a?e(t,n,r,i,o):o()),(e=>o(e)))}function nn(e,t,n,r,i){(r.dereference?Yt.stat:Yt.lstat)(t,((o,a)=>o?i(o):a.isDirectory()?function(e,t,n,r,i,o){return t?sn(n,r,i,o):function(e,t,n,r,i){Yt.mkdir(n,(o=>{if(o)return i(o);sn(t,n,r,(t=>t?i(t):an(n,e,i)))}))}(e.mode,n,r,i,o)}(a,e,t,n,r,i):a.isFile()||a.isCharacterDevice()||a.isBlockDevice()?function(e,t,n,r,i,o){return t?function(e,t,n,r,i){if(!r.overwrite)return r.errorOnExist?i(new Error(`'${n}' already exists`)):i();Yt.unlink(n,(o=>o?i(o):rn(e,t,n,r,i)))}(e,n,r,i,o):rn(e,n,r,i,o)}(a,e,t,n,r,i):a.isSymbolicLink()?function(e,t,n,r,i){Yt.readlink(t,((t,o)=>t?i(t):(r.dereference&&(o=Xt.resolve(process.cwd(),o)),e?void Yt.readlink(n,((t,a)=>t?"EINVAL"===t.code||"UNKNOWN"===t.code?Yt.symlink(o,n,i):i(t):(r.dereference&&(a=Xt.resolve(process.cwd(),a)),Zt.isSrcSubdir(o,a)?i(new Error(`Cannot copy '${o}' to a subdirectory of itself, '${a}'.`)):e.isDirectory()&&Zt.isSrcSubdir(a,o)?i(new Error(`Cannot overwrite '${a}' with '${o}'.`)):function(e,t,n){Yt.unlink(t,(r=>r?n(r):Yt.symlink(e,t,n)))}(o,n,i)))):Yt.symlink(o,n,i))))}(e,t,n,r,i):a.isSocket()?i(new Error(`Cannot copy a socket file: ${t}`)):a.isFIFO()?i(new Error(`Cannot copy a FIFO pipe: ${t}`)):i(new Error(`Unknown file: ${t}`))))}function rn(e,t,n,r,i){Yt.copyFile(t,n,(o=>o?i(o):r.preserveTimestamps?function(e,t,n,r){return function(e){return 0==(128&e)}(e)?function(e,t,n){return an(e,128|t,n)}(n,e,(i=>i?r(i):on(e,t,n,r))):on(e,t,n,r)}(e.mode,t,n,i):an(n,e.mode,i)))}function on(e,t,n,r){!function(e,t,n){Yt.stat(e,((e,r)=>e?n(e):Qt(t,r.atime,r.mtime,n)))}(t,n,(t=>t?r(t):an(n,e,r)))}function an(e,t,n){return Yt.chmod(e,t,n)}function sn(e,t,n,r){Yt.readdir(e,((i,o)=>i?r(i):ln(o,e,t,n,r)))}function ln(e,t,n,r,i){const o=e.pop();return o?function(e,t,n,r,i,o){const a=Xt.join(n,t),s=Xt.join(r,t);Zt.checkPaths(a,s,"copy",i,((t,l)=>{if(t)return o(t);const{destStat:c}=l;!function(e,t,n,r,i){r.filter?tn(nn,e,t,n,r,i):nn(e,t,n,r,i)}(c,a,s,i,(t=>t?o(t):ln(e,n,r,i,o)))}))}(e,o,t,n,r,i):i()}var cn={copy:(0,Xe.fromCallback)((function(e,t,n,r){"function"!=typeof n||r?"function"==typeof n&&(n={filter:n}):(r=n,n={}),r=r||function(){},(n=n||{}).clobber=!("clobber"in n)||!!n.clobber,n.overwrite="overwrite"in n?!!n.overwrite:n.clobber,n.preserveTimestamps&&"ia32"===process.arch&&console.warn("fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n\n    see https://github.com/jprichardson/node-fs-extra/issues/269"),Zt.checkPaths(e,t,"copy",n,((i,o)=>{if(i)return r(i);const{srcStat:a,destStat:s}=o;Zt.checkParentPaths(e,a,t,"copy",(i=>i?r(i):n.filter?tn(en,s,e,t,n,r):en(s,e,t,n,r)))}))}))};const un=pt,dn=x.default,hn=$.default,pn="win32"===process.platform;function fn(e){["unlink","chmod","stat","lstat","rmdir","readdir"].forEach((t=>{e[t]=e[t]||un[t],e[t+="Sync"]=e[t]||un[t]})),e.maxBusyTries=e.maxBusyTries||3}function mn(e,t,n){let r=0;"function"==typeof t&&(n=t,t={}),hn(e,"rimraf: missing path"),hn.strictEqual(typeof e,"string","rimraf: path should be a string"),hn.strictEqual(typeof n,"function","rimraf: callback function required"),hn(t,"rimraf: invalid options argument provided"),hn.strictEqual(typeof t,"object","rimraf: options should be object"),fn(t),gn(e,t,(function i(o){if(o){if(("EBUSY"===o.code||"ENOTEMPTY"===o.code||"EPERM"===o.code)&&r<t.maxBusyTries)return r++,setTimeout((()=>gn(e,t,i)),100*r);"ENOENT"===o.code&&(o=null)}n(o)}))}function gn(e,t,n){hn(e),hn(t),hn("function"==typeof n),t.lstat(e,((r,i)=>r&&"ENOENT"===r.code?n(null):r&&"EPERM"===r.code&&pn?yn(e,t,r,n):i&&i.isDirectory()?vn(e,t,r,n):void t.unlink(e,(r=>{if(r){if("ENOENT"===r.code)return n(null);if("EPERM"===r.code)return pn?yn(e,t,r,n):vn(e,t,r,n);if("EISDIR"===r.code)return vn(e,t,r,n)}return n(r)}))))}function yn(e,t,n,r){hn(e),hn(t),hn("function"==typeof r),t.chmod(e,438,(i=>{i?r("ENOENT"===i.code?null:n):t.stat(e,((i,o)=>{i?r("ENOENT"===i.code?null:n):o.isDirectory()?vn(e,t,n,r):t.unlink(e,r)}))}))}function En(e,t,n){let r;hn(e),hn(t);try{t.chmodSync(e,438)}catch(e){if("ENOENT"===e.code)return;throw n}try{r=t.statSync(e)}catch(e){if("ENOENT"===e.code)return;throw n}r.isDirectory()?bn(e,t,n):t.unlinkSync(e)}function vn(e,t,n,r){hn(e),hn(t),hn("function"==typeof r),t.rmdir(e,(i=>{!i||"ENOTEMPTY"!==i.code&&"EEXIST"!==i.code&&"EPERM"!==i.code?i&&"ENOTDIR"===i.code?r(n):r(i):function(e,t,n){hn(e),hn(t),hn("function"==typeof n),t.readdir(e,((r,i)=>{if(r)return n(r);let o,a=i.length;if(0===a)return t.rmdir(e,n);i.forEach((r=>{mn(dn.join(e,r),t,(r=>{if(!o)return r?n(o=r):void(0==--a&&t.rmdir(e,n))}))}))}))}(e,t,r)}))}function wn(e,t){let n;fn(t=t||{}),hn(e,"rimraf: missing path"),hn.strictEqual(typeof e,"string","rimraf: path should be a string"),hn(t,"rimraf: missing options"),hn.strictEqual(typeof t,"object","rimraf: options should be object");try{n=t.lstatSync(e)}catch(n){if("ENOENT"===n.code)return;"EPERM"===n.code&&pn&&En(e,t,n)}try{n&&n.isDirectory()?bn(e,t,null):t.unlinkSync(e)}catch(n){if("ENOENT"===n.code)return;if("EPERM"===n.code)return pn?En(e,t,n):bn(e,t,n);if("EISDIR"!==n.code)throw n;bn(e,t,n)}}function bn(e,t,n){hn(e),hn(t);try{t.rmdirSync(e)}catch(r){if("ENOTDIR"===r.code)throw n;if("ENOTEMPTY"===r.code||"EEXIST"===r.code||"EPERM"===r.code)!function(e,t){if(hn(e),hn(t),t.readdirSync(e).forEach((n=>wn(dn.join(e,n),t))),!pn)return t.rmdirSync(e,t);{const n=Date.now();do{try{return t.rmdirSync(e,t)}catch{}}while(Date.now()-n<500)}}(e,t);else if("ENOENT"!==r.code)throw r}}var An=mn;mn.sync=wn;const Tn=pt,On=An;var _n={remove:(0,Xe.fromCallback)((function(e,t){if(Tn.rm)return Tn.rm(e,{recursive:!0,force:!0},t);On(e,t)})),removeSync:function(e){if(Tn.rmSync)return Tn.rmSync(e,{recursive:!0,force:!0});On.sync(e)}};const Sn=Xe.fromPromise,In=Ye,Cn=x.default,Nn=St,Rn=_n,Dn=Sn((async function(e){let t;try{t=await In.readdir(e)}catch{return Nn.mkdirs(e)}return Promise.all(t.map((t=>Rn.remove(Cn.join(e,t)))))}));function Pn(e){let t;try{t=In.readdirSync(e)}catch{return Nn.mkdirsSync(e)}t.forEach((t=>{t=Cn.join(e,t),Rn.removeSync(t)}))}var kn={emptyDirSync:Pn,emptydirSync:Pn,emptyDir:Dn,emptydir:Dn};const Fn=Xe.fromCallback,$n=x.default,xn=pt,Un=St;var Ln={createFile:Fn((function(e,t){function n(){xn.writeFile(e,"",(e=>{if(e)return t(e);t()}))}xn.stat(e,((r,i)=>{if(!r&&i.isFile())return t();const o=$n.dirname(e);xn.stat(o,((e,r)=>{if(e)return"ENOENT"===e.code?Un.mkdirs(o,(e=>{if(e)return t(e);n()})):t(e);r.isDirectory()?n():xn.readdir(o,(e=>{if(e)return t(e)}))}))}))})),createFileSync:function(e){let t;try{t=xn.statSync(e)}catch{}if(t&&t.isFile())return;const n=$n.dirname(e);try{xn.statSync(n).isDirectory()||xn.readdirSync(n)}catch(e){if(!e||"ENOENT"!==e.code)throw e;Un.mkdirsSync(n)}xn.writeFileSync(e,"")}};const jn=Xe.fromCallback,Mn=x.default,qn=pt,Bn=St,Hn=Wt.pathExists,{areIdentical:Gn}=$t;var Vn={createLink:jn((function(e,t,n){function r(e,t){qn.link(e,t,(e=>{if(e)return n(e);n(null)}))}qn.lstat(t,((i,o)=>{qn.lstat(e,((i,a)=>{if(i)return i.message=i.message.replace("lstat","ensureLink"),n(i);if(o&&Gn(a,o))return n(null);const s=Mn.dirname(t);Hn(s,((i,o)=>i?n(i):o?r(e,t):void Bn.mkdirs(s,(i=>{if(i)return n(i);r(e,t)}))))}))}))})),createLinkSync:function(e,t){let n;try{n=qn.lstatSync(t)}catch{}try{const t=qn.lstatSync(e);if(n&&Gn(t,n))return}catch(e){throw e.message=e.message.replace("lstat","ensureLink"),e}const r=Mn.dirname(t);return qn.existsSync(r)||Bn.mkdirsSync(r),qn.linkSync(e,t)}};const zn=x.default,Wn=pt,Yn=Wt.pathExists;var Xn=function(e,t,n){if(zn.isAbsolute(e))return Wn.lstat(e,(t=>t?(t.message=t.message.replace("lstat","ensureSymlink"),n(t)):n(null,{toCwd:e,toDst:e})));{const r=zn.dirname(t),i=zn.join(r,e);return Yn(i,((t,o)=>t?n(t):o?n(null,{toCwd:i,toDst:e}):Wn.lstat(e,(t=>t?(t.message=t.message.replace("lstat","ensureSymlink"),n(t)):n(null,{toCwd:e,toDst:zn.relative(r,e)})))))}},Jn=function(e,t){let n;if(zn.isAbsolute(e)){if(n=Wn.existsSync(e),!n)throw new Error("absolute srcpath does not exist");return{toCwd:e,toDst:e}}{const r=zn.dirname(t),i=zn.join(r,e);if(n=Wn.existsSync(i),n)return{toCwd:i,toDst:e};if(n=Wn.existsSync(e),!n)throw new Error("relative srcpath does not exist");return{toCwd:e,toDst:zn.relative(r,e)}}};const Kn=pt;var Qn=function(e,t,n){if(n="function"==typeof t?t:n,t="function"!=typeof t&&t)return n(null,t);Kn.lstat(e,((e,r)=>{if(e)return n(null,"file");t=r&&r.isDirectory()?"dir":"file",n(null,t)}))},Zn=function(e,t){let n;if(t)return t;try{n=Kn.lstatSync(e)}catch{return"file"}return n&&n.isDirectory()?"dir":"file"};const er=Xe.fromCallback,tr=x.default,nr=Ye,rr=St.mkdirs,ir=St.mkdirsSync,or=Xn,ar=Jn,sr=Qn,lr=Zn,cr=Wt.pathExists,{areIdentical:ur}=$t;function dr(e,t,n,r){or(e,t,((i,o)=>{if(i)return r(i);e=o.toDst,sr(o.toCwd,n,((n,i)=>{if(n)return r(n);const o=tr.dirname(t);cr(o,((n,a)=>n?r(n):a?nr.symlink(e,t,i,r):void rr(o,(n=>{if(n)return r(n);nr.symlink(e,t,i,r)}))))}))}))}var hr={createSymlink:er((function(e,t,n,r){r="function"==typeof n?n:r,n="function"!=typeof n&&n,nr.lstat(t,((i,o)=>{!i&&o.isSymbolicLink()?Promise.all([nr.stat(e),nr.stat(t)]).then((([i,o])=>{if(ur(i,o))return r(null);dr(e,t,n,r)})):dr(e,t,n,r)}))})),createSymlinkSync:function(e,t,n){let r;try{r=nr.lstatSync(t)}catch{}if(r&&r.isSymbolicLink()){const n=nr.statSync(e),r=nr.statSync(t);if(ur(n,r))return}const i=ar(e,t);e=i.toDst,n=lr(i.toCwd,n);const o=tr.dirname(t);return nr.existsSync(o)||ir(o),nr.symlinkSync(e,t,n)}},pr={createFile:Ln.createFile,createFileSync:Ln.createFileSync,ensureFile:Ln.createFile,ensureFileSync:Ln.createFileSync,createLink:Vn.createLink,createLinkSync:Vn.createLinkSync,ensureLink:Vn.createLink,ensureLinkSync:Vn.createLinkSync,createSymlink:hr.createSymlink,createSymlinkSync:hr.createSymlinkSync,ensureSymlink:hr.createSymlink,ensureSymlinkSync:hr.createSymlinkSync},fr={stringify:function(e,{EOL:t="\n",finalEOL:n=!0,replacer:r=null,spaces:i}={}){const o=n?t:"";return JSON.stringify(e,r,i).replace(/\n/g,t)+o},stripBom:function(e){return Buffer.isBuffer(e)&&(e=e.toString("utf8")),e.replace(/^\uFEFF/,"")}};let mr;try{mr=require("graceful-fs")}catch(e){mr=N.default}const gr=Xe,{stringify:yr,stripBom:Er}=fr,vr={readFile:gr.fromPromise((async function(e,t={}){"string"==typeof t&&(t={encoding:t});const n=t.fs||mr,r=!("throws"in t)||t.throws;let i,o=await gr.fromCallback(n.readFile)(e,t);o=Er(o);try{i=JSON.parse(o,t?t.reviver:null)}catch(t){if(r)throw t.message=`${e}: ${t.message}`,t;return null}return i})),readFileSync:function(e,t={}){"string"==typeof t&&(t={encoding:t});const n=t.fs||mr,r=!("throws"in t)||t.throws;try{let r=n.readFileSync(e,t);return r=Er(r),JSON.parse(r,t.reviver)}catch(t){if(r)throw t.message=`${e}: ${t.message}`,t;return null}},writeFile:gr.fromPromise((async function(e,t,n={}){const r=n.fs||mr,i=yr(t,n);await gr.fromCallback(r.writeFile)(e,i,n)})),writeFileSync:function(e,t,n={}){const r=n.fs||mr,i=yr(t,n);return r.writeFileSync(e,i,n)}};var wr={readJson:vr.readFile,readJsonSync:vr.readFileSync,writeJson:vr.writeFile,writeJsonSync:vr.writeFileSync};const br=Xe.fromCallback,Ar=pt,Tr=x.default,Or=St,_r=Wt.pathExists;var Sr={outputFile:br((function(e,t,n,r){"function"==typeof n&&(r=n,n="utf8");const i=Tr.dirname(e);_r(i,((o,a)=>o?r(o):a?Ar.writeFile(e,t,n,r):void Or.mkdirs(i,(i=>{if(i)return r(i);Ar.writeFile(e,t,n,r)}))))})),outputFileSync:function(e,...t){const n=Tr.dirname(e);if(Ar.existsSync(n))return Ar.writeFileSync(e,...t);Or.mkdirsSync(n),Ar.writeFileSync(e,...t)}};const{stringify:Ir}=fr,{outputFile:Cr}=Sr;const{stringify:Nr}=fr,{outputFileSync:Rr}=Sr;const Dr=Xe.fromPromise,Pr=wr;Pr.outputJson=Dr((async function(e,t,n={}){const r=Ir(t,n);await Cr(e,r,n)})),Pr.outputJsonSync=function(e,t,n){const r=Nr(t,n);Rr(e,r,n)},Pr.outputJSON=Pr.outputJson,Pr.outputJSONSync=Pr.outputJsonSync,Pr.writeJSON=Pr.writeJson,Pr.writeJSONSync=Pr.writeJsonSync,Pr.readJSON=Pr.readJson,Pr.readJSONSync=Pr.readJsonSync;var kr=Pr;const Fr=pt,$r=x.default,xr=Vt.copySync,Ur=_n.removeSync,Lr=St.mkdirpSync,jr=$t;function Mr(e,t,n){try{Fr.renameSync(e,t)}catch(r){if("EXDEV"!==r.code)throw r;return function(e,t,n){return xr(e,t,{overwrite:n,errorOnExist:!0}),Ur(e)}(e,t,n)}}var qr={moveSync:function(e,t,n){const r=(n=n||{}).overwrite||n.clobber||!1,{srcStat:i,isChangingCase:o=!1}=jr.checkPathsSync(e,t,"move",n);return jr.checkParentPathsSync(e,i,t,"move"),function(e){const t=$r.dirname(e);return $r.parse(t).root===t}(t)||Lr($r.dirname(t)),function(e,t,n,r){if(r)return Mr(e,t,n);if(n)return Ur(t),Mr(e,t,n);if(Fr.existsSync(t))throw new Error("dest already exists.");return Mr(e,t,n)}(e,t,r,o)}};const Br=pt,Hr=x.default,Gr=cn.copy,Vr=_n.remove,zr=St.mkdirp,Wr=Wt.pathExists,Yr=$t;function Xr(e,t,n,r,i){return r?Jr(e,t,n,i):n?Vr(t,(r=>r?i(r):Jr(e,t,n,i))):void Wr(t,((r,o)=>r?i(r):o?i(new Error("dest already exists.")):Jr(e,t,n,i)))}function Jr(e,t,n,r){Br.rename(e,t,(i=>i?"EXDEV"!==i.code?r(i):function(e,t,n,r){Gr(e,t,{overwrite:n,errorOnExist:!0},(t=>t?r(t):Vr(e,r)))}(e,t,n,r):r()))}var Kr={move:(0,Xe.fromCallback)((function(e,t,n,r){"function"==typeof n&&(r=n,n={});const i=n.overwrite||n.clobber||!1;Yr.checkPaths(e,t,"move",n,((n,o)=>{if(n)return r(n);const{srcStat:a,isChangingCase:s=!1}=o;Yr.checkParentPaths(e,a,t,"move",(n=>n?r(n):function(e){const t=Hr.dirname(e);return Hr.parse(t).root===t}(t)?Xr(e,t,i,s,r):void zr(Hr.dirname(t),(n=>n?r(n):Xr(e,t,i,s,r)))))}))}))},Qr=s(s(s(s(s(s(s(s(s(s(s(s({},Ye),Vt),cn),kn),pr),kr),St),qr),Kr),Sr),Wt),_n),Zr={},ei={},ti={};function ni(e){return null==e}function ri(e,t){var n="",r=e.reason||"(unknown reason)";return e.mark?(e.mark.name&&(n+='in "'+e.mark.name+'" '),n+="("+(e.mark.line+1)+":"+(e.mark.column+1)+")",!t&&e.mark.snippet&&(n+="\n\n"+e.mark.snippet),r+" "+n):r}function ii(e,t){Error.call(this),this.name="YAMLException",this.reason=e,this.mark=t,this.message=ri(this,!1),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack||""}ti.isNothing=ni,ti.isObject=function(e){return"object"==typeof e&&null!==e},ti.toArray=function(e){return Array.isArray(e)?e:ni(e)?[]:[e]},ti.repeat=function(e,t){var n,r="";for(n=0;n<t;n+=1)r+=e;return r},ti.isNegativeZero=function(e){return 0===e&&Number.NEGATIVE_INFINITY===1/e},ti.extend=function(e,t){var n,r,i,o;if(t)for(n=0,r=(o=Object.keys(t)).length;n<r;n+=1)e[i=o[n]]=t[i];return e},ii.prototype=Object.create(Error.prototype),ii.prototype.constructor=ii,ii.prototype.toString=function(e){return this.name+": "+ri(this,e)};var oi=ii,ai=ti;function si(e,t,n,r,i){var o="",a="",s=Math.floor(i/2)-1;return r-t>s&&(t=r-s+(o=" ... ").length),n-r>s&&(n=r+s-(a=" ...").length),{str:o+e.slice(t,n).replace(/\t/g,"→")+a,pos:r-t+o.length}}function li(e,t){return ai.repeat(" ",t-e.length)+e}var ci=oi,ui=["kind","multi","resolve","construct","instanceOf","predicate","represent","representName","defaultStyle","styleAliases"],di=["scalar","sequence","mapping"],hi=function(e,t){var n,r;if(t=t||{},Object.keys(t).forEach((function(t){if(-1===ui.indexOf(t))throw new ci('Unknown option "'+t+'" is met in definition of "'+e+'" YAML type.')})),this.options=t,this.tag=e,this.kind=t.kind||null,this.resolve=t.resolve||function(){return!0},this.construct=t.construct||function(e){return e},this.instanceOf=t.instanceOf||null,this.predicate=t.predicate||null,this.represent=t.represent||null,this.representName=t.representName||null,this.defaultStyle=t.defaultStyle||null,this.multi=t.multi||!1,this.styleAliases=(n=t.styleAliases||null,r={},null!==n&&Object.keys(n).forEach((function(e){n[e].forEach((function(t){r[String(t)]=e}))})),r),-1===di.indexOf(this.kind))throw new ci('Unknown kind "'+this.kind+'" is specified for "'+e+'" YAML type.')},pi=oi,fi=hi;function mi(e,t){var n=[];return e[t].forEach((function(e){var t=n.length;n.forEach((function(n,r){n.tag===e.tag&&n.kind===e.kind&&n.multi===e.multi&&(t=r)})),n[t]=e})),n}function gi(e){return this.extend(e)}gi.prototype.extend=function(e){var t=[],n=[];if(e instanceof fi)n.push(e);else if(Array.isArray(e))n=n.concat(e);else{if(!e||!Array.isArray(e.implicit)&&!Array.isArray(e.explicit))throw new pi("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");e.implicit&&(t=t.concat(e.implicit)),e.explicit&&(n=n.concat(e.explicit))}t.forEach((function(e){if(!(e instanceof fi))throw new pi("Specified list of YAML types (or a single Type object) contains a non-Type object.");if(e.loadKind&&"scalar"!==e.loadKind)throw new pi("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");if(e.multi)throw new pi("There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.")})),n.forEach((function(e){if(!(e instanceof fi))throw new pi("Specified list of YAML types (or a single Type object) contains a non-Type object.")}));var r=Object.create(gi.prototype);return r.implicit=(this.implicit||[]).concat(t),r.explicit=(this.explicit||[]).concat(n),r.compiledImplicit=mi(r,"implicit"),r.compiledExplicit=mi(r,"explicit"),r.compiledTypeMap=function(){var e,t,n={scalar:{},sequence:{},mapping:{},fallback:{},multi:{scalar:[],sequence:[],mapping:[],fallback:[]}};function r(e){e.multi?(n.multi[e.kind].push(e),n.multi.fallback.push(e)):n[e.kind][e.tag]=n.fallback[e.tag]=e}for(e=0,t=arguments.length;e<t;e+=1)arguments[e].forEach(r);return n}(r.compiledImplicit,r.compiledExplicit),r};var yi=gi,Ei=new hi("tag:yaml.org,2002:str",{kind:"scalar",construct:function(e){return null!==e?e:""}}),vi=new hi("tag:yaml.org,2002:seq",{kind:"sequence",construct:function(e){return null!==e?e:[]}}),wi=new hi("tag:yaml.org,2002:map",{kind:"mapping",construct:function(e){return null!==e?e:{}}}),bi=new yi({explicit:[Ei,vi,wi]}),Ai=new hi("tag:yaml.org,2002:null",{kind:"scalar",resolve:function(e){if(null===e)return!0;var t=e.length;return 1===t&&"~"===e||4===t&&("null"===e||"Null"===e||"NULL"===e)},construct:function(){return null},predicate:function(e){return null===e},represent:{canonical:function(){return"~"},lowercase:function(){return"null"},uppercase:function(){return"NULL"},camelcase:function(){return"Null"},empty:function(){return""}},defaultStyle:"lowercase"}),Ti=new hi("tag:yaml.org,2002:bool",{kind:"scalar",resolve:function(e){if(null===e)return!1;var t=e.length;return 4===t&&("true"===e||"True"===e||"TRUE"===e)||5===t&&("false"===e||"False"===e||"FALSE"===e)},construct:function(e){return"true"===e||"True"===e||"TRUE"===e},predicate:function(e){return"[object Boolean]"===Object.prototype.toString.call(e)},represent:{lowercase:function(e){return e?"true":"false"},uppercase:function(e){return e?"TRUE":"FALSE"},camelcase:function(e){return e?"True":"False"}},defaultStyle:"lowercase"}),Oi=ti;function _i(e){return 48<=e&&e<=55}function Si(e){return 48<=e&&e<=57}var Ii=new hi("tag:yaml.org,2002:int",{kind:"scalar",resolve:function(e){if(null===e)return!1;var t,n,r=e.length,i=0,o=!1;if(!r)return!1;if("-"!==(t=e[i])&&"+"!==t||(t=e[++i]),"0"===t){if(i+1===r)return!0;if("b"===(t=e[++i])){for(i++;i<r;i++)if("_"!==(t=e[i])){if("0"!==t&&"1"!==t)return!1;o=!0}return o&&"_"!==t}if("x"===t){for(i++;i<r;i++)if("_"!==(t=e[i])){if(!(48<=(n=e.charCodeAt(i))&&n<=57||65<=n&&n<=70||97<=n&&n<=102))return!1;o=!0}return o&&"_"!==t}if("o"===t){for(i++;i<r;i++)if("_"!==(t=e[i])){if(!_i(e.charCodeAt(i)))return!1;o=!0}return o&&"_"!==t}}if("_"===t)return!1;for(;i<r;i++)if("_"!==(t=e[i])){if(!Si(e.charCodeAt(i)))return!1;o=!0}return!(!o||"_"===t)},construct:function(e){var t,n=e,r=1;if(-1!==n.indexOf("_")&&(n=n.replace(/_/g,"")),"-"!==(t=n[0])&&"+"!==t||("-"===t&&(r=-1),t=(n=n.slice(1))[0]),"0"===n)return 0;if("0"===t){if("b"===n[1])return r*parseInt(n.slice(2),2);if("x"===n[1])return r*parseInt(n.slice(2),16);if("o"===n[1])return r*parseInt(n.slice(2),8)}return r*parseInt(n,10)},predicate:function(e){return"[object Number]"===Object.prototype.toString.call(e)&&e%1==0&&!Oi.isNegativeZero(e)},represent:{binary:function(e){return e>=0?"0b"+e.toString(2):"-0b"+e.toString(2).slice(1)},octal:function(e){return e>=0?"0o"+e.toString(8):"-0o"+e.toString(8).slice(1)},decimal:function(e){return e.toString(10)},hexadecimal:function(e){return e>=0?"0x"+e.toString(16).toUpperCase():"-0x"+e.toString(16).toUpperCase().slice(1)}},defaultStyle:"decimal",styleAliases:{binary:[2,"bin"],octal:[8,"oct"],decimal:[10,"dec"],hexadecimal:[16,"hex"]}}),Ci=ti,Ni=hi,Ri=new RegExp("^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$"),Di=/^[-+]?[0-9]+e/,Pi=new Ni("tag:yaml.org,2002:float",{kind:"scalar",resolve:function(e){return null!==e&&!(!Ri.test(e)||"_"===e[e.length-1])},construct:function(e){var t,n;return n="-"===(t=e.replace(/_/g,"").toLowerCase())[0]?-1:1,"+-".indexOf(t[0])>=0&&(t=t.slice(1)),".inf"===t?1===n?Number.POSITIVE_INFINITY:Number.NEGATIVE_INFINITY:".nan"===t?NaN:n*parseFloat(t,10)},predicate:function(e){return"[object Number]"===Object.prototype.toString.call(e)&&(e%1!=0||Ci.isNegativeZero(e))},represent:function(e,t){var n;if(isNaN(e))switch(t){case"lowercase":return".nan";case"uppercase":return".NAN";case"camelcase":return".NaN"}else if(Number.POSITIVE_INFINITY===e)switch(t){case"lowercase":return".inf";case"uppercase":return".INF";case"camelcase":return".Inf"}else if(Number.NEGATIVE_INFINITY===e)switch(t){case"lowercase":return"-.inf";case"uppercase":return"-.INF";case"camelcase":return"-.Inf"}else if(Ci.isNegativeZero(e))return"-0.0";return n=e.toString(10),Di.test(n)?n.replace("e",".e"):n},defaultStyle:"lowercase"}),ki=bi.extend({implicit:[Ai,Ti,Ii,Pi]}),Fi=ki,$i=hi,xi=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"),Ui=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$"),Li=new $i("tag:yaml.org,2002:timestamp",{kind:"scalar",resolve:function(e){return null!==e&&(null!==xi.exec(e)||null!==Ui.exec(e))},construct:function(e){var t,n,r,i,o,a,s,l,c=0,u=null;if(null===(t=xi.exec(e))&&(t=Ui.exec(e)),null===t)throw new Error("Date resolve error");if(n=+t[1],r=+t[2]-1,i=+t[3],!t[4])return new Date(Date.UTC(n,r,i));if(o=+t[4],a=+t[5],s=+t[6],t[7]){for(c=t[7].slice(0,3);c.length<3;)c+="0";c=+c}return t[9]&&(u=6e4*(60*+t[10]+ +(t[11]||0)),"-"===t[9]&&(u=-u)),l=new Date(Date.UTC(n,r,i,o,a,s,c)),u&&l.setTime(l.getTime()-u),l},instanceOf:Date,represent:function(e){return e.toISOString()}}),ji=new hi("tag:yaml.org,2002:merge",{kind:"scalar",resolve:function(e){return"<<"===e||null===e}}),Mi="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r",qi=new hi("tag:yaml.org,2002:binary",{kind:"scalar",resolve:function(e){if(null===e)return!1;var t,n,r=0,i=e.length,o=Mi;for(n=0;n<i;n++)if(!((t=o.indexOf(e.charAt(n)))>64)){if(t<0)return!1;r+=6}return r%8==0},construct:function(e){var t,n,r=e.replace(/[\r\n=]/g,""),i=r.length,o=Mi,a=0,s=[];for(t=0;t<i;t++)t%4==0&&t&&(s.push(a>>16&255),s.push(a>>8&255),s.push(255&a)),a=a<<6|o.indexOf(r.charAt(t));return 0==(n=i%4*6)?(s.push(a>>16&255),s.push(a>>8&255),s.push(255&a)):18===n?(s.push(a>>10&255),s.push(a>>2&255)):12===n&&s.push(a>>4&255),new Uint8Array(s)},predicate:function(e){return"[object Uint8Array]"===Object.prototype.toString.call(e)},represent:function(e){var t,n,r="",i=0,o=e.length,a=Mi;for(t=0;t<o;t++)t%3==0&&t&&(r+=a[i>>18&63],r+=a[i>>12&63],r+=a[i>>6&63],r+=a[63&i]),i=(i<<8)+e[t];return 0==(n=o%3)?(r+=a[i>>18&63],r+=a[i>>12&63],r+=a[i>>6&63],r+=a[63&i]):2===n?(r+=a[i>>10&63],r+=a[i>>4&63],r+=a[i<<2&63],r+=a[64]):1===n&&(r+=a[i>>2&63],r+=a[i<<4&63],r+=a[64],r+=a[64]),r}}),Bi=hi,Hi=Object.prototype.hasOwnProperty,Gi=Object.prototype.toString,Vi=new Bi("tag:yaml.org,2002:omap",{kind:"sequence",resolve:function(e){if(null===e)return!0;var t,n,r,i,o,a=[],s=e;for(t=0,n=s.length;t<n;t+=1){if(r=s[t],o=!1,"[object Object]"!==Gi.call(r))return!1;for(i in r)if(Hi.call(r,i)){if(o)return!1;o=!0}if(!o)return!1;if(-1!==a.indexOf(i))return!1;a.push(i)}return!0},construct:function(e){return null!==e?e:[]}}),zi=hi,Wi=Object.prototype.toString,Yi=new zi("tag:yaml.org,2002:pairs",{kind:"sequence",resolve:function(e){if(null===e)return!0;var t,n,r,i,o,a=e;for(o=new Array(a.length),t=0,n=a.length;t<n;t+=1){if(r=a[t],"[object Object]"!==Wi.call(r))return!1;if(1!==(i=Object.keys(r)).length)return!1;o[t]=[i[0],r[i[0]]]}return!0},construct:function(e){if(null===e)return[];var t,n,r,i,o,a=e;for(o=new Array(a.length),t=0,n=a.length;t<n;t+=1)r=a[t],i=Object.keys(r),o[t]=[i[0],r[i[0]]];return o}}),Xi=hi,Ji=Object.prototype.hasOwnProperty,Ki=new Xi("tag:yaml.org,2002:set",{kind:"mapping",resolve:function(e){if(null===e)return!0;var t,n=e;for(t in n)if(Ji.call(n,t)&&null!==n[t])return!1;return!0},construct:function(e){return null!==e?e:{}}}),Qi=Fi.extend({implicit:[Li,ji],explicit:[qi,Vi,Yi,Ki]}),Zi=ti,eo=oi,to=function(e,t){if(t=Object.create(t||null),!e.buffer)return null;t.maxLength||(t.maxLength=79),"number"!=typeof t.indent&&(t.indent=1),"number"!=typeof t.linesBefore&&(t.linesBefore=3),"number"!=typeof t.linesAfter&&(t.linesAfter=2);for(var n,r=/\r?\n|\r|\0/g,i=[0],o=[],a=-1;n=r.exec(e.buffer);)o.push(n.index),i.push(n.index+n[0].length),e.position<=n.index&&a<0&&(a=i.length-2);a<0&&(a=i.length-1);var s,l,c="",u=Math.min(e.line+t.linesAfter,o.length).toString().length,d=t.maxLength-(t.indent+u+3);for(s=1;s<=t.linesBefore&&!(a-s<0);s++)l=si(e.buffer,i[a-s],o[a-s],e.position-(i[a]-i[a-s]),d),c=ai.repeat(" ",t.indent)+li((e.line-s+1).toString(),u)+" | "+l.str+"\n"+c;for(l=si(e.buffer,i[a],o[a],e.position,d),c+=ai.repeat(" ",t.indent)+li((e.line+1).toString(),u)+" | "+l.str+"\n",c+=ai.repeat("-",t.indent+u+3+l.pos)+"^\n",s=1;s<=t.linesAfter&&!(a+s>=o.length);s++)l=si(e.buffer,i[a+s],o[a+s],e.position-(i[a]-i[a+s]),d),c+=ai.repeat(" ",t.indent)+li((e.line+s+1).toString(),u)+" | "+l.str+"\n";return c.replace(/\n$/,"")},no=Qi,ro=Object.prototype.hasOwnProperty,io=/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,oo=/[\x85\u2028\u2029]/,ao=/[,\[\]\{\}]/,so=/^(?:!|!!|![a-z\-]+!)$/i,lo=/^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;function co(e){return Object.prototype.toString.call(e)}function uo(e){return 10===e||13===e}function ho(e){return 9===e||32===e}function po(e){return 9===e||32===e||10===e||13===e}function fo(e){return 44===e||91===e||93===e||123===e||125===e}function mo(e){var t;return 48<=e&&e<=57?e-48:97<=(t=32|e)&&t<=102?t-97+10:-1}function go(e){return 48===e?"\0":97===e?"":98===e?"\b":116===e||9===e?"\t":110===e?"\n":118===e?"\v":102===e?"\f":114===e?"\r":101===e?"":32===e?" ":34===e?'"':47===e?"/":92===e?"\\":78===e?"":95===e?" ":76===e?"\u2028":80===e?"\u2029":""}function yo(e){return e<=65535?String.fromCharCode(e):String.fromCharCode(55296+(e-65536>>10),56320+(e-65536&1023))}for(var Eo=new Array(256),vo=new Array(256),wo=0;wo<256;wo++)Eo[wo]=go(wo)?1:0,vo[wo]=go(wo);function bo(e,t){this.input=e,this.filename=t.filename||null,this.schema=t.schema||no,this.onWarning=t.onWarning||null,this.legacy=t.legacy||!1,this.json=t.json||!1,this.listener=t.listener||null,this.implicitTypes=this.schema.compiledImplicit,this.typeMap=this.schema.compiledTypeMap,this.length=e.length,this.position=0,this.line=0,this.lineStart=0,this.lineIndent=0,this.firstTabInLine=-1,this.documents=[]}function Ao(e,t){var n={name:e.filename,buffer:e.input.slice(0,-1),position:e.position,line:e.line,column:e.position-e.lineStart};return n.snippet=to(n),new eo(t,n)}function To(e,t){throw Ao(e,t)}function Oo(e,t){e.onWarning&&e.onWarning.call(null,Ao(e,t))}var _o={YAML:function(e,t,n){var r,i,o;null!==e.version&&To(e,"duplication of %YAML directive"),1!==n.length&&To(e,"YAML directive accepts exactly one argument"),null===(r=/^([0-9]+)\.([0-9]+)$/.exec(n[0]))&&To(e,"ill-formed argument of the YAML directive"),i=parseInt(r[1],10),o=parseInt(r[2],10),1!==i&&To(e,"unacceptable YAML version of the document"),e.version=n[0],e.checkLineBreaks=o<2,1!==o&&2!==o&&Oo(e,"unsupported YAML version of the document")},TAG:function(e,t,n){var r,i;2!==n.length&&To(e,"TAG directive accepts exactly two arguments"),r=n[0],i=n[1],so.test(r)||To(e,"ill-formed tag handle (first argument) of the TAG directive"),ro.call(e.tagMap,r)&&To(e,'there is a previously declared suffix for "'+r+'" tag handle'),lo.test(i)||To(e,"ill-formed tag prefix (second argument) of the TAG directive");try{i=decodeURIComponent(i)}catch(t){To(e,"tag prefix is malformed: "+i)}e.tagMap[r]=i}};function So(e,t,n,r){var i,o,a,s;if(t<n){if(s=e.input.slice(t,n),r)for(i=0,o=s.length;i<o;i+=1)9===(a=s.charCodeAt(i))||32<=a&&a<=1114111||To(e,"expected valid JSON character");else io.test(s)&&To(e,"the stream contains non-printable characters");e.result+=s}}function Io(e,t,n,r){var i,o,a,s;for(Zi.isObject(n)||To(e,"cannot merge mappings; the provided source object is unacceptable"),a=0,s=(i=Object.keys(n)).length;a<s;a+=1)o=i[a],ro.call(t,o)||(t[o]=n[o],r[o]=!0)}function Co(e,t,n,r,i,o,a,s,l){var c,u;if(Array.isArray(i))for(c=0,u=(i=Array.prototype.slice.call(i)).length;c<u;c+=1)Array.isArray(i[c])&&To(e,"nested arrays are not supported inside keys"),"object"==typeof i&&"[object Object]"===co(i[c])&&(i[c]="[object Object]");if("object"==typeof i&&"[object Object]"===co(i)&&(i="[object Object]"),i=String(i),null===t&&(t={}),"tag:yaml.org,2002:merge"===r)if(Array.isArray(o))for(c=0,u=o.length;c<u;c+=1)Io(e,t,o[c],n);else Io(e,t,o,n);else e.json||ro.call(n,i)||!ro.call(t,i)||(e.line=a||e.line,e.lineStart=s||e.lineStart,e.position=l||e.position,To(e,"duplicated mapping key")),"__proto__"===i?Object.defineProperty(t,i,{configurable:!0,enumerable:!0,writable:!0,value:o}):t[i]=o,delete n[i];return t}function No(e){var t;10===(t=e.input.charCodeAt(e.position))?e.position++:13===t?(e.position++,10===e.input.charCodeAt(e.position)&&e.position++):To(e,"a line break is expected"),e.line+=1,e.lineStart=e.position,e.firstTabInLine=-1}function Ro(e,t,n){for(var r=0,i=e.input.charCodeAt(e.position);0!==i;){for(;ho(i);)9===i&&-1===e.firstTabInLine&&(e.firstTabInLine=e.position),i=e.input.charCodeAt(++e.position);if(t&&35===i)do{i=e.input.charCodeAt(++e.position)}while(10!==i&&13!==i&&0!==i);if(!uo(i))break;for(No(e),i=e.input.charCodeAt(e.position),r++,e.lineIndent=0;32===i;)e.lineIndent++,i=e.input.charCodeAt(++e.position)}return-1!==n&&0!==r&&e.lineIndent<n&&Oo(e,"deficient indentation"),r}function Do(e){var t,n=e.position;return!(45!==(t=e.input.charCodeAt(n))&&46!==t||t!==e.input.charCodeAt(n+1)||t!==e.input.charCodeAt(n+2)||(n+=3,0!==(t=e.input.charCodeAt(n))&&!po(t)))}function Po(e,t){1===t?e.result+=" ":t>1&&(e.result+=Zi.repeat("\n",t-1))}function ko(e,t){var n,r,i=e.tag,o=e.anchor,a=[],s=!1;if(-1!==e.firstTabInLine)return!1;for(null!==e.anchor&&(e.anchorMap[e.anchor]=a),r=e.input.charCodeAt(e.position);0!==r&&(-1!==e.firstTabInLine&&(e.position=e.firstTabInLine,To(e,"tab characters must not be used in indentation")),45===r)&&po(e.input.charCodeAt(e.position+1));)if(s=!0,e.position++,Ro(e,!0,-1)&&e.lineIndent<=t)a.push(null),r=e.input.charCodeAt(e.position);else if(n=e.line,xo(e,t,3,!1,!0),a.push(e.result),Ro(e,!0,-1),r=e.input.charCodeAt(e.position),(e.line===n||e.lineIndent>t)&&0!==r)To(e,"bad indentation of a sequence entry");else if(e.lineIndent<t)break;return!!s&&(e.tag=i,e.anchor=o,e.kind="sequence",e.result=a,!0)}function Fo(e){var t,n,r,i,o=!1,a=!1;if(33!==(i=e.input.charCodeAt(e.position)))return!1;if(null!==e.tag&&To(e,"duplication of a tag property"),60===(i=e.input.charCodeAt(++e.position))?(o=!0,i=e.input.charCodeAt(++e.position)):33===i?(a=!0,n="!!",i=e.input.charCodeAt(++e.position)):n="!",t=e.position,o){do{i=e.input.charCodeAt(++e.position)}while(0!==i&&62!==i);e.position<e.length?(r=e.input.slice(t,e.position),i=e.input.charCodeAt(++e.position)):To(e,"unexpected end of the stream within a verbatim tag")}else{for(;0!==i&&!po(i);)33===i&&(a?To(e,"tag suffix cannot contain exclamation marks"):(n=e.input.slice(t-1,e.position+1),so.test(n)||To(e,"named tag handle cannot contain such characters"),a=!0,t=e.position+1)),i=e.input.charCodeAt(++e.position);r=e.input.slice(t,e.position),ao.test(r)&&To(e,"tag suffix cannot contain flow indicator characters")}r&&!lo.test(r)&&To(e,"tag name cannot contain such characters: "+r);try{r=decodeURIComponent(r)}catch(t){To(e,"tag name is malformed: "+r)}return o?e.tag=r:ro.call(e.tagMap,n)?e.tag=e.tagMap[n]+r:"!"===n?e.tag="!"+r:"!!"===n?e.tag="tag:yaml.org,2002:"+r:To(e,'undeclared tag handle "'+n+'"'),!0}function $o(e){var t,n;if(38!==(n=e.input.charCodeAt(e.position)))return!1;for(null!==e.anchor&&To(e,"duplication of an anchor property"),n=e.input.charCodeAt(++e.position),t=e.position;0!==n&&!po(n)&&!fo(n);)n=e.input.charCodeAt(++e.position);return e.position===t&&To(e,"name of an anchor node must contain at least one character"),e.anchor=e.input.slice(t,e.position),!0}function xo(e,t,n,r,i){var o,a,s,l,c,u,d,h,p,f=1,m=!1,g=!1;if(null!==e.listener&&e.listener("open",e),e.tag=null,e.anchor=null,e.kind=null,e.result=null,o=a=s=4===n||3===n,r&&Ro(e,!0,-1)&&(m=!0,e.lineIndent>t?f=1:e.lineIndent===t?f=0:e.lineIndent<t&&(f=-1)),1===f)for(;Fo(e)||$o(e);)Ro(e,!0,-1)?(m=!0,s=o,e.lineIndent>t?f=1:e.lineIndent===t?f=0:e.lineIndent<t&&(f=-1)):s=!1;if(s&&(s=m||i),1!==f&&4!==n||(h=1===n||2===n?t:t+1,p=e.position-e.lineStart,1===f?s&&(ko(e,p)||function(e,t,n){var r,i,o,a,s,l,c,u=e.tag,d=e.anchor,h={},p=Object.create(null),f=null,m=null,g=null,y=!1,E=!1;if(-1!==e.firstTabInLine)return!1;for(null!==e.anchor&&(e.anchorMap[e.anchor]=h),c=e.input.charCodeAt(e.position);0!==c;){if(y||-1===e.firstTabInLine||(e.position=e.firstTabInLine,To(e,"tab characters must not be used in indentation")),r=e.input.charCodeAt(e.position+1),o=e.line,63!==c&&58!==c||!po(r)){if(a=e.line,s=e.lineStart,l=e.position,!xo(e,n,2,!1,!0))break;if(e.line===o){for(c=e.input.charCodeAt(e.position);ho(c);)c=e.input.charCodeAt(++e.position);if(58===c)po(c=e.input.charCodeAt(++e.position))||To(e,"a whitespace character is expected after the key-value separator within a block mapping"),y&&(Co(e,h,p,f,m,null,a,s,l),f=m=g=null),E=!0,y=!1,i=!1,f=e.tag,m=e.result;else{if(!E)return e.tag=u,e.anchor=d,!0;To(e,"can not read an implicit mapping pair; a colon is missed")}}else{if(!E)return e.tag=u,e.anchor=d,!0;To(e,"can not read a block mapping entry; a multiline key may not be an implicit key")}}else 63===c?(y&&(Co(e,h,p,f,m,null,a,s,l),f=m=g=null),E=!0,y=!0,i=!0):y?(y=!1,i=!0):To(e,"incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line"),e.position+=1,c=r;if((e.line===o||e.lineIndent>t)&&(y&&(a=e.line,s=e.lineStart,l=e.position),xo(e,t,4,!0,i)&&(y?m=e.result:g=e.result),y||(Co(e,h,p,f,m,g,a,s,l),f=m=g=null),Ro(e,!0,-1),c=e.input.charCodeAt(e.position)),(e.line===o||e.lineIndent>t)&&0!==c)To(e,"bad indentation of a mapping entry");else if(e.lineIndent<t)break}return y&&Co(e,h,p,f,m,null,a,s,l),E&&(e.tag=u,e.anchor=d,e.kind="mapping",e.result=h),E}(e,p,h))||function(e,t){var n,r,i,o,a,s,l,c,u,d,h,p,f=!0,m=e.tag,g=e.anchor,y=Object.create(null);if(91===(p=e.input.charCodeAt(e.position)))a=93,c=!1,o=[];else{if(123!==p)return!1;a=125,c=!0,o={}}for(null!==e.anchor&&(e.anchorMap[e.anchor]=o),p=e.input.charCodeAt(++e.position);0!==p;){if(Ro(e,!0,t),(p=e.input.charCodeAt(e.position))===a)return e.position++,e.tag=m,e.anchor=g,e.kind=c?"mapping":"sequence",e.result=o,!0;f?44===p&&To(e,"expected the node content, but found ','"):To(e,"missed comma between flow collection entries"),h=null,s=l=!1,63===p&&po(e.input.charCodeAt(e.position+1))&&(s=l=!0,e.position++,Ro(e,!0,t)),n=e.line,r=e.lineStart,i=e.position,xo(e,t,1,!1,!0),d=e.tag,u=e.result,Ro(e,!0,t),p=e.input.charCodeAt(e.position),!l&&e.line!==n||58!==p||(s=!0,p=e.input.charCodeAt(++e.position),Ro(e,!0,t),xo(e,t,1,!1,!0),h=e.result),c?Co(e,o,y,d,u,h,n,r,i):s?o.push(Co(e,null,y,d,u,h,n,r,i)):o.push(u),Ro(e,!0,t),44===(p=e.input.charCodeAt(e.position))?(f=!0,p=e.input.charCodeAt(++e.position)):f=!1}To(e,"unexpected end of the stream within a flow collection")}(e,h)?g=!0:(a&&function(e,t){var n,r,i,o,a,s=1,l=!1,c=!1,u=t,d=0,h=!1;if(124===(o=e.input.charCodeAt(e.position)))r=!1;else{if(62!==o)return!1;r=!0}for(e.kind="scalar",e.result="";0!==o;)if(43===(o=e.input.charCodeAt(++e.position))||45===o)1===s?s=43===o?3:2:To(e,"repeat of a chomping mode identifier");else{if(!((i=48<=(a=o)&&a<=57?a-48:-1)>=0))break;0===i?To(e,"bad explicit indentation width of a block scalar; it cannot be less than one"):c?To(e,"repeat of an indentation width identifier"):(u=t+i-1,c=!0)}if(ho(o)){do{o=e.input.charCodeAt(++e.position)}while(ho(o));if(35===o)do{o=e.input.charCodeAt(++e.position)}while(!uo(o)&&0!==o)}for(;0!==o;){for(No(e),e.lineIndent=0,o=e.input.charCodeAt(e.position);(!c||e.lineIndent<u)&&32===o;)e.lineIndent++,o=e.input.charCodeAt(++e.position);if(!c&&e.lineIndent>u&&(u=e.lineIndent),uo(o))d++;else{if(e.lineIndent<u){3===s?e.result+=Zi.repeat("\n",l?1+d:d):1===s&&l&&(e.result+="\n");break}for(r?ho(o)?(h=!0,e.result+=Zi.repeat("\n",l?1+d:d)):h?(h=!1,e.result+=Zi.repeat("\n",d+1)):0===d?l&&(e.result+=" "):e.result+=Zi.repeat("\n",d):e.result+=Zi.repeat("\n",l?1+d:d),l=!0,c=!0,d=0,n=e.position;!uo(o)&&0!==o;)o=e.input.charCodeAt(++e.position);So(e,n,e.position,!1)}}return!0}(e,h)||function(e,t){var n,r,i;if(39!==(n=e.input.charCodeAt(e.position)))return!1;for(e.kind="scalar",e.result="",e.position++,r=i=e.position;0!==(n=e.input.charCodeAt(e.position));)if(39===n){if(So(e,r,e.position,!0),39!==(n=e.input.charCodeAt(++e.position)))return!0;r=e.position,e.position++,i=e.position}else uo(n)?(So(e,r,i,!0),Po(e,Ro(e,!1,t)),r=i=e.position):e.position===e.lineStart&&Do(e)?To(e,"unexpected end of the document within a single quoted scalar"):(e.position++,i=e.position);To(e,"unexpected end of the stream within a single quoted scalar")}(e,h)||function(e,t){var n,r,i,o,a,s,l;if(34!==(s=e.input.charCodeAt(e.position)))return!1;for(e.kind="scalar",e.result="",e.position++,n=r=e.position;0!==(s=e.input.charCodeAt(e.position));){if(34===s)return So(e,n,e.position,!0),e.position++,!0;if(92===s){if(So(e,n,e.position,!0),uo(s=e.input.charCodeAt(++e.position)))Ro(e,!1,t);else if(s<256&&Eo[s])e.result+=vo[s],e.position++;else if((a=120===(l=s)?2:117===l?4:85===l?8:0)>0){for(i=a,o=0;i>0;i--)(a=mo(s=e.input.charCodeAt(++e.position)))>=0?o=(o<<4)+a:To(e,"expected hexadecimal character");e.result+=yo(o),e.position++}else To(e,"unknown escape sequence");n=r=e.position}else uo(s)?(So(e,n,r,!0),Po(e,Ro(e,!1,t)),n=r=e.position):e.position===e.lineStart&&Do(e)?To(e,"unexpected end of the document within a double quoted scalar"):(e.position++,r=e.position)}To(e,"unexpected end of the stream within a double quoted scalar")}(e,h)?g=!0:function(e){var t,n,r;if(42!==(r=e.input.charCodeAt(e.position)))return!1;for(r=e.input.charCodeAt(++e.position),t=e.position;0!==r&&!po(r)&&!fo(r);)r=e.input.charCodeAt(++e.position);return e.position===t&&To(e,"name of an alias node must contain at least one character"),n=e.input.slice(t,e.position),ro.call(e.anchorMap,n)||To(e,'unidentified alias "'+n+'"'),e.result=e.anchorMap[n],Ro(e,!0,-1),!0}(e)?(g=!0,null===e.tag&&null===e.anchor||To(e,"alias node should not have any properties")):function(e,t,n){var r,i,o,a,s,l,c,u,d=e.kind,h=e.result;if(po(u=e.input.charCodeAt(e.position))||fo(u)||35===u||38===u||42===u||33===u||124===u||62===u||39===u||34===u||37===u||64===u||96===u)return!1;if((63===u||45===u)&&(po(r=e.input.charCodeAt(e.position+1))||n&&fo(r)))return!1;for(e.kind="scalar",e.result="",i=o=e.position,a=!1;0!==u;){if(58===u){if(po(r=e.input.charCodeAt(e.position+1))||n&&fo(r))break}else if(35===u){if(po(e.input.charCodeAt(e.position-1)))break}else{if(e.position===e.lineStart&&Do(e)||n&&fo(u))break;if(uo(u)){if(s=e.line,l=e.lineStart,c=e.lineIndent,Ro(e,!1,-1),e.lineIndent>=t){a=!0,u=e.input.charCodeAt(e.position);continue}e.position=o,e.line=s,e.lineStart=l,e.lineIndent=c;break}}a&&(So(e,i,o,!1),Po(e,e.line-s),i=o=e.position,a=!1),ho(u)||(o=e.position+1),u=e.input.charCodeAt(++e.position)}return So(e,i,o,!1),!!e.result||(e.kind=d,e.result=h,!1)}(e,h,1===n)&&(g=!0,null===e.tag&&(e.tag="?")),null!==e.anchor&&(e.anchorMap[e.anchor]=e.result)):0===f&&(g=s&&ko(e,p))),null===e.tag)null!==e.anchor&&(e.anchorMap[e.anchor]=e.result);else if("?"===e.tag){for(null!==e.result&&"scalar"!==e.kind&&To(e,'unacceptable node kind for !<?> tag; it should be "scalar", not "'+e.kind+'"'),l=0,c=e.implicitTypes.length;l<c;l+=1)if((d=e.implicitTypes[l]).resolve(e.result)){e.result=d.construct(e.result),e.tag=d.tag,null!==e.anchor&&(e.anchorMap[e.anchor]=e.result);break}}else if("!"!==e.tag){if(ro.call(e.typeMap[e.kind||"fallback"],e.tag))d=e.typeMap[e.kind||"fallback"][e.tag];else for(d=null,l=0,c=(u=e.typeMap.multi[e.kind||"fallback"]).length;l<c;l+=1)if(e.tag.slice(0,u[l].tag.length)===u[l].tag){d=u[l];break}d||To(e,"unknown tag !<"+e.tag+">"),null!==e.result&&d.kind!==e.kind&&To(e,"unacceptable node kind for !<"+e.tag+'> tag; it should be "'+d.kind+'", not "'+e.kind+'"'),d.resolve(e.result,e.tag)?(e.result=d.construct(e.result,e.tag),null!==e.anchor&&(e.anchorMap[e.anchor]=e.result)):To(e,"cannot resolve a node with !<"+e.tag+"> explicit tag")}return null!==e.listener&&e.listener("close",e),null!==e.tag||null!==e.anchor||g}function Uo(e){var t,n,r,i,o=e.position,a=!1;for(e.version=null,e.checkLineBreaks=e.legacy,e.tagMap=Object.create(null),e.anchorMap=Object.create(null);0!==(i=e.input.charCodeAt(e.position))&&(Ro(e,!0,-1),i=e.input.charCodeAt(e.position),!(e.lineIndent>0||37!==i));){for(a=!0,i=e.input.charCodeAt(++e.position),t=e.position;0!==i&&!po(i);)i=e.input.charCodeAt(++e.position);for(r=[],(n=e.input.slice(t,e.position)).length<1&&To(e,"directive name must not be less than one character in length");0!==i;){for(;ho(i);)i=e.input.charCodeAt(++e.position);if(35===i){do{i=e.input.charCodeAt(++e.position)}while(0!==i&&!uo(i));break}if(uo(i))break;for(t=e.position;0!==i&&!po(i);)i=e.input.charCodeAt(++e.position);r.push(e.input.slice(t,e.position))}0!==i&&No(e),ro.call(_o,n)?_o[n](e,n,r):Oo(e,'unknown document directive "'+n+'"')}Ro(e,!0,-1),0===e.lineIndent&&45===e.input.charCodeAt(e.position)&&45===e.input.charCodeAt(e.position+1)&&45===e.input.charCodeAt(e.position+2)?(e.position+=3,Ro(e,!0,-1)):a&&To(e,"directives end mark is expected"),xo(e,e.lineIndent-1,4,!1,!0),Ro(e,!0,-1),e.checkLineBreaks&&oo.test(e.input.slice(o,e.position))&&Oo(e,"non-ASCII line breaks are interpreted as content"),e.documents.push(e.result),e.position===e.lineStart&&Do(e)?46===e.input.charCodeAt(e.position)&&(e.position+=3,Ro(e,!0,-1)):e.position<e.length-1&&To(e,"end of the stream or a document separator is expected")}function Lo(e,t){t=t||{},0!==(e=String(e)).length&&(10!==e.charCodeAt(e.length-1)&&13!==e.charCodeAt(e.length-1)&&(e+="\n"),65279===e.charCodeAt(0)&&(e=e.slice(1)));var n=new bo(e,t),r=e.indexOf("\0");for(-1!==r&&(n.position=r,To(n,"null byte is not allowed in input")),n.input+="\0";32===n.input.charCodeAt(n.position);)n.lineIndent+=1,n.position+=1;for(;n.position<n.length-1;)Uo(n);return n.documents}ei.loadAll=function(e,t,n){null!==t&&"object"==typeof t&&void 0===n&&(n=t,t=null);var r=Lo(e,n);if("function"!=typeof t)return r;for(var i=0,o=r.length;i<o;i+=1)t(r[i])},ei.load=function(e,t){var n=Lo(e,t);if(0!==n.length){if(1===n.length)return n[0];throw new eo("expected a single document in the stream, but found more")}};var jo={},Mo=ti,qo=oi,Bo=Qi,Ho=Object.prototype.toString,Go=Object.prototype.hasOwnProperty,Vo={0:"\\0",7:"\\a",8:"\\b",9:"\\t",10:"\\n",11:"\\v",12:"\\f",13:"\\r",27:"\\e",34:'\\"',92:"\\\\",133:"\\N",160:"\\_",8232:"\\L",8233:"\\P"},zo=["y","Y","yes","Yes","YES","on","On","ON","n","N","no","No","NO","off","Off","OFF"],Wo=/^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;function Yo(e){var t,n,r;if(t=e.toString(16).toUpperCase(),e<=255)n="x",r=2;else if(e<=65535)n="u",r=4;else{if(!(e<=4294967295))throw new qo("code point within a string may not be greater than 0xFFFFFFFF");n="U",r=8}return"\\"+n+Mo.repeat("0",r-t.length)+t}function Xo(e){this.schema=e.schema||Bo,this.indent=Math.max(1,e.indent||2),this.noArrayIndent=e.noArrayIndent||!1,this.skipInvalid=e.skipInvalid||!1,this.flowLevel=Mo.isNothing(e.flowLevel)?-1:e.flowLevel,this.styleMap=function(e,t){var n,r,i,o,a,s,l;if(null===t)return{};for(n={},i=0,o=(r=Object.keys(t)).length;i<o;i+=1)a=r[i],s=String(t[a]),"!!"===a.slice(0,2)&&(a="tag:yaml.org,2002:"+a.slice(2)),(l=e.compiledTypeMap.fallback[a])&&Go.call(l.styleAliases,s)&&(s=l.styleAliases[s]),n[a]=s;return n}(this.schema,e.styles||null),this.sortKeys=e.sortKeys||!1,this.lineWidth=e.lineWidth||80,this.noRefs=e.noRefs||!1,this.noCompatMode=e.noCompatMode||!1,this.condenseFlow=e.condenseFlow||!1,this.quotingType='"'===e.quotingType?2:1,this.forceQuotes=e.forceQuotes||!1,this.replacer="function"==typeof e.replacer?e.replacer:null,this.implicitTypes=this.schema.compiledImplicit,this.explicitTypes=this.schema.compiledExplicit,this.tag=null,this.result="",this.duplicates=[],this.usedDuplicates=null}function Jo(e,t){for(var n,r=Mo.repeat(" ",t),i=0,o=-1,a="",s=e.length;i<s;)-1===(o=e.indexOf("\n",i))?(n=e.slice(i),i=s):(n=e.slice(i,o+1),i=o+1),n.length&&"\n"!==n&&(a+=r),a+=n;return a}function Ko(e,t){return"\n"+Mo.repeat(" ",e.indent*t)}function Qo(e){return 32===e||9===e}function Zo(e){return 32<=e&&e<=126||161<=e&&e<=55295&&8232!==e&&8233!==e||57344<=e&&e<=65533&&65279!==e||65536<=e&&e<=1114111}function ea(e){return Zo(e)&&65279!==e&&13!==e&&10!==e}function ta(e,t,n){var r=ea(e),i=r&&!Qo(e);return(n?r:r&&44!==e&&91!==e&&93!==e&&123!==e&&125!==e)&&35!==e&&!(58===t&&!i)||ea(t)&&!Qo(t)&&35===e||58===t&&i}function na(e,t){var n,r=e.charCodeAt(t);return r>=55296&&r<=56319&&t+1<e.length&&(n=e.charCodeAt(t+1))>=56320&&n<=57343?1024*(r-55296)+n-56320+65536:r}function ra(e){return/^\n* /.test(e)}function ia(e,t,n,r,i){e.dump=function(){if(0===t.length)return 2===e.quotingType?'""':"''";if(!e.noCompatMode&&(-1!==zo.indexOf(t)||Wo.test(t)))return 2===e.quotingType?'"'+t+'"':"'"+t+"'";var o=e.indent*Math.max(1,n),a=-1===e.lineWidth?-1:Math.max(Math.min(e.lineWidth,40),e.lineWidth-o),s=r||e.flowLevel>-1&&n>=e.flowLevel;switch(function(e,t,n,r,i,o,a,s){var l,c,u=0,d=null,h=!1,p=!1,f=-1!==r,m=-1,g=Zo(c=na(e,0))&&65279!==c&&!Qo(c)&&45!==c&&63!==c&&58!==c&&44!==c&&91!==c&&93!==c&&123!==c&&125!==c&&35!==c&&38!==c&&42!==c&&33!==c&&124!==c&&61!==c&&62!==c&&39!==c&&34!==c&&37!==c&&64!==c&&96!==c&&function(e){return!Qo(e)&&58!==e}(na(e,e.length-1));if(t||a)for(l=0;l<e.length;u>=65536?l+=2:l++){if(!Zo(u=na(e,l)))return 5;g=g&&ta(u,d,s),d=u}else{for(l=0;l<e.length;u>=65536?l+=2:l++){if(10===(u=na(e,l)))h=!0,f&&(p=p||l-m-1>r&&" "!==e[m+1],m=l);else if(!Zo(u))return 5;g=g&&ta(u,d,s),d=u}p=p||f&&l-m-1>r&&" "!==e[m+1]}return h||p?n>9&&ra(e)?5:a?2===o?5:2:p?4:3:!g||a||i(e)?2===o?5:2:1}(t,s,e.indent,a,(function(t){return function(e,t){var n,r;for(n=0,r=e.implicitTypes.length;n<r;n+=1)if(e.implicitTypes[n].resolve(t))return!0;return!1}(e,t)}),e.quotingType,e.forceQuotes&&!r,i)){case 1:return t;case 2:return"'"+t.replace(/'/g,"''")+"'";case 3:return"|"+oa(t,e.indent)+aa(Jo(t,o));case 4:return">"+oa(t,e.indent)+aa(Jo(function(e,t){for(var n,r,i,o=/(\n+)([^\n]*)/g,a=(i=-1!==(i=e.indexOf("\n"))?i:e.length,o.lastIndex=i,sa(e.slice(0,i),t)),s="\n"===e[0]||" "===e[0];r=o.exec(e);){var l=r[1],c=r[2];n=" "===c[0],a+=l+(s||n||""===c?"":"\n")+sa(c,t),s=n}return a}(t,a),o));case 5:return'"'+function(e){for(var t,n="",r=0,i=0;i<e.length;r>=65536?i+=2:i++)r=na(e,i),!(t=Vo[r])&&Zo(r)?(n+=e[i],r>=65536&&(n+=e[i+1])):n+=t||Yo(r);return n}(t)+'"';default:throw new qo("impossible error: invalid scalar style")}}()}function oa(e,t){var n=ra(e)?String(t):"",r="\n"===e[e.length-1];return n+(!r||"\n"!==e[e.length-2]&&"\n"!==e?r?"":"-":"+")+"\n"}function aa(e){return"\n"===e[e.length-1]?e.slice(0,-1):e}function sa(e,t){if(""===e||" "===e[0])return e;for(var n,r,i=/ [^ ]/g,o=0,a=0,s=0,l="";n=i.exec(e);)(s=n.index)-o>t&&(r=a>o?a:s,l+="\n"+e.slice(o,r),o=r+1),a=s;return l+="\n",e.length-o>t&&a>o?l+=e.slice(o,a)+"\n"+e.slice(a+1):l+=e.slice(o),l.slice(1)}function la(e,t,n,r){var i,o,a,s="",l=e.tag;for(i=0,o=n.length;i<o;i+=1)a=n[i],e.replacer&&(a=e.replacer.call(n,String(i),a)),(ua(e,t+1,a,!0,!0,!1,!0)||void 0===a&&ua(e,t+1,null,!0,!0,!1,!0))&&(r&&""===s||(s+=Ko(e,t)),e.dump&&10===e.dump.charCodeAt(0)?s+="-":s+="- ",s+=e.dump);e.tag=l,e.dump=s||"[]"}function ca(e,t,n){var r,i,o,a,s,l;for(o=0,a=(i=n?e.explicitTypes:e.implicitTypes).length;o<a;o+=1)if(((s=i[o]).instanceOf||s.predicate)&&(!s.instanceOf||"object"==typeof t&&t instanceof s.instanceOf)&&(!s.predicate||s.predicate(t))){if(n?s.multi&&s.representName?e.tag=s.representName(t):e.tag=s.tag:e.tag="?",s.represent){if(l=e.styleMap[s.tag]||s.defaultStyle,"[object Function]"===Ho.call(s.represent))r=s.represent(t,l);else{if(!Go.call(s.represent,l))throw new qo("!<"+s.tag+'> tag resolver accepts not "'+l+'" style');r=s.represent[l](t,l)}e.dump=r}return!0}return!1}function ua(e,t,n,r,i,o,a){e.tag=null,e.dump=n,ca(e,n,!1)||ca(e,n,!0);var s,l=Ho.call(e.dump),c=r;r&&(r=e.flowLevel<0||e.flowLevel>t);var u,d,h="[object Object]"===l||"[object Array]"===l;if(h&&(d=-1!==(u=e.duplicates.indexOf(n))),(null!==e.tag&&"?"!==e.tag||d||2!==e.indent&&t>0)&&(i=!1),d&&e.usedDuplicates[u])e.dump="*ref_"+u;else{if(h&&d&&!e.usedDuplicates[u]&&(e.usedDuplicates[u]=!0),"[object Object]"===l)r&&0!==Object.keys(e.dump).length?(function(e,t,n,r){var i,o,a,s,l,c,u="",d=e.tag,h=Object.keys(n);if(!0===e.sortKeys)h.sort();else if("function"==typeof e.sortKeys)h.sort(e.sortKeys);else if(e.sortKeys)throw new qo("sortKeys must be a boolean or a function");for(i=0,o=h.length;i<o;i+=1)c="",r&&""===u||(c+=Ko(e,t)),s=n[a=h[i]],e.replacer&&(s=e.replacer.call(n,a,s)),ua(e,t+1,a,!0,!0,!0)&&((l=null!==e.tag&&"?"!==e.tag||e.dump&&e.dump.length>1024)&&(e.dump&&10===e.dump.charCodeAt(0)?c+="?":c+="? "),c+=e.dump,l&&(c+=Ko(e,t)),ua(e,t+1,s,!0,l)&&(e.dump&&10===e.dump.charCodeAt(0)?c+=":":c+=": ",u+=c+=e.dump));e.tag=d,e.dump=u||"{}"}(e,t,e.dump,i),d&&(e.dump="&ref_"+u+e.dump)):(function(e,t,n){var r,i,o,a,s,l="",c=e.tag,u=Object.keys(n);for(r=0,i=u.length;r<i;r+=1)s="",""!==l&&(s+=", "),e.condenseFlow&&(s+='"'),a=n[o=u[r]],e.replacer&&(a=e.replacer.call(n,o,a)),ua(e,t,o,!1,!1)&&(e.dump.length>1024&&(s+="? "),s+=e.dump+(e.condenseFlow?'"':"")+":"+(e.condenseFlow?"":" "),ua(e,t,a,!1,!1)&&(l+=s+=e.dump));e.tag=c,e.dump="{"+l+"}"}(e,t,e.dump),d&&(e.dump="&ref_"+u+" "+e.dump));else if("[object Array]"===l)r&&0!==e.dump.length?(e.noArrayIndent&&!a&&t>0?la(e,t-1,e.dump,i):la(e,t,e.dump,i),d&&(e.dump="&ref_"+u+e.dump)):(function(e,t,n){var r,i,o,a="",s=e.tag;for(r=0,i=n.length;r<i;r+=1)o=n[r],e.replacer&&(o=e.replacer.call(n,String(r),o)),(ua(e,t,o,!1,!1)||void 0===o&&ua(e,t,null,!1,!1))&&(""!==a&&(a+=","+(e.condenseFlow?"":" ")),a+=e.dump);e.tag=s,e.dump="["+a+"]"}(e,t,e.dump),d&&(e.dump="&ref_"+u+" "+e.dump));else{if("[object String]"!==l){if("[object Undefined]"===l)return!1;if(e.skipInvalid)return!1;throw new qo("unacceptable kind of an object to dump "+l)}"?"!==e.tag&&ia(e,e.dump,t,o,c)}null!==e.tag&&"?"!==e.tag&&(s=encodeURI("!"===e.tag[0]?e.tag.slice(1):e.tag).replace(/!/g,"%21"),s="!"===e.tag[0]?"!"+s:"tag:yaml.org,2002:"===s.slice(0,18)?"!!"+s.slice(18):"!<"+s+">",e.dump=s+" "+e.dump)}return!0}function da(e,t){var n,r,i=[],o=[];for(ha(e,i,o),n=0,r=o.length;n<r;n+=1)t.duplicates.push(i[o[n]]);t.usedDuplicates=new Array(r)}function ha(e,t,n){var r,i,o;if(null!==e&&"object"==typeof e)if(-1!==(i=t.indexOf(e)))-1===n.indexOf(i)&&n.push(i);else if(t.push(e),Array.isArray(e))for(i=0,o=e.length;i<o;i+=1)ha(e[i],t,n);else for(i=0,o=(r=Object.keys(e)).length;i<o;i+=1)ha(e[r[i]],t,n)}jo.dump=function(e,t){var n=new Xo(t=t||{});n.noRefs||da(e,n);var r=e;return n.replacer&&(r=n.replacer.call({"":r},"",r)),ua(n,0,r,!0,!0)?n.dump+"\n":""};var pa=ei,fa=jo;function ma(e,t){return function(){throw new Error("Function yaml."+e+" is removed in js-yaml 4. Use yaml."+t+" instead, which is now safe by default.")}}Zr.Type=hi,Zr.Schema=yi,Zr.FAILSAFE_SCHEMA=bi,Zr.JSON_SCHEMA=ki,Zr.CORE_SCHEMA=Fi,Zr.DEFAULT_SCHEMA=Qi,Zr.load=pa.load,Zr.loadAll=pa.loadAll,Zr.dump=fa.dump,Zr.YAMLException=oi,Zr.types={binary:qi,float:Pi,map:wi,null:Ai,pairs:Yi,set:Ki,timestamp:Li,bool:Ti,int:Ii,merge:ji,omap:Vi,seq:vi,str:Ei},Zr.safeLoad=ma("safeLoad","load"),Zr.safeLoadAll=ma("safeLoadAll","loadAll"),Zr.safeDump=ma("safeDump","dump");var ga={};Object.defineProperty(ga,"__esModule",{value:!0}),ga.Lazy=void 0,ga.Lazy=class{constructor(e){this._value=null,this.creator=e}get hasValue(){return null==this.creator}get value(){if(null==this.creator)return this._value;const e=this.creator();return this.value=e,e}set value(e){this._value=e,this.creator=null}};var ya={exports:{}},Ea={SEMVER_SPEC_VERSION:"2.0.0",MAX_LENGTH:256,MAX_SAFE_INTEGER:Number.MAX_SAFE_INTEGER||9007199254740991,MAX_SAFE_COMPONENT_LENGTH:16},va="object"==typeof process&&process.env&&{}.NODE_DEBUG&&/\bsemver\b/i.test({}.NODE_DEBUG)?(...e)=>console.error("SEMVER",...e):()=>{};!function(e,t){const{MAX_SAFE_COMPONENT_LENGTH:n}=Ea,r=va,i=(t=e.exports={}).re=[],o=t.src=[],a=t.t={};let s=0;const l=(e,t,n)=>{const l=s++;r(l,t),a[e]=l,o[l]=t,i[l]=new RegExp(t,n?"g":void 0)};l("NUMERICIDENTIFIER","0|[1-9]\\d*"),l("NUMERICIDENTIFIERLOOSE","[0-9]+"),l("NONNUMERICIDENTIFIER","\\d*[a-zA-Z-][a-zA-Z0-9-]*"),l("MAINVERSION",`(${o[a.NUMERICIDENTIFIER]})\\.(${o[a.NUMERICIDENTIFIER]})\\.(${o[a.NUMERICIDENTIFIER]})`),l("MAINVERSIONLOOSE",`(${o[a.NUMERICIDENTIFIERLOOSE]})\\.(${o[a.NUMERICIDENTIFIERLOOSE]})\\.(${o[a.NUMERICIDENTIFIERLOOSE]})`),l("PRERELEASEIDENTIFIER",`(?:${o[a.NUMERICIDENTIFIER]}|${o[a.NONNUMERICIDENTIFIER]})`),l("PRERELEASEIDENTIFIERLOOSE",`(?:${o[a.NUMERICIDENTIFIERLOOSE]}|${o[a.NONNUMERICIDENTIFIER]})`),l("PRERELEASE",`(?:-(${o[a.PRERELEASEIDENTIFIER]}(?:\\.${o[a.PRERELEASEIDENTIFIER]})*))`),l("PRERELEASELOOSE",`(?:-?(${o[a.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${o[a.PRERELEASEIDENTIFIERLOOSE]})*))`),l("BUILDIDENTIFIER","[0-9A-Za-z-]+"),l("BUILD",`(?:\\+(${o[a.BUILDIDENTIFIER]}(?:\\.${o[a.BUILDIDENTIFIER]})*))`),l("FULLPLAIN",`v?${o[a.MAINVERSION]}${o[a.PRERELEASE]}?${o[a.BUILD]}?`),l("FULL",`^${o[a.FULLPLAIN]}$`),l("LOOSEPLAIN",`[v=\\s]*${o[a.MAINVERSIONLOOSE]}${o[a.PRERELEASELOOSE]}?${o[a.BUILD]}?`),l("LOOSE",`^${o[a.LOOSEPLAIN]}$`),l("GTLT","((?:<|>)?=?)"),l("XRANGEIDENTIFIERLOOSE",`${o[a.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`),l("XRANGEIDENTIFIER",`${o[a.NUMERICIDENTIFIER]}|x|X|\\*`),l("XRANGEPLAIN",`[v=\\s]*(${o[a.XRANGEIDENTIFIER]})(?:\\.(${o[a.XRANGEIDENTIFIER]})(?:\\.(${o[a.XRANGEIDENTIFIER]})(?:${o[a.PRERELEASE]})?${o[a.BUILD]}?)?)?`),l("XRANGEPLAINLOOSE",`[v=\\s]*(${o[a.XRANGEIDENTIFIERLOOSE]})(?:\\.(${o[a.XRANGEIDENTIFIERLOOSE]})(?:\\.(${o[a.XRANGEIDENTIFIERLOOSE]})(?:${o[a.PRERELEASELOOSE]})?${o[a.BUILD]}?)?)?`),l("XRANGE",`^${o[a.GTLT]}\\s*${o[a.XRANGEPLAIN]}$`),l("XRANGELOOSE",`^${o[a.GTLT]}\\s*${o[a.XRANGEPLAINLOOSE]}$`),l("COERCE",`(^|[^\\d])(\\d{1,${n}})(?:\\.(\\d{1,${n}}))?(?:\\.(\\d{1,${n}}))?(?:$|[^\\d])`),l("COERCERTL",o[a.COERCE],!0),l("LONETILDE","(?:~>?)"),l("TILDETRIM",`(\\s*)${o[a.LONETILDE]}\\s+`,!0),t.tildeTrimReplace="$1~",l("TILDE",`^${o[a.LONETILDE]}${o[a.XRANGEPLAIN]}$`),l("TILDELOOSE",`^${o[a.LONETILDE]}${o[a.XRANGEPLAINLOOSE]}$`),l("LONECARET","(?:\\^)"),l("CARETTRIM",`(\\s*)${o[a.LONECARET]}\\s+`,!0),t.caretTrimReplace="$1^",l("CARET",`^${o[a.LONECARET]}${o[a.XRANGEPLAIN]}$`),l("CARETLOOSE",`^${o[a.LONECARET]}${o[a.XRANGEPLAINLOOSE]}$`),l("COMPARATORLOOSE",`^${o[a.GTLT]}\\s*(${o[a.LOOSEPLAIN]})$|^$`),l("COMPARATOR",`^${o[a.GTLT]}\\s*(${o[a.FULLPLAIN]})$|^$`),l("COMPARATORTRIM",`(\\s*)${o[a.GTLT]}\\s*(${o[a.LOOSEPLAIN]}|${o[a.XRANGEPLAIN]})`,!0),t.comparatorTrimReplace="$1$2$3",l("HYPHENRANGE",`^\\s*(${o[a.XRANGEPLAIN]})\\s+-\\s+(${o[a.XRANGEPLAIN]})\\s*$`),l("HYPHENRANGELOOSE",`^\\s*(${o[a.XRANGEPLAINLOOSE]})\\s+-\\s+(${o[a.XRANGEPLAINLOOSE]})\\s*$`),l("STAR","(<|>)?=?\\s*\\*"),l("GTE0","^\\s*>=\\s*0.0.0\\s*$"),l("GTE0PRE","^\\s*>=\\s*0.0.0-0\\s*$")}(ya,ya.exports);const wa=["includePrerelease","loose","rtl"];var ba=e=>e?"object"!=typeof e?{loose:!0}:wa.filter((t=>e[t])).reduce(((e,t)=>(e[t]=!0,e)),{}):{};const Aa=/^[0-9]+$/,Ta=(e,t)=>{const n=Aa.test(e),r=Aa.test(t);return n&&r&&(e=+e,t=+t),e===t?0:n&&!r?-1:r&&!n?1:e<t?-1:1};var Oa={compareIdentifiers:Ta,rcompareIdentifiers:(e,t)=>Ta(t,e)};const _a=va,{MAX_LENGTH:Sa,MAX_SAFE_INTEGER:Ia}=Ea,{re:Ca,t:Na}=ya.exports,Ra=ba,{compareIdentifiers:Da}=Oa;class Pa{constructor(e,t){if(t=Ra(t),e instanceof Pa){if(e.loose===!!t.loose&&e.includePrerelease===!!t.includePrerelease)return e;e=e.version}else if("string"!=typeof e)throw new TypeError(`Invalid Version: ${e}`);if(e.length>Sa)throw new TypeError(`version is longer than ${Sa} characters`);_a("SemVer",e,t),this.options=t,this.loose=!!t.loose,this.includePrerelease=!!t.includePrerelease;const n=e.trim().match(t.loose?Ca[Na.LOOSE]:Ca[Na.FULL]);if(!n)throw new TypeError(`Invalid Version: ${e}`);if(this.raw=e,this.major=+n[1],this.minor=+n[2],this.patch=+n[3],this.major>Ia||this.major<0)throw new TypeError("Invalid major version");if(this.minor>Ia||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>Ia||this.patch<0)throw new TypeError("Invalid patch version");n[4]?this.prerelease=n[4].split(".").map((e=>{if(/^[0-9]+$/.test(e)){const t=+e;if(t>=0&&t<Ia)return t}return e})):this.prerelease=[],this.build=n[5]?n[5].split("."):[],this.format()}format(){return this.version=`${this.major}.${this.minor}.${this.patch}`,this.prerelease.length&&(this.version+=`-${this.prerelease.join(".")}`),this.version}toString(){return this.version}compare(e){if(_a("SemVer.compare",this.version,this.options,e),!(e instanceof Pa)){if("string"==typeof e&&e===this.version)return 0;e=new Pa(e,this.options)}return e.version===this.version?0:this.compareMain(e)||this.comparePre(e)}compareMain(e){return e instanceof Pa||(e=new Pa(e,this.options)),Da(this.major,e.major)||Da(this.minor,e.minor)||Da(this.patch,e.patch)}comparePre(e){if(e instanceof Pa||(e=new Pa(e,this.options)),this.prerelease.length&&!e.prerelease.length)return-1;if(!this.prerelease.length&&e.prerelease.length)return 1;if(!this.prerelease.length&&!e.prerelease.length)return 0;let t=0;do{const n=this.prerelease[t],r=e.prerelease[t];if(_a("prerelease compare",t,n,r),void 0===n&&void 0===r)return 0;if(void 0===r)return 1;if(void 0===n)return-1;if(n!==r)return Da(n,r)}while(++t)}compareBuild(e){e instanceof Pa||(e=new Pa(e,this.options));let t=0;do{const n=this.build[t],r=e.build[t];if(_a("prerelease compare",t,n,r),void 0===n&&void 0===r)return 0;if(void 0===r)return 1;if(void 0===n)return-1;if(n!==r)return Da(n,r)}while(++t)}inc(e,t){switch(e){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",t);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",t);break;case"prepatch":this.prerelease.length=0,this.inc("patch",t),this.inc("pre",t);break;case"prerelease":0===this.prerelease.length&&this.inc("patch",t),this.inc("pre",t);break;case"major":0===this.minor&&0===this.patch&&0!==this.prerelease.length||this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":0===this.patch&&0!==this.prerelease.length||this.minor++,this.patch=0,this.prerelease=[];break;case"patch":0===this.prerelease.length&&this.patch++,this.prerelease=[];break;case"pre":if(0===this.prerelease.length)this.prerelease=[0];else{let e=this.prerelease.length;for(;--e>=0;)"number"==typeof this.prerelease[e]&&(this.prerelease[e]++,e=-2);-1===e&&this.prerelease.push(0)}t&&(this.prerelease[0]===t?isNaN(this.prerelease[1])&&(this.prerelease=[t,0]):this.prerelease=[t,0]);break;default:throw new Error(`invalid increment argument: ${e}`)}return this.format(),this.raw=this.version,this}}var ka=Pa;const{MAX_LENGTH:Fa}=Ea,{re:$a,t:xa}=ya.exports,Ua=ka,La=ba;var ja=(e,t)=>{if(t=La(t),e instanceof Ua)return e;if("string"!=typeof e)return null;if(e.length>Fa)return null;if(!(t.loose?$a[xa.LOOSE]:$a[xa.FULL]).test(e))return null;try{return new Ua(e,t)}catch(e){return null}};const Ma=ja;const qa=ja;const Ba=ka;const Ha=ka;var Ga=(e,t,n)=>new Ha(e,n).compare(new Ha(t,n));const Va=Ga;var za=(e,t,n)=>0===Va(e,t,n);const Wa=ja,Ya=za;const Xa=ka;const Ja=ka;const Ka=ka;const Qa=ja;const Za=Ga;const es=Ga;const ts=ka;var ns=(e,t,n)=>{const r=new ts(e,n),i=new ts(t,n);return r.compare(i)||r.compareBuild(i)};const rs=ns;const is=ns;const os=Ga;var as=(e,t,n)=>os(e,t,n)>0;const ss=Ga;var ls=(e,t,n)=>ss(e,t,n)<0;const cs=Ga;var us=(e,t,n)=>0!==cs(e,t,n);const ds=Ga;var hs=(e,t,n)=>ds(e,t,n)>=0;const ps=Ga;var fs=(e,t,n)=>ps(e,t,n)<=0;const ms=za,gs=us,ys=as,Es=hs,vs=ls,ws=fs;var bs=(e,t,n,r)=>{switch(t){case"===":return"object"==typeof e&&(e=e.version),"object"==typeof n&&(n=n.version),e===n;case"!==":return"object"==typeof e&&(e=e.version),"object"==typeof n&&(n=n.version),e!==n;case"":case"=":case"==":return ms(e,n,r);case"!=":return gs(e,n,r);case">":return ys(e,n,r);case">=":return Es(e,n,r);case"<":return vs(e,n,r);case"<=":return ws(e,n,r);default:throw new TypeError(`Invalid operator: ${t}`)}};const As=ka,Ts=ja,{re:Os,t:_s}=ya.exports;var Ss=Is;function Is(e){var t=this;if(t instanceof Is||(t=new Is),t.tail=null,t.head=null,t.length=0,e&&"function"==typeof e.forEach)e.forEach((function(e){t.push(e)}));else if(arguments.length>0)for(var n=0,r=arguments.length;n<r;n++)t.push(arguments[n]);return t}function Cs(e,t){e.tail=new Rs(t,e.tail,null,e),e.head||(e.head=e.tail),e.length++}function Ns(e,t){e.head=new Rs(t,null,e.head,e),e.tail||(e.tail=e.head),e.length++}function Rs(e,t,n,r){if(!(this instanceof Rs))return new Rs(e,t,n,r);this.list=r,this.value=e,t?(t.next=this,this.prev=t):this.prev=null,n?(n.prev=this,this.next=n):this.next=null}Is.Node=Rs,Is.create=Is,Is.prototype.removeNode=function(e){if(e.list!==this)throw new Error("removing node which does not belong to this list");var t=e.next,n=e.prev;return t&&(t.prev=n),n&&(n.next=t),e===this.head&&(this.head=t),e===this.tail&&(this.tail=n),e.list.length--,e.next=null,e.prev=null,e.list=null,t},Is.prototype.unshiftNode=function(e){if(e!==this.head){e.list&&e.list.removeNode(e);var t=this.head;e.list=this,e.next=t,t&&(t.prev=e),this.head=e,this.tail||(this.tail=e),this.length++}},Is.prototype.pushNode=function(e){if(e!==this.tail){e.list&&e.list.removeNode(e);var t=this.tail;e.list=this,e.prev=t,t&&(t.next=e),this.tail=e,this.head||(this.head=e),this.length++}},Is.prototype.push=function(){for(var e=0,t=arguments.length;e<t;e++)Cs(this,arguments[e]);return this.length},Is.prototype.unshift=function(){for(var e=0,t=arguments.length;e<t;e++)Ns(this,arguments[e]);return this.length},Is.prototype.pop=function(){if(this.tail){var e=this.tail.value;return this.tail=this.tail.prev,this.tail?this.tail.next=null:this.head=null,this.length--,e}},Is.prototype.shift=function(){if(this.head){var e=this.head.value;return this.head=this.head.next,this.head?this.head.prev=null:this.tail=null,this.length--,e}},Is.prototype.forEach=function(e,t){t=t||this;for(var n=this.head,r=0;null!==n;r++)e.call(t,n.value,r,this),n=n.next},Is.prototype.forEachReverse=function(e,t){t=t||this;for(var n=this.tail,r=this.length-1;null!==n;r--)e.call(t,n.value,r,this),n=n.prev},Is.prototype.get=function(e){for(var t=0,n=this.head;null!==n&&t<e;t++)n=n.next;if(t===e&&null!==n)return n.value},Is.prototype.getReverse=function(e){for(var t=0,n=this.tail;null!==n&&t<e;t++)n=n.prev;if(t===e&&null!==n)return n.value},Is.prototype.map=function(e,t){t=t||this;for(var n=new Is,r=this.head;null!==r;)n.push(e.call(t,r.value,this)),r=r.next;return n},Is.prototype.mapReverse=function(e,t){t=t||this;for(var n=new Is,r=this.tail;null!==r;)n.push(e.call(t,r.value,this)),r=r.prev;return n},Is.prototype.reduce=function(e,t){var n,r=this.head;if(arguments.length>1)n=t;else{if(!this.head)throw new TypeError("Reduce of empty list with no initial value");r=this.head.next,n=this.head.value}for(var i=0;null!==r;i++)n=e(n,r.value,i),r=r.next;return n},Is.prototype.reduceReverse=function(e,t){var n,r=this.tail;if(arguments.length>1)n=t;else{if(!this.tail)throw new TypeError("Reduce of empty list with no initial value");r=this.tail.prev,n=this.tail.value}for(var i=this.length-1;null!==r;i--)n=e(n,r.value,i),r=r.prev;return n},Is.prototype.toArray=function(){for(var e=new Array(this.length),t=0,n=this.head;null!==n;t++)e[t]=n.value,n=n.next;return e},Is.prototype.toArrayReverse=function(){for(var e=new Array(this.length),t=0,n=this.tail;null!==n;t++)e[t]=n.value,n=n.prev;return e},Is.prototype.slice=function(e,t){(t=t||this.length)<0&&(t+=this.length),(e=e||0)<0&&(e+=this.length);var n=new Is;if(t<e||t<0)return n;e<0&&(e=0),t>this.length&&(t=this.length);for(var r=0,i=this.head;null!==i&&r<e;r++)i=i.next;for(;null!==i&&r<t;r++,i=i.next)n.push(i.value);return n},Is.prototype.sliceReverse=function(e,t){(t=t||this.length)<0&&(t+=this.length),(e=e||0)<0&&(e+=this.length);var n=new Is;if(t<e||t<0)return n;e<0&&(e=0),t>this.length&&(t=this.length);for(var r=this.length,i=this.tail;null!==i&&r>t;r--)i=i.prev;for(;null!==i&&r>e;r--,i=i.prev)n.push(i.value);return n},Is.prototype.splice=function(e,t,...n){e>this.length&&(e=this.length-1),e<0&&(e=this.length+e);for(var r=0,i=this.head;null!==i&&r<e;r++)i=i.next;var o,a,s,l,c=[];for(r=0;i&&r<t;r++)c.push(i.value),i=this.removeNode(i);for(null===i&&(i=this.tail),i!==this.head&&i!==this.tail&&(i=i.prev),r=0;r<n.length;r++)o=this,a=i,s=n[r],l=void 0,null===(l=a===o.head?new Rs(s,null,a,o):new Rs(s,a,a.next,o)).next&&(o.tail=l),null===l.prev&&(o.head=l),o.length++,i=l;return c},Is.prototype.reverse=function(){for(var e=this.head,t=this.tail,n=e;null!==n;n=n.prev){var r=n.prev;n.prev=n.next,n.next=r}return this.head=t,this.tail=e,this};try{require("./iterator.js")(Is)}catch(e){}const Ds=Ss,Ps=Symbol("max"),ks=Symbol("length"),Fs=Symbol("lengthCalculator"),$s=Symbol("allowStale"),xs=Symbol("maxAge"),Us=Symbol("dispose"),Ls=Symbol("noDisposeOnSet"),js=Symbol("lruList"),Ms=Symbol("cache"),qs=Symbol("updateAgeOnGet"),Bs=()=>1,Hs=(e,t,n)=>{const r=e[Ms].get(t);if(r){const t=r.value;if(Gs(e,t)){if(zs(e,r),!e[$s])return}else n&&(e[qs]&&(r.value.now=Date.now()),e[js].unshiftNode(r));return t.value}},Gs=(e,t)=>{if(!t||!t.maxAge&&!e[xs])return!1;const n=Date.now()-t.now;return t.maxAge?n>t.maxAge:e[xs]&&n>e[xs]},Vs=e=>{if(e[ks]>e[Ps])for(let t=e[js].tail;e[ks]>e[Ps]&&null!==t;){const n=t.prev;zs(e,t),t=n}},zs=(e,t)=>{if(t){const n=t.value;e[Us]&&e[Us](n.key,n.value),e[ks]-=n.length,e[Ms].delete(n.key),e[js].removeNode(t)}};class Ws{constructor(e,t,n,r,i){this.key=e,this.value=t,this.length=n,this.now=r,this.maxAge=i||0}}const Ys=(e,t,n,r)=>{let i=n.value;Gs(e,i)&&(zs(e,n),e[$s]||(i=void 0)),i&&t.call(r,i.value,i.key,e)};class Xs{constructor(e,t){if(t=Qs(t),e instanceof Xs)return e.loose===!!t.loose&&e.includePrerelease===!!t.includePrerelease?e:new Xs(e.raw,t);if(e instanceof Zs)return this.raw=e.value,this.set=[[e]],this.format(),this;if(this.options=t,this.loose=!!t.loose,this.includePrerelease=!!t.includePrerelease,this.raw=e,this.set=e.split(/\s*\|\|\s*/).map((e=>this.parseRange(e.trim()))).filter((e=>e.length)),!this.set.length)throw new TypeError(`Invalid SemVer Range: ${e}`);if(this.set.length>1){const e=this.set[0];if(this.set=this.set.filter((e=>!sl(e[0]))),0===this.set.length)this.set=[e];else if(this.set.length>1)for(const e of this.set)if(1===e.length&&ll(e[0])){this.set=[e];break}}this.format()}format(){return this.range=this.set.map((e=>e.join(" ").trim())).join("||").trim(),this.range}toString(){return this.range}parseRange(e){e=e.trim();const t=`parseRange:${Object.keys(this.options).join(",")}:${e}`,n=Ks.get(t);if(n)return n;const r=this.options.loose,i=r?nl[rl.HYPHENRANGELOOSE]:nl[rl.HYPHENRANGE];e=e.replace(i,wl(this.options.includePrerelease)),el("hyphen replace",e),e=e.replace(nl[rl.COMPARATORTRIM],il),el("comparator trim",e,nl[rl.COMPARATORTRIM]),e=(e=(e=e.replace(nl[rl.TILDETRIM],ol)).replace(nl[rl.CARETTRIM],al)).split(/\s+/).join(" ");const o=r?nl[rl.COMPARATORLOOSE]:nl[rl.COMPARATOR],a=e.split(" ").map((e=>ul(e,this.options))).join(" ").split(/\s+/).map((e=>vl(e,this.options))).filter(this.options.loose?e=>!!e.match(o):()=>!0).map((e=>new Zs(e,this.options)));a.length;const s=new Map;for(const e of a){if(sl(e))return[e];s.set(e.value,e)}s.size>1&&s.has("")&&s.delete("");const l=[...s.values()];return Ks.set(t,l),l}intersects(e,t){if(!(e instanceof Xs))throw new TypeError("a Range is required");return this.set.some((n=>cl(n,t)&&e.set.some((e=>cl(e,t)&&n.every((n=>e.every((e=>n.intersects(e,t)))))))))}test(e){if(!e)return!1;if("string"==typeof e)try{e=new tl(e,this.options)}catch(e){return!1}for(let t=0;t<this.set.length;t++)if(bl(this.set[t],e,this.options))return!0;return!1}}var Js=Xs;const Ks=new class{constructor(e){if("number"==typeof e&&(e={max:e}),e||(e={}),e.max&&("number"!=typeof e.max||e.max<0))throw new TypeError("max must be a non-negative number");this[Ps]=e.max||1/0;const t=e.length||Bs;if(this[Fs]="function"!=typeof t?Bs:t,this[$s]=e.stale||!1,e.maxAge&&"number"!=typeof e.maxAge)throw new TypeError("maxAge must be a number");this[xs]=e.maxAge||0,this[Us]=e.dispose,this[Ls]=e.noDisposeOnSet||!1,this[qs]=e.updateAgeOnGet||!1,this.reset()}set max(e){if("number"!=typeof e||e<0)throw new TypeError("max must be a non-negative number");this[Ps]=e||1/0,Vs(this)}get max(){return this[Ps]}set allowStale(e){this[$s]=!!e}get allowStale(){return this[$s]}set maxAge(e){if("number"!=typeof e)throw new TypeError("maxAge must be a non-negative number");this[xs]=e,Vs(this)}get maxAge(){return this[xs]}set lengthCalculator(e){"function"!=typeof e&&(e=Bs),e!==this[Fs]&&(this[Fs]=e,this[ks]=0,this[js].forEach((e=>{e.length=this[Fs](e.value,e.key),this[ks]+=e.length}))),Vs(this)}get lengthCalculator(){return this[Fs]}get length(){return this[ks]}get itemCount(){return this[js].length}rforEach(e,t){t=t||this;for(let n=this[js].tail;null!==n;){const r=n.prev;Ys(this,e,n,t),n=r}}forEach(e,t){t=t||this;for(let n=this[js].head;null!==n;){const r=n.next;Ys(this,e,n,t),n=r}}keys(){return this[js].toArray().map((e=>e.key))}values(){return this[js].toArray().map((e=>e.value))}reset(){this[Us]&&this[js]&&this[js].length&&this[js].forEach((e=>this[Us](e.key,e.value))),this[Ms]=new Map,this[js]=new Ds,this[ks]=0}dump(){return this[js].map((e=>!Gs(this,e)&&{k:e.key,v:e.value,e:e.now+(e.maxAge||0)})).toArray().filter((e=>e))}dumpLru(){return this[js]}set(e,t,n){if((n=n||this[xs])&&"number"!=typeof n)throw new TypeError("maxAge must be a number");const r=n?Date.now():0,i=this[Fs](t,e);if(this[Ms].has(e)){if(i>this[Ps])return zs(this,this[Ms].get(e)),!1;const o=this[Ms].get(e).value;return this[Us]&&(this[Ls]||this[Us](e,o.value)),o.now=r,o.maxAge=n,o.value=t,this[ks]+=i-o.length,o.length=i,this.get(e),Vs(this),!0}const o=new Ws(e,t,i,r,n);return o.length>this[Ps]?(this[Us]&&this[Us](e,t),!1):(this[ks]+=o.length,this[js].unshift(o),this[Ms].set(e,this[js].head),Vs(this),!0)}has(e){if(!this[Ms].has(e))return!1;const t=this[Ms].get(e).value;return!Gs(this,t)}get(e){return Hs(this,e,!0)}peek(e){return Hs(this,e,!1)}pop(){const e=this[js].tail;return e?(zs(this,e),e.value):null}del(e){zs(this,this[Ms].get(e))}load(e){this.reset();const t=Date.now();for(let n=e.length-1;n>=0;n--){const r=e[n],i=r.e||0;if(0===i)this.set(r.k,r.v);else{const e=i-t;e>0&&this.set(r.k,r.v,e)}}}prune(){this[Ms].forEach(((e,t)=>Hs(this,t,!1)))}}({max:1e3}),Qs=ba,Zs=Ol,el=va,tl=ka,{re:nl,t:rl,comparatorTrimReplace:il,tildeTrimReplace:ol,caretTrimReplace:al}=ya.exports,sl=e=>"<0.0.0-0"===e.value,ll=e=>""===e.value,cl=(e,t)=>{let n=!0;const r=e.slice();let i=r.pop();for(;n&&r.length;)n=r.every((e=>i.intersects(e,t))),i=r.pop();return n},ul=(e,t)=>(el("comp",e,t),e=fl(e,t),el("caret",e),e=hl(e,t),el("tildes",e),e=gl(e,t),el("xrange",e),e=El(e,t),el("stars",e),e),dl=e=>!e||"x"===e.toLowerCase()||"*"===e,hl=(e,t)=>e.trim().split(/\s+/).map((e=>pl(e,t))).join(" "),pl=(e,t)=>{const n=t.loose?nl[rl.TILDELOOSE]:nl[rl.TILDE];return e.replace(n,((t,n,r,i,o)=>{let a;return el("tilde",e,t,n,r,i,o),dl(n)?a="":dl(r)?a=`>=${n}.0.0 <${+n+1}.0.0-0`:dl(i)?a=`>=${n}.${r}.0 <${n}.${+r+1}.0-0`:o?(el("replaceTilde pr",o),a=`>=${n}.${r}.${i}-${o} <${n}.${+r+1}.0-0`):a=`>=${n}.${r}.${i} <${n}.${+r+1}.0-0`,el("tilde return",a),a}))},fl=(e,t)=>e.trim().split(/\s+/).map((e=>ml(e,t))).join(" "),ml=(e,t)=>{el("caret",e,t);const n=t.loose?nl[rl.CARETLOOSE]:nl[rl.CARET],r=t.includePrerelease?"-0":"";return e.replace(n,((t,n,i,o,a)=>{let s;return el("caret",e,t,n,i,o,a),dl(n)?s="":dl(i)?s=`>=${n}.0.0${r} <${+n+1}.0.0-0`:dl(o)?s="0"===n?`>=${n}.${i}.0${r} <${n}.${+i+1}.0-0`:`>=${n}.${i}.0${r} <${+n+1}.0.0-0`:a?(el("replaceCaret pr",a),s="0"===n?"0"===i?`>=${n}.${i}.${o}-${a} <${n}.${i}.${+o+1}-0`:`>=${n}.${i}.${o}-${a} <${n}.${+i+1}.0-0`:`>=${n}.${i}.${o}-${a} <${+n+1}.0.0-0`):(el("no pr"),s="0"===n?"0"===i?`>=${n}.${i}.${o}${r} <${n}.${i}.${+o+1}-0`:`>=${n}.${i}.${o}${r} <${n}.${+i+1}.0-0`:`>=${n}.${i}.${o} <${+n+1}.0.0-0`),el("caret return",s),s}))},gl=(e,t)=>(el("replaceXRanges",e,t),e.split(/\s+/).map((e=>yl(e,t))).join(" ")),yl=(e,t)=>{e=e.trim();const n=t.loose?nl[rl.XRANGELOOSE]:nl[rl.XRANGE];return e.replace(n,((n,r,i,o,a,s)=>{el("xRange",e,n,r,i,o,a,s);const l=dl(i),c=l||dl(o),u=c||dl(a),d=u;return"="===r&&d&&(r=""),s=t.includePrerelease?"-0":"",l?n=">"===r||"<"===r?"<0.0.0-0":"*":r&&d?(c&&(o=0),a=0,">"===r?(r=">=",c?(i=+i+1,o=0,a=0):(o=+o+1,a=0)):"<="===r&&(r="<",c?i=+i+1:o=+o+1),"<"===r&&(s="-0"),n=`${r+i}.${o}.${a}${s}`):c?n=`>=${i}.0.0${s} <${+i+1}.0.0-0`:u&&(n=`>=${i}.${o}.0${s} <${i}.${+o+1}.0-0`),el("xRange return",n),n}))},El=(e,t)=>(el("replaceStars",e,t),e.trim().replace(nl[rl.STAR],"")),vl=(e,t)=>(el("replaceGTE0",e,t),e.trim().replace(nl[t.includePrerelease?rl.GTE0PRE:rl.GTE0],"")),wl=e=>(t,n,r,i,o,a,s,l,c,u,d,h,p)=>`${n=dl(r)?"":dl(i)?`>=${r}.0.0${e?"-0":""}`:dl(o)?`>=${r}.${i}.0${e?"-0":""}`:a?`>=${n}`:`>=${n}${e?"-0":""}`} ${l=dl(c)?"":dl(u)?`<${+c+1}.0.0-0`:dl(d)?`<${c}.${+u+1}.0-0`:h?`<=${c}.${u}.${d}-${h}`:e?`<${c}.${u}.${+d+1}-0`:`<=${l}`}`.trim(),bl=(e,t,n)=>{for(let n=0;n<e.length;n++)if(!e[n].test(t))return!1;if(t.prerelease.length&&!n.includePrerelease){for(let n=0;n<e.length;n++)if(el(e[n].semver),e[n].semver!==Zs.ANY&&e[n].semver.prerelease.length>0){const r=e[n].semver;if(r.major===t.major&&r.minor===t.minor&&r.patch===t.patch)return!0}return!1}return!0},Al=Symbol("SemVer ANY");class Tl{static get ANY(){return Al}constructor(e,t){if(t=_l(t),e instanceof Tl){if(e.loose===!!t.loose)return e;e=e.value}Nl("comparator",e,t),this.options=t,this.loose=!!t.loose,this.parse(e),this.semver===Al?this.value="":this.value=this.operator+this.semver.version,Nl("comp",this)}parse(e){const t=this.options.loose?Sl[Il.COMPARATORLOOSE]:Sl[Il.COMPARATOR],n=e.match(t);if(!n)throw new TypeError(`Invalid comparator: ${e}`);this.operator=void 0!==n[1]?n[1]:"","="===this.operator&&(this.operator=""),n[2]?this.semver=new Rl(n[2],this.options.loose):this.semver=Al}toString(){return this.value}test(e){if(Nl("Comparator.test",e,this.options.loose),this.semver===Al||e===Al)return!0;if("string"==typeof e)try{e=new Rl(e,this.options)}catch(e){return!1}return Cl(e,this.operator,this.semver,this.options)}intersects(e,t){if(!(e instanceof Tl))throw new TypeError("a Comparator is required");if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),""===this.operator)return""===this.value||new Dl(e.value,t).test(this.value);if(""===e.operator)return""===e.value||new Dl(this.value,t).test(e.semver);const n=!(">="!==this.operator&&">"!==this.operator||">="!==e.operator&&">"!==e.operator),r=!("<="!==this.operator&&"<"!==this.operator||"<="!==e.operator&&"<"!==e.operator),i=this.semver.version===e.semver.version,o=!(">="!==this.operator&&"<="!==this.operator||">="!==e.operator&&"<="!==e.operator),a=Cl(this.semver,"<",e.semver,t)&&(">="===this.operator||">"===this.operator)&&("<="===e.operator||"<"===e.operator),s=Cl(this.semver,">",e.semver,t)&&("<="===this.operator||"<"===this.operator)&&(">="===e.operator||">"===e.operator);return n||r||i&&o||a||s}}var Ol=Tl;const _l=ba,{re:Sl,t:Il}=ya.exports,Cl=bs,Nl=va,Rl=ka,Dl=Js,Pl=Js;var kl=(e,t,n)=>{try{t=new Pl(t,n)}catch(e){return!1}return t.test(e)};const Fl=Js;const $l=ka,xl=Js;const Ul=ka,Ll=Js;const jl=ka,Ml=Js,ql=as;const Bl=Js;const Hl=ka,Gl=Ol,{ANY:Vl}=Gl,zl=Js,Wl=kl,Yl=as,Xl=ls,Jl=fs,Kl=hs;var Ql=(e,t,n,r)=>{let i,o,a,s,l;switch(e=new Hl(e,r),t=new zl(t,r),n){case">":i=Yl,o=Jl,a=Xl,s=">",l=">=";break;case"<":i=Xl,o=Kl,a=Yl,s="<",l="<=";break;default:throw new TypeError('Must provide a hilo val of "<" or ">"')}if(Wl(e,t,r))return!1;for(let n=0;n<t.set.length;++n){const c=t.set[n];let u=null,d=null;if(c.forEach((e=>{e.semver===Vl&&(e=new Gl(">=0.0.0")),u=u||e,d=d||e,i(e.semver,u.semver,r)?u=e:a(e.semver,d.semver,r)&&(d=e)})),u.operator===s||u.operator===l)return!1;if((!d.operator||d.operator===s)&&o(e,d.semver))return!1;if(d.operator===l&&a(e,d.semver))return!1}return!0};const Zl=Ql;const ec=Ql;const tc=Js;const nc=kl,rc=Ga,ic=Js,oc=Ol,{ANY:ac}=oc,sc=kl,lc=Ga,cc=(e,t,n)=>{if(e===t)return!0;if(1===e.length&&e[0].semver===ac){if(1===t.length&&t[0].semver===ac)return!0;e=n.includePrerelease?[new oc(">=0.0.0-0")]:[new oc(">=0.0.0")]}if(1===t.length&&t[0].semver===ac){if(n.includePrerelease)return!0;t=[new oc(">=0.0.0")]}const r=new Set;let i,o,a,s,l,c,u;for(const t of e)">"===t.operator||">="===t.operator?i=uc(i,t,n):"<"===t.operator||"<="===t.operator?o=dc(o,t,n):r.add(t.semver);if(r.size>1)return null;if(i&&o){if(a=lc(i.semver,o.semver,n),a>0)return null;if(0===a&&(">="!==i.operator||"<="!==o.operator))return null}for(const e of r){if(i&&!sc(e,String(i),n))return null;if(o&&!sc(e,String(o),n))return null;for(const r of t)if(!sc(e,String(r),n))return!1;return!0}let d=!(!o||n.includePrerelease||!o.semver.prerelease.length)&&o.semver,h=!(!i||n.includePrerelease||!i.semver.prerelease.length)&&i.semver;d&&1===d.prerelease.length&&"<"===o.operator&&0===d.prerelease[0]&&(d=!1);for(const e of t){if(u=u||">"===e.operator||">="===e.operator,c=c||"<"===e.operator||"<="===e.operator,i)if(h&&e.semver.prerelease&&e.semver.prerelease.length&&e.semver.major===h.major&&e.semver.minor===h.minor&&e.semver.patch===h.patch&&(h=!1),">"===e.operator||">="===e.operator){if(s=uc(i,e,n),s===e&&s!==i)return!1}else if(">="===i.operator&&!sc(i.semver,String(e),n))return!1;if(o)if(d&&e.semver.prerelease&&e.semver.prerelease.length&&e.semver.major===d.major&&e.semver.minor===d.minor&&e.semver.patch===d.patch&&(d=!1),"<"===e.operator||"<="===e.operator){if(l=dc(o,e,n),l===e&&l!==o)return!1}else if("<="===o.operator&&!sc(o.semver,String(e),n))return!1;if(!e.operator&&(o||i)&&0!==a)return!1}return!(i&&c&&!o&&0!==a||o&&u&&!i&&0!==a||h||d)},uc=(e,t,n)=>{if(!e)return t;const r=lc(e.semver,t.semver,n);return r>0?e:r<0||">"===t.operator&&">="===e.operator?t:e},dc=(e,t,n)=>{if(!e)return t;const r=lc(e.semver,t.semver,n);return r<0?e:r>0||"<"===t.operator&&"<="===e.operator?t:e};const hc=ya.exports;var pc={re:hc.re,src:hc.src,tokens:hc.t,SEMVER_SPEC_VERSION:Ea.SEMVER_SPEC_VERSION,SemVer:ka,compareIdentifiers:Oa.compareIdentifiers,rcompareIdentifiers:Oa.rcompareIdentifiers,parse:ja,valid:(e,t)=>{const n=Ma(e,t);return n?n.version:null},clean:(e,t)=>{const n=qa(e.trim().replace(/^[=v]+/,""),t);return n?n.version:null},inc:(e,t,n,r)=>{"string"==typeof n&&(r=n,n=void 0);try{return new Ba(e,n).inc(t,r).version}catch(e){return null}},diff:(e,t)=>{if(Ya(e,t))return null;{const n=Wa(e),r=Wa(t),i=n.prerelease.length||r.prerelease.length,o=i?"pre":"",a=i?"prerelease":"";for(const e in n)if(("major"===e||"minor"===e||"patch"===e)&&n[e]!==r[e])return o+e;return a}},major:(e,t)=>new Xa(e,t).major,minor:(e,t)=>new Ja(e,t).minor,patch:(e,t)=>new Ka(e,t).patch,prerelease:(e,t)=>{const n=Qa(e,t);return n&&n.prerelease.length?n.prerelease:null},compare:Ga,rcompare:(e,t,n)=>Za(t,e,n),compareLoose:(e,t)=>es(e,t,!0),compareBuild:ns,sort:(e,t)=>e.sort(((e,n)=>rs(e,n,t))),rsort:(e,t)=>e.sort(((e,n)=>is(n,e,t))),gt:as,lt:ls,eq:za,neq:us,gte:hs,lte:fs,cmp:bs,coerce:(e,t)=>{if(e instanceof As)return e;if("number"==typeof e&&(e=String(e)),"string"!=typeof e)return null;let n=null;if((t=t||{}).rtl){let t;for(;(t=Os[_s.COERCERTL].exec(e))&&(!n||n.index+n[0].length!==e.length);)n&&t.index+t[0].length===n.index+n[0].length||(n=t),Os[_s.COERCERTL].lastIndex=t.index+t[1].length+t[2].length;Os[_s.COERCERTL].lastIndex=-1}else n=e.match(Os[_s.COERCE]);return null===n?null:Ts(`${n[2]}.${n[3]||"0"}.${n[4]||"0"}`,t)},Comparator:Ol,Range:Js,satisfies:kl,toComparators:(e,t)=>new Fl(e,t).set.map((e=>e.map((e=>e.value)).join(" ").trim().split(" "))),maxSatisfying:(e,t,n)=>{let r=null,i=null,o=null;try{o=new xl(t,n)}catch(e){return null}return e.forEach((e=>{o.test(e)&&(r&&-1!==i.compare(e)||(r=e,i=new $l(r,n)))})),r},minSatisfying:(e,t,n)=>{let r=null,i=null,o=null;try{o=new Ll(t,n)}catch(e){return null}return e.forEach((e=>{o.test(e)&&(r&&1!==i.compare(e)||(r=e,i=new Ul(r,n)))})),r},minVersion:(e,t)=>{e=new Ml(e,t);let n=new jl("0.0.0");if(e.test(n))return n;if(n=new jl("0.0.0-0"),e.test(n))return n;n=null;for(let t=0;t<e.set.length;++t){const r=e.set[t];let i=null;r.forEach((e=>{const t=new jl(e.semver.version);switch(e.operator){case">":0===t.prerelease.length?t.patch++:t.prerelease.push(0),t.raw=t.format();case"":case">=":i&&!ql(t,i)||(i=t);break;case"<":case"<=":break;default:throw new Error(`Unexpected operation: ${e.operator}`)}})),!i||n&&!ql(n,i)||(n=i)}return n&&e.test(n)?n:null},validRange:(e,t)=>{try{return new Bl(e,t).range||"*"}catch(e){return null}},outside:Ql,gtr:(e,t,n)=>Zl(e,t,">",n),ltr:(e,t,n)=>ec(e,t,"<",n),intersects:(e,t,n)=>(e=new tc(e,n),t=new tc(t,n),e.intersects(t)),simplifyRange:(e,t,n)=>{const r=[];let i=null,o=null;const a=e.sort(((e,t)=>rc(e,t,n)));for(const e of a)nc(e,t,n)?(o=e,i||(i=e)):(o&&r.push([i,o]),o=null,i=null);i&&r.push([i,null]);const s=[];for(const[e,t]of r)e===t?s.push(e):t||e!==a[0]?t?e===a[0]?s.push(`<=${t}`):s.push(`${e} - ${t}`):s.push(`>=${e}`):s.push("*");const l=s.join(" || "),c="string"==typeof t.raw?t.raw:String(t);return l.length<c.length?l:t},subset:(e,t,n={})=>{if(e===t)return!0;e=new ic(e,n),t=new ic(t,n);let r=!1;e:for(const i of e.set){for(const e of t.set){const t=cc(i,e,n);if(r=r||null!==t,t)continue e}if(r)return!1}return!0}},fc={},mc={exports:{}};!function(e,t){var n="__lodash_hash_undefined__",r=9007199254740991,i="[object Arguments]",o="[object Array]",a="[object Boolean]",s="[object Date]",l="[object Error]",c="[object Function]",u="[object Map]",d="[object Number]",h="[object Object]",p="[object Promise]",f="[object RegExp]",m="[object Set]",g="[object String]",y="[object WeakMap]",E="[object ArrayBuffer]",v="[object DataView]",w=/^\[object .+?Constructor\]$/,b=/^(?:0|[1-9]\d*)$/,A={};A["[object Float32Array]"]=A["[object Float64Array]"]=A["[object Int8Array]"]=A["[object Int16Array]"]=A["[object Int32Array]"]=A["[object Uint8Array]"]=A["[object Uint8ClampedArray]"]=A["[object Uint16Array]"]=A["[object Uint32Array]"]=!0,A[i]=A[o]=A[E]=A[a]=A[v]=A[s]=A[l]=A[c]=A[u]=A[d]=A[h]=A[f]=A[m]=A[g]=A[y]=!1;var T="object"==typeof H&&H&&H.Object===Object&&H,O="object"==typeof self&&self&&self.Object===Object&&self,_=T||O||Function("return this")(),S=t&&!t.nodeType&&t,I=S&&e&&!e.nodeType&&e,C=I&&I.exports===S,N=C&&T.process,R=function(){try{return N&&N.binding&&N.binding("util")}catch(e){}}(),D=R&&R.isTypedArray;function P(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}function k(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}function F(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}var $,x,U,L=Array.prototype,j=Function.prototype,M=Object.prototype,q=_["__core-js_shared__"],B=j.toString,G=M.hasOwnProperty,V=($=/[^.]+$/.exec(q&&q.keys&&q.keys.IE_PROTO||""))?"Symbol(src)_1."+$:"",z=M.toString,W=RegExp("^"+B.call(G).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Y=C?_.Buffer:void 0,X=_.Symbol,J=_.Uint8Array,K=M.propertyIsEnumerable,Q=L.splice,Z=X?X.toStringTag:void 0,ee=Object.getOwnPropertySymbols,te=Y?Y.isBuffer:void 0,ne=(x=Object.keys,U=Object,function(e){return x(U(e))}),re=Ce(_,"DataView"),ie=Ce(_,"Map"),oe=Ce(_,"Promise"),ae=Ce(_,"Set"),se=Ce(_,"WeakMap"),le=Ce(Object,"create"),ce=Pe(re),ue=Pe(ie),de=Pe(oe),he=Pe(ae),pe=Pe(se),fe=X?X.prototype:void 0,me=fe?fe.valueOf:void 0;function ge(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function ye(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Ee(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function ve(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new Ee;++t<n;)this.add(e[t])}function we(e){var t=this.__data__=new ye(e);this.size=t.size}function be(e,t){for(var n=e.length;n--;)if(ke(e[n][0],t))return n;return-1}function Ae(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":Z&&Z in Object(e)?function(e){var t=G.call(e,Z),n=e[Z];try{e[Z]=void 0;var r=!0}catch(e){}var i=z.call(e);return r&&(t?e[Z]=n:delete e[Z]),i}(e):function(e){return z.call(e)}(e)}function Te(e){return Me(e)&&Ae(e)==i}function Oe(e,t,n,r,c){return e===t||(null==e||null==t||!Me(e)&&!Me(t)?e!=e&&t!=t:function(e,t,n,r,c,p){var y=$e(e),w=$e(t),b=y?o:Re(e),A=w?o:Re(t),T=(b=b==i?h:b)==h,O=(A=A==i?h:A)==h,_=b==A;if(_&&xe(e)){if(!xe(t))return!1;y=!0,T=!1}if(_&&!T)return p||(p=new we),y||qe(e)?_e(e,t,n,r,c,p):function(e,t,n,r,i,o,c){switch(n){case v:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case E:return!(e.byteLength!=t.byteLength||!o(new J(e),new J(t)));case a:case s:case d:return ke(+e,+t);case l:return e.name==t.name&&e.message==t.message;case f:case g:return e==t+"";case u:var h=k;case m:var p=1&r;if(h||(h=F),e.size!=t.size&&!p)return!1;var y=c.get(e);if(y)return y==t;r|=2,c.set(e,t);var w=_e(h(e),h(t),r,i,o,c);return c.delete(e),w;case"[object Symbol]":if(me)return me.call(e)==me.call(t)}return!1}(e,t,b,n,r,c,p);if(!(1&n)){var S=T&&G.call(e,"__wrapped__"),I=O&&G.call(t,"__wrapped__");if(S||I){var C=S?e.value():e,N=I?t.value():t;return p||(p=new we),c(C,N,n,r,p)}}return!!_&&(p||(p=new we),function(e,t,n,r,i,o){var a=1&n,s=Se(e),l=s.length;if(l!=Se(t).length&&!a)return!1;for(var c=l;c--;){var u=s[c];if(!(a?u in t:G.call(t,u)))return!1}var d=o.get(e);if(d&&o.get(t))return d==t;var h=!0;o.set(e,t),o.set(t,e);for(var p=a;++c<l;){var f=e[u=s[c]],m=t[u];if(r)var g=a?r(m,f,u,t,e,o):r(f,m,u,e,t,o);if(!(void 0===g?f===m||i(f,m,n,r,o):g)){h=!1;break}p||(p="constructor"==u)}if(h&&!p){var y=e.constructor,E=t.constructor;y==E||!("constructor"in e)||!("constructor"in t)||"function"==typeof y&&y instanceof y&&"function"==typeof E&&E instanceof E||(h=!1)}return o.delete(e),o.delete(t),h}(e,t,n,r,c,p))}(e,t,n,r,Oe,c))}function _e(e,t,n,r,i,o){var a=1&n,s=e.length,l=t.length;if(s!=l&&!(a&&l>s))return!1;var c=o.get(e);if(c&&o.get(t))return c==t;var u=-1,d=!0,h=2&n?new ve:void 0;for(o.set(e,t),o.set(t,e);++u<s;){var p=e[u],f=t[u];if(r)var m=a?r(f,p,u,t,e,o):r(p,f,u,e,t,o);if(void 0!==m){if(m)continue;d=!1;break}if(h){if(!P(t,(function(e,t){if(a=t,!h.has(a)&&(p===e||i(p,e,n,r,o)))return h.push(t);var a}))){d=!1;break}}else if(p!==f&&!i(p,f,n,r,o)){d=!1;break}}return o.delete(e),o.delete(t),d}function Se(e){return function(e,t,n){var r=t(e);return $e(e)?r:function(e,t){for(var n=-1,r=t.length,i=e.length;++n<r;)e[i+n]=t[n];return e}(r,n(e))}(e,Be,Ne)}function Ie(e,t){var n,r,i=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?i["string"==typeof t?"string":"hash"]:i.map}function Ce(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return function(e){return!(!je(e)||function(e){return!!V&&V in e}(e))&&(Ue(e)?W:w).test(Pe(e))}(n)?n:void 0}ge.prototype.clear=function(){this.__data__=le?le(null):{},this.size=0},ge.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},ge.prototype.get=function(e){var t=this.__data__;if(le){var r=t[e];return r===n?void 0:r}return G.call(t,e)?t[e]:void 0},ge.prototype.has=function(e){var t=this.__data__;return le?void 0!==t[e]:G.call(t,e)},ge.prototype.set=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=le&&void 0===t?n:t,this},ye.prototype.clear=function(){this.__data__=[],this.size=0},ye.prototype.delete=function(e){var t=this.__data__,n=be(t,e);return!(n<0||(n==t.length-1?t.pop():Q.call(t,n,1),--this.size,0))},ye.prototype.get=function(e){var t=this.__data__,n=be(t,e);return n<0?void 0:t[n][1]},ye.prototype.has=function(e){return be(this.__data__,e)>-1},ye.prototype.set=function(e,t){var n=this.__data__,r=be(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},Ee.prototype.clear=function(){this.size=0,this.__data__={hash:new ge,map:new(ie||ye),string:new ge}},Ee.prototype.delete=function(e){var t=Ie(this,e).delete(e);return this.size-=t?1:0,t},Ee.prototype.get=function(e){return Ie(this,e).get(e)},Ee.prototype.has=function(e){return Ie(this,e).has(e)},Ee.prototype.set=function(e,t){var n=Ie(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},ve.prototype.add=ve.prototype.push=function(e){return this.__data__.set(e,n),this},ve.prototype.has=function(e){return this.__data__.has(e)},we.prototype.clear=function(){this.__data__=new ye,this.size=0},we.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},we.prototype.get=function(e){return this.__data__.get(e)},we.prototype.has=function(e){return this.__data__.has(e)},we.prototype.set=function(e,t){var n=this.__data__;if(n instanceof ye){var r=n.__data__;if(!ie||r.length<199)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new Ee(r)}return n.set(e,t),this.size=n.size,this};var Ne=ee?function(e){return null==e?[]:(e=Object(e),function(t,n){for(var r=-1,i=null==t?0:t.length,o=0,a=[];++r<i;){var s=t[r];l=s,K.call(e,l)&&(a[o++]=s)}var l;return a}(ee(e)))}:function(){return[]},Re=Ae;function De(e,t){return!!(t=t??r)&&("number"==typeof e||b.test(e))&&e>-1&&e%1==0&&e<t}function Pe(e){if(null!=e){try{return B.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function ke(e,t){return e===t||e!=e&&t!=t}(re&&Re(new re(new ArrayBuffer(1)))!=v||ie&&Re(new ie)!=u||oe&&Re(oe.resolve())!=p||ae&&Re(new ae)!=m||se&&Re(new se)!=y)&&(Re=function(e){var t=Ae(e),n=t==h?e.constructor:void 0,r=n?Pe(n):"";if(r)switch(r){case ce:return v;case ue:return u;case de:return p;case he:return m;case pe:return y}return t});var Fe=Te(function(){return arguments}())?Te:function(e){return Me(e)&&G.call(e,"callee")&&!K.call(e,"callee")},$e=Array.isArray,xe=te||function(){return!1};function Ue(e){if(!je(e))return!1;var t=Ae(e);return t==c||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}function Le(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=r}function je(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Me(e){return null!=e&&"object"==typeof e}var qe=D?function(e){return function(t){return e(t)}}(D):function(e){return Me(e)&&Le(e.length)&&!!A[Ae(e)]};function Be(e){return null!=(t=e)&&Le(t.length)&&!Ue(t)?function(e,t){var n=$e(e),r=!n&&Fe(e),i=!n&&!r&&xe(e),o=!n&&!r&&!i&&qe(e),a=n||r||i||o,s=a?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],l=s.length;for(var c in e)!t&&!G.call(e,c)||a&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||De(c,l))||s.push(c);return s}(e):function(e){if(n=(t=e)&&t.constructor,t!==("function"==typeof n&&n.prototype||M))return ne(e);var t,n,r=[];for(var i in Object(e))G.call(e,i)&&"constructor"!=i&&r.push(i);return r}(e);var t}e.exports=function(e,t){return Oe(e,t)}}(mc,mc.exports),Object.defineProperty(fc,"__esModule",{value:!0}),fc.createTempUpdateFile=fc.DownloadedUpdateHelper=void 0;const gc=C.default,yc=N.default,Ec=mc.exports,vc=Qr,wc=x.default;fc.DownloadedUpdateHelper=class{constructor(e){this.cacheDir=e,this._file=null,this._packageFile=null,this.versionInfo=null,this.fileInfo=null,this._downloadedFileInfo=null}get downloadedFileInfo(){return this._downloadedFileInfo}get file(){return this._file}get packageFile(){return this._packageFile}get cacheDirForPendingUpdate(){return wc.join(this.cacheDir,"pending")}async validateDownloadedPath(e,t,n,r){if(null!=this.versionInfo&&this.file===e&&null!=this.fileInfo)return Ec(this.versionInfo,t)&&Ec(this.fileInfo.info,n.info)&&await vc.pathExists(e)?e:null;const i=await this.getValidCachedUpdateFile(n,r);return null===i?null:(r.info(`Update has already been downloaded to ${e}).`),this._file=i,i)}async setDownloadedFile(e,t,n,r,i,o){this._file=e,this._packageFile=t,this.versionInfo=n,this.fileInfo=r,this._downloadedFileInfo={fileName:i,sha512:r.info.sha512,isAdminRightsRequired:!0===r.info.isAdminRightsRequired},o&&await vc.outputJson(this.getUpdateInfoFile(),this._downloadedFileInfo)}async clear(){this._file=null,this._packageFile=null,this.versionInfo=null,this.fileInfo=null,await this.cleanCacheDirForPendingUpdate()}async cleanCacheDirForPendingUpdate(){try{await vc.emptyDir(this.cacheDirForPendingUpdate)}catch(e){}}async getValidCachedUpdateFile(e,t){var n;const r=this.getUpdateInfoFile();if(!await vc.pathExists(r))return null;let i;try{i=await vc.readJson(r)}catch(e){let n="No cached update info available";return"ENOENT"!==e.code&&(await this.cleanCacheDirForPendingUpdate(),n+=` (error on read: ${e.message})`),t.info(n),null}if(null===(n=null!==(null==i?void 0:i.fileName))||void 0===n||!n)return t.warn("Cached update info is corrupted: no fileName, directory for cached update will be cleaned"),await this.cleanCacheDirForPendingUpdate(),null;if(e.info.sha512!==i.sha512)return t.info(`Cached update sha512 checksum doesn't match the latest available update. New update must be downloaded. Cached: ${i.sha512}, expected: ${e.info.sha512}. Directory for cached update will be cleaned`),await this.cleanCacheDirForPendingUpdate(),null;const o=wc.join(this.cacheDirForPendingUpdate,i.fileName);if(!await vc.pathExists(o))return t.info("Cached update file doesn't exist"),null;const a=await function(e,t="sha512",n="base64",r){return new Promise(((i,o)=>{const a=gc.createHash(t);a.on("error",o).setEncoding(n),yc.createReadStream(e,l(s({},r),{highWaterMark:1048576})).on("error",o).on("end",(()=>{a.end(),i(a.read())})).pipe(a,{end:!1})}))}(o);return e.info.sha512!==a?(t.warn(`Sha512 checksum doesn't match the latest available update. New update must be downloaded. Cached: ${a}, expected: ${e.info.sha512}`),await this.cleanCacheDirForPendingUpdate(),null):(this._downloadedFileInfo=i,o)}getUpdateInfoFile(){return wc.join(this.cacheDirForPendingUpdate,"update-info.json")}},fc.createTempUpdateFile=async function(e,t,n){let r=0,i=wc.join(t,e);for(let o=0;o<3;o++)try{return await vc.unlink(i),i}catch(o){if("ENOENT"===o.code)return i;n.warn(`Error on remove temp update file: ${o}`),i=wc.join(t,`${r++}-${e}`)}return i};var bc={},Ac={};Object.defineProperty(Ac,"__esModule",{value:!0}),Ac.getAppCacheDir=void 0;const Tc=x.default,Oc=L.default;Ac.getAppCacheDir=function(){const e=Oc.homedir();let t;return t="win32"===process.platform?Tc.join(e,"AppData","Local"):"darwin"===process.platform?Tc.join(e,"Library","Application Support","Caches"):Tc.join(e,".cache"),t},Object.defineProperty(bc,"__esModule",{value:!0}),bc.ElectronAppAdapter=void 0;const _c=x.default,Sc=Ac;bc.ElectronAppAdapter=class{constructor(e=j.default.app){this.app=e}whenReady(){return this.app.whenReady()}get version(){return this.app.getVersion()}get name(){return this.app.getName()}get isPackaged(){return!0===this.app.isPackaged}get appUpdateConfigPath(){return this.isPackaged?_c.join(process.resourcesPath,"app-update.yml"):_c.join(this.app.getAppPath(),"dev-app-update.yml")}get userDataPath(){return this.app.getPath("userData")}get baseCachePath(){return Sc.getAppCacheDir()}quit(){this.app.quit()}onQuit(e){this.app.once("quit",((t,n)=>e(n)))}};var Ic={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.ElectronHttpExecutor=e.getNetSession=e.NET_SESSION_NAME=void 0;const t=z;function n(){return j.default.session.fromPartition(e.NET_SESSION_NAME,{cache:!1})}e.NET_SESSION_NAME="electron-updater",e.getNetSession=n;class r extends t.HttpExecutor{constructor(e){super(),this.proxyLoginCallback=e,this.cachedSession=null}async download(e,n,r){return await r.cancellationToken.createPromise(((i,o,a)=>{const s={headers:r.headers||void 0,redirect:"manual"};t.configureRequestUrl(e,s),t.configureRequestOptions(s),this.doDownload(s,{destination:n,options:r,onCancel:a,callback:e=>{null==e?i(n):o(e)},responseHandler:null},0)}))}createRequest(e,t){e.headers&&e.headers.Host&&(e.host=e.headers.Host,delete e.headers.Host),null==this.cachedSession&&(this.cachedSession=n());const r=j.default.net.request(l(s({},e),{session:this.cachedSession}));return r.on("response",t),null!=this.proxyLoginCallback&&r.on("login",this.proxyLoginCallback),r}addRedirectHandlers(e,n,r,i,o){e.on("redirect",((a,s,l)=>{e.abort(),i>this.maxRedirects?r(this.createMaxRedirectError()):o(t.HttpExecutor.prepareRedirectUrlOptions(l,n))}))}}e.ElectronHttpExecutor=r}(Ic);var Cc={},Nc={},Rc=/[\\^$.*+?()[\]{}|]/g,Dc=RegExp(Rc.source),Pc="object"==typeof H&&H&&H.Object===Object&&H,kc="object"==typeof self&&self&&self.Object===Object&&self,Fc=Pc||kc||Function("return this")(),$c=Object.prototype.toString,xc=Fc.Symbol,Uc=xc?xc.prototype:void 0,Lc=Uc?Uc.toString:void 0;Object.defineProperty(Nc,"__esModule",{value:!0}),Nc.blockmapFiles=Nc.getChannelFilename=Nc.newUrlFromBase=Nc.newBaseUrl=void 0;const jc=D.default,Mc=function(e){var t;return(e=null==(t=e)?"":function(e){if("string"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==$c.call(e)}(e))return Lc?Lc.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}(t))&&Dc.test(e)?e.replace(Rc,"\\$&"):e};function qc(e,t,n=!1){const r=new jc.URL(e,t),i=t.search;return null!=i&&0!==i.length?r.search=i:n&&(r.search=`noCache=${Date.now().toString(32)}`),r}Nc.newBaseUrl=function(e){const t=new jc.URL(e);return t.pathname.endsWith("/")||(t.pathname+="/"),t},Nc.newUrlFromBase=qc,Nc.getChannelFilename=function(e){return`${e}.yml`},Nc.blockmapFiles=function(e,t,n){const r=qc(`${e.pathname}.blockmap`,e);return[qc(`${e.pathname.replace(new RegExp(Mc(n),"g"),t)}.blockmap`,e),r]};var Bc={};Object.defineProperty(Bc,"__esModule",{value:!0}),Bc.resolveFiles=Bc.getFileList=Bc.parseUpdateInfo=Bc.findFile=Bc.Provider=void 0;const Hc=z,Gc=Zr,Vc=Nc;function zc(e){const t=e.files;if(null!=t&&t.length>0)return t;if(null!=e.path)return[{url:e.path,sha2:e.sha2,sha512:e.sha512}];throw Hc.newError(`No files provided: ${Hc.safeStringifyJson(e)}`,"ERR_UPDATER_NO_FILES_PROVIDED")}Bc.Provider=class{constructor(e){this.runtimeOptions=e,this.requestHeaders=null,this.executor=e.executor}get isUseMultipleRangeRequest(){return!1!==this.runtimeOptions.isUseMultipleRangeRequest}getChannelFilePrefix(){if("linux"===this.runtimeOptions.platform){const e=process.arch;return"-linux"+("x64"===e?"":`-${e}`)}return"darwin"===this.runtimeOptions.platform?"-mac":""}getDefaultChannelName(){return this.getCustomChannelName("latest")}getCustomChannelName(e){return`${e}${this.getChannelFilePrefix()}`}get fileExtraDownloadHeaders(){return null}setRequestHeaders(e){this.requestHeaders=e}httpRequest(e,t,n){return this.executor.request(this.createRequestOptions(e,t),n)}createRequestOptions(e,t){const n={};return null==this.requestHeaders?null!=t&&(n.headers=t):n.headers=null==t?this.requestHeaders:s(s({},this.requestHeaders),t),Hc.configureRequestUrl(e,n),n}},Bc.findFile=function(e,t,n){if(0===e.length)throw Hc.newError("No files provided","ERR_UPDATER_NO_FILES_PROVIDED");const r=e.find((e=>e.url.pathname.toLowerCase().endsWith(`.${t}`)));return null!=r?r:null==n?e[0]:e.find((e=>!n.some((t=>e.url.pathname.toLowerCase().endsWith(`.${t}`)))))},Bc.parseUpdateInfo=function(e,t,n){if(null==e)throw Hc.newError(`Cannot parse update info from ${t} in the latest release artifacts (${n}): rawData: null`,"ERR_UPDATER_INVALID_UPDATE_INFO");let r;try{r=Gc.load(e)}catch(r){throw Hc.newError(`Cannot parse update info from ${t} in the latest release artifacts (${n}): ${r.stack||r.message}, rawData: ${e}`,"ERR_UPDATER_INVALID_UPDATE_INFO")}return r},Bc.getFileList=zc,Bc.resolveFiles=function(e,t,n=(e=>e)){const r=zc(e).map((e=>{if(null==e.sha2&&null==e.sha512)throw Hc.newError(`Update info doesn't contain nor sha256 neither sha512 checksum: ${Hc.safeStringifyJson(e)}`,"ERR_UPDATER_NO_CHECKSUM");return{url:Vc.newUrlFromBase(n(e.url),t),info:e}})),i=e.packages,o=null==i?null:i[process.arch]||i.ia32;return null!=o&&(r[0].packageInfo=l(s({},o),{path:Vc.newUrlFromBase(n(o.path),t).href})),r},Object.defineProperty(Cc,"__esModule",{value:!0}),Cc.GenericProvider=void 0;const Wc=z,Yc=Nc,Xc=Bc;class Jc extends Xc.Provider{constructor(e,t,n){super(n),this.configuration=e,this.updater=t,this.baseUrl=Yc.newBaseUrl(this.configuration.url)}get channel(){const e=this.updater.channel||this.configuration.channel;return null==e?this.getDefaultChannelName():this.getCustomChannelName(e)}async getLatestVersion(){const e=Yc.getChannelFilename(this.channel),t=Yc.newUrlFromBase(e,this.baseUrl,this.updater.isAddNoCacheQuery);for(let n=0;;n++)try{return Xc.parseUpdateInfo(await this.httpRequest(t),e,t)}catch(t){if(t instanceof Wc.HttpError&&404===t.statusCode)throw Wc.newError(`Cannot find channel "${e}" update info: ${t.stack||t.message}`,"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND");if("ECONNREFUSED"===t.code&&n<3){await new Promise(((e,t)=>{try{setTimeout(e,1e3*n)}catch(e){t(e)}}));continue}throw t}}resolveFiles(e){return Xc.resolveFiles(e,this.baseUrl)}}Cc.GenericProvider=Jc;var Kc={},Qc={},Zc={};Object.defineProperty(Zc,"__esModule",{value:!0}),Zc.BintrayClient=void 0;const eu=K;Zc.BintrayClient=class{constructor(e,t,n,r){if(this.httpExecutor=t,this.cancellationToken=n,this.requestHeaders=null,null==e.owner)throw new Error("owner is not specified");if(null==e.package)throw new Error("package is not specified");this.repo=e.repo||"generic",this.packageName=e.package,this.owner=e.owner,this.user=e.user||e.owner,this.component=e.component||null,this.distribution=e.distribution||"stable",this.auth=null==r?null:`Basic ${Buffer.from(`${this.user}:${r}`).toString("base64")}`,this.basePath=`/packages/${this.owner}/${this.repo}/${this.packageName}`}setRequestHeaders(e){this.requestHeaders=e}bintrayRequest(e,t,n=null,r,i){return eu.parseJson(this.httpExecutor.request(eu.configureRequestOptions({hostname:"api.bintray.com",path:e,headers:this.requestHeaders||void 0},t,i),r,n))}getVersion(e){return this.bintrayRequest(`${this.basePath}/versions/${e}`,this.auth,null,this.cancellationToken)}getVersionFiles(e){return this.bintrayRequest(`${this.basePath}/versions/${e}/files`,this.auth,null,this.cancellationToken)}createVersion(e){return this.bintrayRequest(`${this.basePath}/versions`,this.auth,{name:e},this.cancellationToken)}deleteVersion(e){return this.bintrayRequest(`${this.basePath}/versions/${e}`,this.auth,null,this.cancellationToken,"DELETE")}},Object.defineProperty(Qc,"__esModule",{value:!0}),Qc.BintrayProvider=void 0;const tu=z,nu=Zc,ru=D.default,iu=Nc,ou=Bc;class au extends ou.Provider{constructor(e,t){super(t),this.client=new nu.BintrayClient(e,t.executor,new tu.CancellationToken),this.baseUrl=iu.newBaseUrl(`https://dl.bintray.com/${this.client.owner}/${this.client.repo}`)}setRequestHeaders(e){super.setRequestHeaders(e),this.client.setRequestHeaders(e)}async getLatestVersion(){try{const e=await this.client.getVersion("_latest"),t=iu.getChannelFilename(this.getDefaultChannelName()),n=await this.client.getVersionFiles(e.name),r=n.find((e=>e.name.endsWith(`_${t}`)||e.name.endsWith(`-${t}`)));if(null==r)throw tu.newError(`Cannot find channel file "${t}", existing files:\n${n.map((e=>JSON.stringify(e,null,2))).join(",\n")}`,"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND");const i=new ru.URL(`https://dl.bintray.com/${this.client.owner}/${this.client.repo}/${r.name}`);return ou.parseUpdateInfo(await this.httpRequest(i),t,i)}catch(e){if("statusCode"in e&&404===e.statusCode)throw tu.newError(`No latest version, please ensure that user, package and repository correctly configured. Or at least one version is published. ${e.stack||e.message}`,"ERR_UPDATER_LATEST_VERSION_NOT_FOUND");throw e}}resolveFiles(e){return ou.resolveFiles(e,this.baseUrl)}}Qc.BintrayProvider=au;var su={};Object.defineProperty(su,"__esModule",{value:!0}),su.computeReleaseNotes=su.GitHubProvider=su.BaseGitHubProvider=void 0;const lu=z,cu=pc,uu=D.default,du=Nc,hu=Bc,pu=/\/tag\/([^/]+)$/;class fu extends hu.Provider{constructor(e,t,n){super(l(s({},n),{isUseMultipleRangeRequest:!1})),this.options=e,this.baseUrl=du.newBaseUrl(lu.githubUrl(e,t));const r="github.com"===t?"api.github.com":t;this.baseApiUrl=du.newBaseUrl(lu.githubUrl(e,r))}computeGithubBasePath(e){const t=this.options.host;return null!=t&&"github.com"!==t&&"api.github.com"!==t?`/api/v3${e}`:e}}function mu(e){const t=e.elementValueOrEmpty("content");return"No content."===t?"":t}function gu(e,t,n,r){if(!t)return mu(r);const i=[];for(const t of n.getElements("entry")){const n=/\/tag\/v?([^/]+)$/.exec(t.element("link").attribute("href"))[1];cu.lt(e,n)&&i.push({version:n,note:mu(t)})}return i.sort(((e,t)=>cu.rcompare(e.version,t.version)))}su.BaseGitHubProvider=fu,su.GitHubProvider=class extends fu{constructor(e,t,n){super(e,"github.com",n),this.options=e,this.updater=t}async getLatestVersion(){const e=new lu.CancellationToken,t=await this.httpRequest(du.newUrlFromBase(`${this.basePath}.atom`,this.baseUrl),{accept:"application/xml, application/atom+xml, text/xml, */*"},e),n=lu.parseXml(t);let r,i=n.element("entry",!1,"No published versions on GitHub");try{if(this.updater.allowPrerelease)r=pu.exec(i.element("link").attribute("href"))[1];else{r=await this.getLatestTagName(e);for(const e of n.getElements("entry"))if(pu.exec(e.element("link").attribute("href"))[1]===r){i=e;break}}}catch(e){throw lu.newError(`Cannot parse releases feed: ${e.stack||e.message},\nXML:\n${t}`,"ERR_UPDATER_INVALID_RELEASE_FEED")}if(null==r)throw lu.newError("No published versions on GitHub","ERR_UPDATER_NO_PUBLISHED_VERSIONS");const o=du.getChannelFilename(this.getDefaultChannelName()),a=du.newUrlFromBase(this.getBaseDownloadPath(r,o),this.baseUrl),l=this.createRequestOptions(a);let c;try{c=await this.executor.request(l,e)}catch(e){if(!this.updater.allowPrerelease&&e instanceof lu.HttpError&&404===e.statusCode)throw lu.newError(`Cannot find ${o} in the latest release artifacts (${a}): ${e.stack||e.message}`,"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND");throw e}const u=hu.parseUpdateInfo(c,o,a);return null==u.releaseName&&(u.releaseName=i.elementValueOrEmpty("title")),null==u.releaseNotes&&(u.releaseNotes=gu(this.updater.currentVersion,this.updater.fullChangelog,n,i)),s({tag:r},u)}async getLatestTagName(e){const t=this.options,n=null==t.host||"github.com"===t.host?du.newUrlFromBase(`${this.basePath}/latest`,this.baseUrl):new uu.URL(`${this.computeGithubBasePath(`/repos/${t.owner}/${t.repo}/releases`)}/latest`,this.baseApiUrl);try{const t=await this.httpRequest(n,{Accept:"application/json"},e);return null==t?null:JSON.parse(t).tag_name}catch(e){throw lu.newError(`Unable to find latest version on GitHub (${n}), please ensure a production release exists: ${e.stack||e.message}`,"ERR_UPDATER_LATEST_VERSION_NOT_FOUND")}}get basePath(){return`/${this.options.owner}/${this.options.repo}/releases`}resolveFiles(e){return hu.resolveFiles(e,this.baseUrl,(t=>this.getBaseDownloadPath(e.tag,t.replace(/ /g,"-"))))}getBaseDownloadPath(e,t){return`${this.basePath}/download/${e}/${t}`}},su.computeReleaseNotes=gu;var yu={};Object.defineProperty(yu,"__esModule",{value:!0}),yu.PrivateGitHubProvider=void 0;const Eu=z,vu=Zr,wu=x.default,bu=D.default,Au=Nc,Tu=su,Ou=Bc;class _u extends Tu.BaseGitHubProvider{constructor(e,t,n,r){super(e,"api.github.com",r),this.updater=t,this.token=n}createRequestOptions(e,t){const n=super.createRequestOptions(e,t);return n.redirect="manual",n}async getLatestVersion(){const e=new Eu.CancellationToken,t=Au.getChannelFilename(this.getDefaultChannelName()),n=await this.getLatestVersionInfo(e),r=n.assets.find((e=>e.name===t));if(null==r)throw Eu.newError(`Cannot find ${t} in the release ${n.html_url||n.name}`,"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND");const i=new bu.URL(r.url);let o;try{o=vu.load(await this.httpRequest(i,this.configureHeaders("application/octet-stream"),e))}catch(e){if(e instanceof Eu.HttpError&&404===e.statusCode)throw Eu.newError(`Cannot find ${t} in the latest release artifacts (${i}): ${e.stack||e.message}`,"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND");throw e}return o.assets=n.assets,o}get fileExtraDownloadHeaders(){return this.configureHeaders("application/octet-stream")}configureHeaders(e){return{accept:e,authorization:`token ${this.token}`}}async getLatestVersionInfo(e){const t=this.updater.allowPrerelease;let n=this.basePath;t||(n=`${n}/latest`);const r=Au.newUrlFromBase(n,this.baseUrl);try{const n=JSON.parse(await this.httpRequest(r,this.configureHeaders("application/vnd.github.v3+json"),e));return t?n.find((e=>e.prerelease))||n[0]:n}catch(e){throw Eu.newError(`Unable to find latest version on GitHub (${r}), please ensure a production release exists: ${e.stack||e.message}`,"ERR_UPDATER_LATEST_VERSION_NOT_FOUND")}}get basePath(){return this.computeGithubBasePath(`/repos/${this.options.owner}/${this.options.repo}/releases`)}resolveFiles(e){return Ou.getFileList(e).map((t=>{const n=wu.posix.basename(t.url).replace(/ /g,"-"),r=e.assets.find((e=>null!=e&&e.name===n));if(null==r)throw Eu.newError(`Cannot find asset "${n}" in: ${JSON.stringify(e.assets,null,2)}`,"ERR_UPDATER_ASSET_NOT_FOUND");return{url:new bu.URL(r.url),info:t}}))}}yu.PrivateGitHubProvider=_u,Object.defineProperty(Kc,"__esModule",{value:!0}),Kc.createClient=Kc.isUrlProbablySupportMultiRangeRequests=void 0;const Su=z,Iu=Qc,Cu=Cc,Nu=su,Ru=yu;function Du(e){return!e.includes("s3.amazonaws.com")}Kc.isUrlProbablySupportMultiRangeRequests=Du,Kc.createClient=function(e,t,n){if("string"==typeof e)throw Su.newError("Please pass PublishConfiguration object","ERR_UPDATER_INVALID_PROVIDER_CONFIGURATION");const r=e.provider;switch(r){case"github":{const r=e,i=(r.private?{}.GITHUB_TOKEN:null)||r.token;return null==i?new Nu.GitHubProvider(r,t,n):new Ru.PrivateGitHubProvider(r,t,i,n)}case"s3":case"spaces":return new Cu.GenericProvider({provider:"generic",url:Su.getS3LikeProviderBaseUrl(e),channel:e.channel||null},t,l(s({},n),{isUseMultipleRangeRequest:!1}));case"generic":{const r=e;return new Cu.GenericProvider(r,t,l(s({},n),{isUseMultipleRangeRequest:!1!==r.useMultipleRangeRequest&&Du(r.url)}))}case"bintray":return new Iu.BintrayProvider(e,n);case"custom":{const r=e,i=r.updateProvider;if(!i)throw Su.newError("Custom provider not specified","ERR_UPDATER_INVALID_PROVIDER_CONFIGURATION");return new i(r,t,n)}default:throw Su.newError(`Unsupported provider: ${r}`,"ERR_UPDATER_UNSUPPORTED_PROVIDER")}},Object.defineProperty(We,"__esModule",{value:!0}),We.NoOpLogger=We.AppUpdater=void 0;const Pu=z,ku=C.default,Fu=I.default,$u=Qr,xu=U.default,Uu=Zr,Lu=ga,ju=x.default,Mu=pc,qu=fc,Bu=bc,Hu=Ic,Gu=Cc,Vu=V,zu=Kc;class Wu extends Fu.EventEmitter{constructor(e,t){super(),this.autoDownload=!0,this.autoInstallOnAppQuit=!0,this.allowPrerelease=!1,this.fullChangelog=!1,this.allowDowngrade=!1,this._channel=null,this.downloadedUpdateHelper=null,this.requestHeaders=null,this._logger=console,this.signals=new Vu.UpdaterSignal(this),this._appUpdateConfigPath=null,this.clientPromise=null,this.stagingUserIdPromise=new Lu.Lazy((()=>this.getOrCreateStagingUserId())),this.configOnDisk=new Lu.Lazy((()=>this.loadUpdateConfig())),this.checkForUpdatesPromise=null,this.updateInfoAndProvider=null,this._testOnlyOptions=null,this.on("error",(e=>{this._logger.error(`Error: ${e.stack||e.message}`)})),null==t?(this.app=new Bu.ElectronAppAdapter,this.httpExecutor=new Hu.ElectronHttpExecutor(((e,t)=>this.emit("login",e,t)))):(this.app=t,this.httpExecutor=null);const n=this.app.version,r=Mu.parse(n);if(null==r)throw Pu.newError(`App version is not a valid semver version: "${n}"`,"ERR_UPDATER_INVALID_VERSION");this.currentVersion=r,this.allowPrerelease=function(e){const t=Mu.prerelease(e);return null!=t&&t.length>0}(r),null!=e&&(this.setFeedURL(e),"string"!=typeof e&&e.requestHeaders&&(this.requestHeaders=e.requestHeaders))}get channel(){return this._channel}set channel(e){if(null!=this._channel){if("string"!=typeof e)throw Pu.newError(`Channel must be a string, but got: ${e}`,"ERR_UPDATER_INVALID_CHANNEL");if(0===e.length)throw Pu.newError("Channel must be not an empty string","ERR_UPDATER_INVALID_CHANNEL")}this._channel=e,this.allowDowngrade=!0}get netSession(){return Hu.getNetSession()}get logger(){return this._logger}set logger(e){this._logger=e??new Yu}set updateConfigPath(e){this.clientPromise=null,this._appUpdateConfigPath=e,this.configOnDisk=new Lu.Lazy((()=>this.loadUpdateConfig()))}getFeedURL(){return"Deprecated. Do not use it."}setFeedURL(e){const t=this.createProviderRuntimeOptions();let n;n="string"==typeof e?new Gu.GenericProvider({provider:"generic",url:e},this,l(s({},t),{isUseMultipleRangeRequest:zu.isUrlProbablySupportMultiRangeRequests(e)})):zu.createClient(e,this,t),this.clientPromise=Promise.resolve(n)}checkForUpdates(){let e=this.checkForUpdatesPromise;if(null!=e)return this._logger.info("Checking for update (already in progress)"),e;const t=()=>this.checkForUpdatesPromise=null;return this._logger.info("Checking for update"),e=this.doCheckForUpdates().then((e=>(t(),e))).catch((e=>{throw t(),this.emit("error",e,`Cannot check for updates: ${(e.stack||e).toString()}`),e})),this.checkForUpdatesPromise=e,e}isUpdaterActive(){return!!this.app.isPackaged||(this._logger.info("Skip checkForUpdatesAndNotify because application is not packed"),!1)}checkForUpdatesAndNotify(e){return this.isUpdaterActive()?this.checkForUpdates().then((t=>{const n=t.downloadPromise;return null==n?(null!=this._logger.debug&&this._logger.debug("checkForUpdatesAndNotify called, downloadPromise is null"),t):(n.then((()=>{const n=Wu.formatDownloadNotification(t.updateInfo.version,this.app.name,e);new j.default.Notification(n).show()})),t)})):Promise.resolve(null)}static formatDownloadNotification(e,t,n){return null==n&&(n={title:"A new update is ready to install",body:"{appName} version {version} has been downloaded and will be automatically installed on exit"}),{title:n.title.replace("{appName}",t).replace("{version}",e),body:n.body.replace("{appName}",t).replace("{version}",e)}}async isStagingMatch(e){const t=e.stagingPercentage;let n=t;if(null==n)return!0;if(n=parseInt(n,10),isNaN(n))return this._logger.warn(`Staging percentage is NaN: ${t}`),!0;n/=100;const r=await this.stagingUserIdPromise.value,i=Pu.UUID.parse(r).readUInt32BE(12)/4294967295;return this._logger.info(`Staging percentage: ${n}, percentage: ${i}, user id: ${r}`),i<n}computeFinalHeaders(e){return null!=this.requestHeaders&&Object.assign(e,this.requestHeaders),e}async isUpdateAvailable(e){const t=Mu.parse(e.version);if(null==t)throw Pu.newError(`This file could not be downloaded, or the latest version (from update server) does not have a valid semver version: "${e.version}"`,"ERR_UPDATER_INVALID_VERSION");const n=this.currentVersion;if(Mu.eq(t,n))return!1;if(!await this.isStagingMatch(e))return!1;const r=Mu.gt(t,n),i=Mu.lt(t,n);return!!r||this.allowDowngrade&&i}async getUpdateInfoAndProvider(){await this.app.whenReady(),null==this.clientPromise&&(this.clientPromise=this.configOnDisk.value.then((e=>zu.createClient(e,this,this.createProviderRuntimeOptions()))));const e=await this.clientPromise,t=await this.stagingUserIdPromise.value;return e.setRequestHeaders(this.computeFinalHeaders({"x-user-staging-id":t})),{info:await e.getLatestVersion(),provider:e}}createProviderRuntimeOptions(){return{isUseMultipleRangeRequest:!0,platform:null==this._testOnlyOptions?process.platform:this._testOnlyOptions.platform,executor:this.httpExecutor}}async doCheckForUpdates(){this.emit("checking-for-update");const e=await this.getUpdateInfoAndProvider(),t=e.info;if(!await this.isUpdateAvailable(t))return this._logger.info(`Update for version ${this.currentVersion} is not available (latest version: ${t.version}, downgrade is ${this.allowDowngrade?"allowed":"disallowed"}).`),this.emit("update-not-available",t),{versionInfo:t,updateInfo:t};this.updateInfoAndProvider=e,this.onUpdateAvailable(t);const n=new Pu.CancellationToken;return{versionInfo:t,updateInfo:t,cancellationToken:n,downloadPromise:this.autoDownload?this.downloadUpdate(n):null}}onUpdateAvailable(e){this._logger.info(`Found version ${e.version} (url: ${Pu.asArray(e.files).map((e=>e.url)).join(", ")})`),this.emit("update-available",e)}downloadUpdate(e=new Pu.CancellationToken){const t=this.updateInfoAndProvider;if(null==t){const e=new Error("Please check update first");return this.dispatchError(e),Promise.reject(e)}this._logger.info(`Downloading update from ${Pu.asArray(t.info.files).map((e=>e.url)).join(", ")}`);const n=e=>{if(!(e instanceof Pu.CancellationError))try{this.dispatchError(e)}catch(e){this._logger.warn(`Cannot dispatch error event: ${e.stack||e}`)}return e};try{return this.doDownloadUpdate({updateInfoAndProvider:t,requestHeaders:this.computeRequestHeaders(t.provider),cancellationToken:e}).catch((e=>{throw n(e)}))}catch(e){return Promise.reject(n(e))}}dispatchError(e){this.emit("error",e,(e.stack||e).toString())}dispatchUpdateDownloaded(e){this.emit(Vu.UPDATE_DOWNLOADED,e)}async loadUpdateConfig(){return null==this._appUpdateConfigPath&&(this._appUpdateConfigPath=this.app.appUpdateConfigPath),Uu.load(await xu.readFile(this._appUpdateConfigPath,"utf-8"))}computeRequestHeaders(e){const t=e.fileExtraDownloadHeaders;if(null!=t){const e=this.requestHeaders;return null==e?t:s(s({},t),e)}return this.computeFinalHeaders({accept:"*/*"})}async getOrCreateStagingUserId(){const e=ju.join(this.app.userDataPath,".updaterId");try{const t=await xu.readFile(e,"utf-8");if(Pu.UUID.check(t))return t;this._logger.warn(`Staging user id file exists, but content was invalid: ${t}`)}catch(e){"ENOENT"!==e.code&&this._logger.warn(`Couldn't read staging user ID, creating a blank one: ${e}`)}const t=Pu.UUID.v5(ku.randomBytes(4096),Pu.UUID.OID);this._logger.info(`Generated new staging user ID: ${t}`);try{await $u.outputFile(e,t)}catch(e){this._logger.warn(`Couldn't write out staging user ID: ${e}`)}return t}get isAddNoCacheQuery(){const e=this.requestHeaders;if(null==e)return!0;for(const t of Object.keys(e)){const e=t.toLowerCase();if("authorization"===e||"private-token"===e)return!1}return!0}async getOrCreateDownloadHelper(){let e=this.downloadedUpdateHelper;if(null==e){const t=(await this.configOnDisk.value).updaterCacheDirName,n=this._logger;null==t&&n.error("updaterCacheDirName is not specified in app-update.yml Was app build using at least electron-builder 20.34.0?");const r=ju.join(this.app.baseCachePath,t||this.app.name);null!=n.debug&&n.debug(`updater cache dir: ${r}`),e=new qu.DownloadedUpdateHelper(r),this.downloadedUpdateHelper=e}return e}async executeDownload(e){const t=e.fileInfo,n={headers:e.downloadUpdateOptions.requestHeaders,cancellationToken:e.downloadUpdateOptions.cancellationToken,sha2:t.info.sha2,sha512:t.info.sha512};this.listenerCount(Vu.DOWNLOAD_PROGRESS)>0&&(n.onProgress=e=>this.emit(Vu.DOWNLOAD_PROGRESS,e));const r=e.downloadUpdateOptions.updateInfoAndProvider.info,i=r.version,o=t.packageInfo,a=await this.getOrCreateDownloadHelper(),c=a.cacheDirForPendingUpdate;await xu.mkdir(c,{recursive:!0});const u=function(){const t=decodeURIComponent(e.fileInfo.url.pathname);return t.endsWith(`.${e.fileExtension}`)?ju.posix.basename(t):`update.${e.fileExtension}`}();let d=ju.join(c,u);const h=null==o?null:ju.join(c,`package-${i}${ju.extname(o.path)||".7z"}`),p=async n=>(await a.setDownloadedFile(d,h,r,t,u,n),await e.done(l(s({},r),{downloadedFile:d})),null==h?[d]:[d,h]),f=this._logger,m=await a.validateDownloadedPath(d,r,t,f);if(null!=m)return d=m,await p(!1);const g=async()=>(await a.clear().catch((()=>{})),await xu.unlink(d).catch((()=>{}))),y=await qu.createTempUpdateFile(`temp-${u}`,c,f);try{await e.task(y,n,h,g),await xu.rename(y,d)}catch(e){throw await g(),e instanceof Pu.CancellationError&&(f.info("cancelled"),this.emit("update-cancelled",r)),e}return f.info(`New version ${i} has been downloaded to ${d}`),await p(!0)}}We.AppUpdater=Wu;class Yu{info(e){}warn(e){}error(e){}}We.NoOpLogger=Yu;var Xu={},Ju={};Object.defineProperty(Ju,"__esModule",{value:!0}),Ju.BaseUpdater=void 0;const Ku=N.default,Qu=x.default,Zu=We;class ed extends Zu.AppUpdater{constructor(e,t){super(e,t),this.quitAndInstallCalled=!1,this.quitHandlerAdded=!1}quitAndInstall(e=!1,t=!1){this._logger.info("Install on explicit quitAndInstall"),this.install(e,!e||t)?setImmediate((()=>{this.app.quit()})):this.quitAndInstallCalled=!1}executeDownload(e){return super.executeDownload(l(s({},e),{done:e=>(this.dispatchUpdateDownloaded(e),this.addQuitHandler(),Promise.resolve())}))}install(e,t){if(this.quitAndInstallCalled)return this._logger.warn("install call ignored: quitAndInstallCalled is set to true"),!1;const n=this.downloadedUpdateHelper,r=null==n?null:n.file,i=null==n?null:n.downloadedFileInfo;if(null==r||null==i)return this.dispatchError(new Error("No valid update available, can't quit and install")),!1;this.quitAndInstallCalled=!0;try{let n=!1;if("win32"===process.platform)try{const e=Qu.default.join(Qu.default.dirname(process.execPath),`access-${Math.floor(100*Math.random())}.tmp`);Ku.default.writeFileSync(e," "),Ku.default.rmSync(e)}catch(e){n=!0}return this._logger.info(`Install: isSilent: ${e}, isForceRunAfter: ${t}, installPathRequiresElevation: ${n}`),this.doInstall({installerPath:r,isSilent:e,isForceRunAfter:t,isAdminRightsRequired:n||i.isAdminRightsRequired})}catch(e){return this.dispatchError(e),!1}}addQuitHandler(){!this.quitHandlerAdded&&this.autoInstallOnAppQuit&&(this.quitHandlerAdded=!0,this.app.onQuit((e=>{this.quitAndInstallCalled?this._logger.info("Update installer has already been triggered. Quitting application."):this.autoInstallOnAppQuit?0===e?(this._logger.info("Auto install update on quit"),this.install(!0,!1)):this._logger.info(`Update will be not installed on quit because application is quitting with exit code ${e}`):this._logger.info("Update will not be installed on quit because autoInstallOnAppQuit is set to false.")})))}}Ju.BaseUpdater=ed;var td={},nd={},rd={},id={};!function(e){var t,n;function r(e,t,n,r){t.push(e)}function i(e){const t=new Map;for(const n of e)t.set(n.name,n);return t}Object.defineProperty(e,"__esModule",{value:!0}),e.computeOperations=e.OperationKind=void 0,(n=t=e.OperationKind||(e.OperationKind={}))[n.COPY=0]="COPY",n[n.DOWNLOAD=1]="DOWNLOAD",e.computeOperations=function(e,n,o){const a=i(e.files),s=i(n.files);let l=null;const c=n.files[0],u=[],d=c.name,h=a.get(d);if(null==h)throw new Error(`no file ${d} in old blockmap`);const p=s.get(d);let f=0;const{checksumToOffset:m,checksumToOldSize:g}=function(e,t,n){const r=new Map,i=new Map;let o=t;for(let t=0;t<e.checksums.length;t++){const a=e.checksums[t],s=e.sizes[t],l=i.get(a);if(void 0===l)r.set(a,o),i.set(a,s);else if(null!=n.debug){const e=l===s?"(same size)":`(size: ${l}, this size: ${s})`;n.debug(`${a} duplicated in blockmap ${e}, it doesn't lead to broken differential downloader, just corresponding block will be skipped)`)}o+=s}return{checksumToOffset:r,checksumToOldSize:i}}(a.get(d),h.offset,o);let y=c.offset;for(let e=0;e<p.checksums.length;y+=p.sizes[e],e++){const n=p.sizes[e],i=p.checksums[e];let a=m.get(i);null!=a&&g.get(i)!==n&&(o.warn(`Checksum ("${i}") matches, but size differs (old: ${g.get(i)}, new: ${n})`),a=void 0),void 0===a?(f++,null!=l&&l.kind===t.DOWNLOAD&&l.end===y?l.end+=n:(l={kind:t.DOWNLOAD,start:y,end:y+n},r(l,u))):null!=l&&l.kind===t.COPY&&l.end===a?l.end+=n:(l={kind:t.COPY,start:a,end:a+n},r(l,u))}return f>0&&o.info(`File${"file"===c.name?"":" "+c.name} has ${f} changed blocks`),u}}(id),Object.defineProperty(rd,"__esModule",{value:!0}),rd.DataSplitter=rd.copyData=void 0;const od=z,ad=N.default,sd=R.default,ld=id,cd=Buffer.from("\r\n\r\n");var ud,dd;function hd(e,t,n,r,i){const o=ad.createReadStream("",{fd:n,autoClose:!1,start:e.start,end:e.end-1});o.on("error",r),o.once("end",i),o.pipe(t,{end:!1})}(dd=ud||(ud={}))[dd.INIT=0]="INIT",dd[dd.HEADER=1]="HEADER",dd[dd.BODY=2]="BODY",rd.copyData=hd;class pd extends sd.Writable{constructor(e,t,n,r,i,o){super(),this.out=e,this.options=t,this.partIndexToTaskIndex=n,this.partIndexToLength=i,this.finishHandler=o,this.partIndex=-1,this.headerListBuffer=null,this.readState=ud.INIT,this.ignoreByteCount=0,this.remainingPartDataCount=0,this.actualPartLength=0,this.boundaryLength=r.length+4,this.ignoreByteCount=this.boundaryLength-2}get isFinished(){return this.partIndex===this.partIndexToLength.length}_write(e,t,n){this.isFinished?console.error(`Trailing ignored data: ${e.length} bytes`):this.handleData(e).then(n).catch(n)}async handleData(e){let t=0;if(0!==this.ignoreByteCount&&0!==this.remainingPartDataCount)throw od.newError("Internal error","ERR_DATA_SPLITTER_BYTE_COUNT_MISMATCH");if(this.ignoreByteCount>0){const n=Math.min(this.ignoreByteCount,e.length);this.ignoreByteCount-=n,t=n}else if(this.remainingPartDataCount>0){const n=Math.min(this.remainingPartDataCount,e.length);this.remainingPartDataCount-=n,await this.processPartData(e,0,n),t=n}if(t!==e.length){if(this.readState===ud.HEADER){const n=this.searchHeaderListEnd(e,t);if(-1===n)return;t=n,this.readState=ud.BODY,this.headerListBuffer=null}for(;;){if(this.readState===ud.BODY)this.readState=ud.INIT;else{this.partIndex++;let n=this.partIndexToTaskIndex.get(this.partIndex);if(null==n){if(!this.isFinished)throw od.newError("taskIndex is null","ERR_DATA_SPLITTER_TASK_INDEX_IS_NULL");n=this.options.end}const r=0===this.partIndex?this.options.start:this.partIndexToTaskIndex.get(this.partIndex-1)+1;if(r<n)await this.copyExistingData(r,n);else if(r>n)throw od.newError("prevTaskIndex must be < taskIndex","ERR_DATA_SPLITTER_TASK_INDEX_ASSERT_FAILED");if(this.isFinished)return this.onPartEnd(),void this.finishHandler();if(t=this.searchHeaderListEnd(e,t),-1===t)return void(this.readState=ud.HEADER)}const n=this.partIndexToLength[this.partIndex],r=t+n,i=Math.min(r,e.length);if(await this.processPartStarted(e,t,i),this.remainingPartDataCount=n-(i-t),this.remainingPartDataCount>0)return;if(t=r+this.boundaryLength,t>=e.length)return void(this.ignoreByteCount=this.boundaryLength-(e.length-r))}}}copyExistingData(e,t){return new Promise(((n,r)=>{const i=()=>{if(e===t)return void n();const o=this.options.tasks[e];o.kind===ld.OperationKind.COPY?hd(o,this.out,this.options.oldFileFd,r,(()=>{e++,i()})):r(new Error("Task kind must be COPY"))};i()}))}searchHeaderListEnd(e,t){const n=e.indexOf(cd,t);if(-1!==n)return n+cd.length;const r=0===t?e:e.slice(t);return null==this.headerListBuffer?this.headerListBuffer=r:this.headerListBuffer=Buffer.concat([this.headerListBuffer,r]),-1}onPartEnd(){const e=this.partIndexToLength[this.partIndex-1];if(this.actualPartLength!==e)throw od.newError(`Expected length: ${e} differs from actual: ${this.actualPartLength}`,"ERR_DATA_SPLITTER_LENGTH_MISMATCH");this.actualPartLength=0}processPartStarted(e,t,n){return 0!==this.partIndex&&this.onPartEnd(),this.processPartData(e,t,n)}processPartData(e,t,n){this.actualPartLength+=n-t;const r=this.out;return r.write(0===t&&e.length===n?e:e.slice(t,n))?Promise.resolve():new Promise(((e,t)=>{r.on("error",t),r.once("drain",(()=>{r.removeListener("error",t),e()}))}))}}rd.DataSplitter=pd;var fd={};Object.defineProperty(fd,"__esModule",{value:!0}),fd.checkIsRangesSupported=fd.executeTasksUsingMultipleRangeRequests=void 0;const md=z,gd=rd,yd=id;function Ed(e,t){if(e.statusCode>=400)return t(md.createHttpError(e)),!1;if(206!==e.statusCode){const n=md.safeGetHeader(e,"accept-ranges");if(null==n||"none"===n)return t(new Error(`Server doesn't support Accept-Ranges (response code ${e.statusCode})`)),!1}return!0}fd.executeTasksUsingMultipleRangeRequests=function(e,t,n,r,i){const o=a=>{if(a>=t.length)return null!=e.fileMetadataBuffer&&n.write(e.fileMetadataBuffer),void n.end();const s=a+1e3;!function(e,t,n,r,i){let o="bytes=",a=0;const s=new Map,l=[];for(let e=t.start;e<t.end;e++){const n=t.tasks[e];n.kind===yd.OperationKind.DOWNLOAD&&(o+=`${n.start}-${n.end-1}, `,s.set(a,e),a++,l.push(n.end-n.start))}if(a<=1){const o=a=>{if(a>=t.end)return void r();const s=t.tasks[a++];if(s.kind===yd.OperationKind.COPY)gd.copyData(s,n,t.oldFileFd,i,(()=>o(a)));else{const t=e.createRequestOptions();t.headers.Range=`bytes=${s.start}-${s.end-1}`;const r=e.httpExecutor.createRequest(t,(e=>{Ed(e,i)&&(e.pipe(n,{end:!1}),e.once("end",(()=>o(a))))}));e.httpExecutor.addErrorAndTimeoutHandlers(r,i),r.end()}};return void o(t.start)}const c=e.createRequestOptions();c.headers.Range=o.substring(0,o.length-2);const u=e.httpExecutor.createRequest(c,(e=>{if(!Ed(e,i))return;const o=md.safeGetHeader(e,"content-type"),a=/^multipart\/.+?(?:; boundary=(?:(?:"(.+)")|(?:([^\s]+))))$/i.exec(o);if(null==a)return void i(new Error(`Content-Type "multipart/byteranges" is expected, but got "${o}"`));const c=new gd.DataSplitter(n,t,s,a[1]||a[2],l,r);c.on("error",i),e.pipe(c),e.on("end",(()=>{setTimeout((()=>{u.abort(),i(new Error("Response ends without calling any handlers"))}),1e4)}))}));e.httpExecutor.addErrorAndTimeoutHandlers(u,i),u.end()}(e,{tasks:t,start:a,end:Math.min(t.length,s),oldFileFd:r},n,(()=>o(s)),i)};return o},fd.checkIsRangesSupported=Ed;var vd={};Object.defineProperty(vd,"__esModule",{value:!0}),vd.ProgressDifferentialDownloadCallbackTransform=void 0;const wd=R.default;var bd,Ad;(Ad=bd||(bd={}))[Ad.COPY=0]="COPY",Ad[Ad.DOWNLOAD=1]="DOWNLOAD";class Td extends wd.Transform{constructor(e,t,n){super(),this.progressDifferentialDownloadInfo=e,this.cancellationToken=t,this.onProgress=n,this.start=Date.now(),this.transferred=0,this.delta=0,this.expectedBytes=0,this.index=0,this.operationType=bd.COPY,this.nextUpdate=this.start+1e3}_transform(e,t,n){if(this.cancellationToken.cancelled)return void n(new Error("cancelled"),null);if(this.operationType==bd.COPY)return void n(null,e);this.transferred+=e.length,this.delta+=e.length;const r=Date.now();r>=this.nextUpdate&&this.transferred!==this.expectedBytes&&this.transferred!==this.progressDifferentialDownloadInfo.grandTotal&&(this.nextUpdate=r+1e3,this.onProgress({total:this.progressDifferentialDownloadInfo.grandTotal,delta:this.delta,transferred:this.transferred,percent:this.transferred/this.progressDifferentialDownloadInfo.grandTotal*100,bytesPerSecond:Math.round(this.transferred/((r-this.start)/1e3))}),this.delta=0),n(null,e)}beginFileCopy(){this.operationType=bd.COPY}beginRangeDownload(){this.operationType=bd.DOWNLOAD,this.expectedBytes+=this.progressDifferentialDownloadInfo.expectedByteCounts[this.index++]}endRangeDownload(){this.transferred!==this.progressDifferentialDownloadInfo.grandTotal&&this.onProgress({total:this.progressDifferentialDownloadInfo.grandTotal,delta:this.delta,transferred:this.transferred,percent:this.transferred/this.progressDifferentialDownloadInfo.grandTotal*100,bytesPerSecond:Math.round(this.transferred/((Date.now()-this.start)/1e3))})}_flush(e){this.cancellationToken.cancelled?e(new Error("cancelled")):(this.onProgress({total:this.progressDifferentialDownloadInfo.grandTotal,delta:this.delta,transferred:this.transferred,percent:100,bytesPerSecond:Math.round(this.transferred/((Date.now()-this.start)/1e3))}),this.delta=0,this.transferred=0,e(null))}}vd.ProgressDifferentialDownloadCallbackTransform=Td,Object.defineProperty(nd,"__esModule",{value:!0}),nd.DifferentialDownloader=void 0;const Od=z,_d=Qr,Sd=N.default,Id=rd,Cd=D.default,Nd=id,Rd=fd,Dd=vd;function Pd(e,t=" KB"){return new Intl.NumberFormat("en").format((e/1024).toFixed(2))+t}nd.DifferentialDownloader=class{constructor(e,t,n){this.blockAwareFileInfo=e,this.httpExecutor=t,this.options=n,this.fileMetadataBuffer=null,this.logger=n.logger}createRequestOptions(){const e={headers:l(s({},this.options.requestHeaders),{accept:"*/*"})};return Od.configureRequestUrl(this.options.newUrl,e),Od.configureRequestOptions(e),e}doDownload(e,t){if(e.version!==t.version)throw new Error(`version is different (${e.version} - ${t.version}), full download is required`);const n=this.logger,r=Nd.computeOperations(e,t,n);null!=n.debug&&n.debug(JSON.stringify(r,null,2));let i=0,o=0;for(const e of r){const t=e.end-e.start;e.kind===Nd.OperationKind.DOWNLOAD?i+=t:o+=t}const a=this.blockAwareFileInfo.size;if(i+o+(null==this.fileMetadataBuffer?0:this.fileMetadataBuffer.length)!==a)throw new Error(`Internal error, size mismatch: downloadSize: ${i}, copySize: ${o}, newSize: ${a}`);return n.info(`Full: ${Pd(a)}, To download: ${Pd(i)} (${Math.round(i/(a/100))}%)`),this.downloadFile(r)}downloadFile(e){const t=[],n=()=>Promise.all(t.map((e=>_d.close(e.descriptor).catch((t=>{this.logger.error(`cannot close file "${e.path}": ${t}`)})))));return this.doDownloadFile(e,t).then(n).catch((e=>n().catch((t=>{try{this.logger.error(`cannot close files: ${t}`)}catch(e){try{console.error(e)}catch(e){}}throw e})).then((()=>{throw e}))))}async doDownloadFile(e,t){const n=await _d.open(this.options.oldFile,"r");t.push({descriptor:n,path:this.options.oldFile});const r=await _d.open(this.options.newFile,"w");t.push({descriptor:r,path:this.options.newFile});const i=Sd.createWriteStream(this.options.newFile,{fd:r});await new Promise(((r,o)=>{const a=[];let s;if(!this.options.isUseMultipleRangeRequest&&this.options.onProgress){const t=[];let n=0;for(const r of e)r.kind===Nd.OperationKind.DOWNLOAD&&(t.push(r.end-r.start),n+=r.end-r.start);const r={expectedByteCounts:t,grandTotal:n};s=new Dd.ProgressDifferentialDownloadCallbackTransform(r,this.options.cancellationToken,this.options.onProgress),a.push(s)}const l=new Od.DigestTransform(this.blockAwareFileInfo.sha512);l.isValidateOnEnd=!1,a.push(l),i.on("finish",(()=>{i.close((()=>{t.splice(1,1);try{l.validate()}catch(e){return void o(e)}r(void 0)}))})),a.push(i);let c=null;for(const e of a)e.on("error",o),c=null==c?e:c.pipe(e);const u=a[0];let d;if(this.options.isUseMultipleRangeRequest)return d=Rd.executeTasksUsingMultipleRangeRequests(this,e,u,n,o),void d(0);let h=0,p=null;this.logger.info(`Differential download: ${this.options.newUrl}`);const f=this.createRequestOptions();f.redirect="manual",d=t=>{var r,i;if(t>=e.length)return null!=this.fileMetadataBuffer&&u.write(this.fileMetadataBuffer),void u.end();const a=e[t++];if(a.kind===Nd.OperationKind.COPY)return s&&s.beginFileCopy(),void Id.copyData(a,u,n,o,(()=>d(t)));const l=`bytes=${a.start}-${a.end-1}`;f.headers.range=l,null===(i=null===(r=this.logger)||void 0===r?void 0:r.debug)||void 0===i||i.call(r,`download range: ${l}`),s&&s.beginRangeDownload();const c=this.httpExecutor.createRequest(f,(e=>{e.statusCode>=400&&o(Od.createHttpError(e)),e.pipe(u,{end:!1}),e.once("end",(()=>{s&&s.endRangeDownload(),100==++h?(h=0,setTimeout((()=>d(t)),1e3)):d(t)}))}));c.on("redirect",((e,t,n)=>{this.logger.info(`Redirect to ${function(e){const t=e.indexOf("?");return t<0?e:e.substring(0,t)}(n)}`),p=n,Od.configureRequestUrl(new Cd.URL(p),f),c.followRedirect()})),this.httpExecutor.addErrorAndTimeoutHandlers(c,o),c.end()},d(0)}))}async readRemoteBytes(e,t){const n=Buffer.allocUnsafe(t+1-e),r=this.createRequestOptions();r.headers.range=`bytes=${e}-${t}`;let i=0;if(await this.request(r,(e=>{e.copy(n,i),i+=e.length})),i!==n.length)throw new Error(`Received data length ${i} is not equal to expected ${n.length}`);return n}request(e,t){return new Promise(((n,r)=>{const i=this.httpExecutor.createRequest(e,(e=>{Rd.checkIsRangesSupported(e,r)&&(e.on("data",t),e.on("end",(()=>n())))}));this.httpExecutor.addErrorAndTimeoutHandlers(i,r),i.end()}))}},Object.defineProperty(td,"__esModule",{value:!0}),td.FileWithEmbeddedBlockMapDifferentialDownloader=void 0;const kd=Qr,Fd=nd,$d=q.default;class xd extends Fd.DifferentialDownloader{async download(){const e=this.blockAwareFileInfo,t=e.size,n=t-(e.blockMapSize+4);this.fileMetadataBuffer=await this.readRemoteBytes(n,t-1);const r=Ud(this.fileMetadataBuffer.slice(0,this.fileMetadataBuffer.length-4));await this.doDownload(await async function(e){const t=await kd.open(e,"r");try{const e=(await kd.fstat(t)).size,n=Buffer.allocUnsafe(4);await kd.read(t,n,0,n.length,e-n.length);const r=Buffer.allocUnsafe(n.readUInt32BE(0));return await kd.read(t,r,0,r.length,e-n.length-r.length),await kd.close(t),Ud(r)}catch(e){throw await kd.close(t),e}}(this.options.oldFile),r)}}function Ud(e){return JSON.parse($d.inflateRawSync(e).toString())}td.FileWithEmbeddedBlockMapDifferentialDownloader=xd,Object.defineProperty(Xu,"__esModule",{value:!0}),Xu.AppImageUpdater=void 0;const Ld=z,jd=Ju,Md=Bc;class qd extends jd.BaseUpdater{constructor(e,t){super(e,t)}isUpdaterActive(){return this._logger.warn("APPIMAGE env is not defined, current application is not an AppImage"),!1}doDownloadUpdate(e){const t=e.updateInfoAndProvider.provider,n=Md.findFile(t.resolveFiles(e.updateInfoAndProvider.info),"AppImage");return this.executeDownload({fileExtension:"AppImage",fileInfo:n,downloadUpdateOptions:e,task:async(e,t)=>{throw Ld.newError("APPIMAGE env is not defined","ERR_UPDATER_OLD_FILE_NOT_FOUND")}})}doInstall(e){throw Ld.newError("APPIMAGE env is not defined","ERR_UPDATER_OLD_FILE_NOT_FOUND")}}Xu.AppImageUpdater=qd;var Bd={};Object.defineProperty(Bd,"__esModule",{value:!0}),Bd.MacUpdater=void 0;const Hd=z,Gd=Qr,Vd=N.default,zd=B.default,Wd=We,Yd=Bc,Xd=M.default;class Jd extends Wd.AppUpdater{constructor(e,t){super(e,t),this.nativeUpdater=j.default.autoUpdater,this.squirrelDownloadedUpdate=!1,this.nativeUpdater.on("error",(e=>{this._logger.warn(e),this.emit("error",e)})),this.nativeUpdater.on("update-downloaded",(()=>{this.squirrelDownloadedUpdate=!0}))}debug(e){null!=this._logger.debug&&this._logger.debug(e)}async doDownloadUpdate(e){let t=e.updateInfoAndProvider.provider.resolveFiles(e.updateInfoAndProvider.info);const n=this._logger;let r;try{this.debug("Checking for macOS Rosetta environment");const e=Xd.execFileSync("sysctl",["sysctl.proc_translated"],{encoding:"utf8"});r=e.includes("sysctl.proc_translated: 1"),n.info(`Checked for macOS Rosetta environment (isRosetta=${r})`)}catch(e){n.warn(`sysctl shell command to check for macOS Rosetta environment failed: ${e}`)}const i=e=>{var t;return e.url.pathname.includes("arm64")||(null===(t=e.info.url)||void 0===t?void 0:t.includes("arm64"))};t.some(i)&&(t=t.filter((e=>("arm64"===process.arch||r)===i(e))));const o=Yd.findFile(t,"zip",["pkg","dmg"]);if(null==o)throw Hd.newError(`ZIP file not provided: ${Hd.safeStringifyJson(t)}`,"ERR_UPDATER_ZIP_FILE_NOT_FOUND");return this.executeDownload({fileExtension:"zip",fileInfo:o,downloadUpdateOptions:e,task:(e,t)=>this.httpExecutor.download(o.url,e,t),done:e=>this.updateDownloaded(o,e)})}async updateDownloaded(e,t){var n;const r=t.downloadedFile,i=null!==(n=e.info.size)&&void 0!==n?n:(await Gd.stat(r)).size,o=this._logger,a=`fileToProxy=${e.url.href}`;this.debug(`Creating proxy server for native Squirrel.Mac (${a})`);const s=zd.createServer();function l(){return`http://127.0.0.1:${s.address().port}`}return s.on("close",(()=>{o.info(`Proxy server for native Squirrel.Mac is closed (${a})`)})),this.debug(`Proxy server for native Squirrel.Mac is created (address=${l()}, ${a})`),await new Promise(((e,n)=>{const c=`/${Date.now().toString(16)}-${Math.floor(9999*Math.random()).toString(16)}.zip`;s.on("request",((t,a)=>{const u=t.url;if(o.info(`${u} requested`),"/"===u){const e=Buffer.from(`{ "url": "${l()}${c}" }`);return a.writeHead(200,{"Content-Type":"application/json","Content-Length":e.length}),void a.end(e)}if(!u.startsWith(c))return o.warn(`${u} requested, but not supported`),a.writeHead(404),void a.end();o.info(`${c} requested by Squirrel.Mac, pipe ${r}`);let d=!1;a.on("finish",(()=>{try{setImmediate((()=>s.close()))}finally{d||(this.nativeUpdater.removeListener("error",n),e([]))}}));const h=Vd.createReadStream(r);h.on("error",(e=>{try{a.end()}catch(e){o.warn(`cannot end response: ${e}`)}d=!0,this.nativeUpdater.removeListener("error",n),n(new Error(`Cannot pipe "${r}": ${e}`))})),a.writeHead(200,{"Content-Type":"application/zip","Content-Length":i}),h.pipe(a)})),this.debug(`Proxy server for native Squirrel.Mac is starting to listen (${a})`),s.listen(0,"127.0.0.1",(()=>{this.nativeUpdater.setFeedURL({url:l(),headers:{"Cache-Control":"no-cache"}}),this.dispatchUpdateDownloaded(t),this.autoInstallOnAppQuit?(this.nativeUpdater.once("error",n),this.nativeUpdater.checkForUpdates()):e([])}))}))}quitAndInstall(){this.squirrelDownloadedUpdate?this.nativeUpdater.quitAndInstall():this.nativeUpdater.on("update-downloaded",(()=>{this.nativeUpdater.quitAndInstall()}))}}Bd.MacUpdater=Jd;var Kd={},Qd={};Object.defineProperty(Qd,"__esModule",{value:!0}),Qd.GenericDifferentialDownloader=void 0;const Zd=nd;class eh extends Zd.DifferentialDownloader{download(e,t){return this.doDownload(e,t)}}Qd.GenericDifferentialDownloader=eh;var th={};Object.defineProperty(th,"__esModule",{value:!0}),th.verifySignature=void 0;const nh=z,rh=M.default,ih=L.default;th.verifySignature=function(e,t,n){return new Promise((r=>{const i=t.replace(/'/g,"''").replace(/`/g,"``");rh.execFile("powershell.exe",["-NoProfile","-NonInteractive","-InputFormat","None","-Command",`Get-AuthenticodeSignature '${i}' | ConvertTo-Json -Compress | ForEach-Object { [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($_)) }`],{timeout:2e4},((t,i,o)=>{try{if(null!=t||o)return function(e,t,n){if(function(){const e=ih.release();return e.startsWith("6.")&&!e.startsWith("6.3")}())e.warn(`Cannot execute Get-AuthenticodeSignature: ${t||n}. Ignoring signature validation due to unsupported powershell version. Please upgrade to powershell 3 or higher.`);else{try{rh.execFileSync("powershell.exe",["-NoProfile","-NonInteractive","-Command","ConvertTo-Json test"],{timeout:1e4})}catch(t){return void e.warn(`Cannot execute ConvertTo-Json: ${t.message}. Ignoring signature validation due to unsupported powershell version. Please upgrade to powershell 3 or higher.`)}if(null!=t)throw t;n&&e.warn(`Cannot execute Get-AuthenticodeSignature, stderr: ${n}. Ignoring signature validation due to unknown stderr.`)}}(n,t,o),void r(null);const a=function(e){const t=JSON.parse(e);delete t.PrivateKey,delete t.IsOSBinary,delete t.SignatureType;const n=t.SignerCertificate;return null!=n&&(delete n.Archived,delete n.Extensions,delete n.Handle,delete n.HasPrivateKey,delete n.SubjectName),delete t.Path,t}(Buffer.from(i,"base64").toString("utf-8"));if(0===a.Status){const t=nh.parseDn(a.SignerCertificate.Subject).get("CN");if(e.includes(t))return void r(null)}const s=`publisherNames: ${e.join(" | ")}, raw info: `+JSON.stringify(a,((e,t)=>"RawData"===e?void 0:t),2);n.warn(`Sign verification failed, installer signed with incorrect certificate: ${s}`),r(s)}catch(e){return n.warn(`Cannot execute Get-AuthenticodeSignature: ${t}. Ignoring signature validation due to unknown error.`),void r(null)}}))}))},Object.defineProperty(Kd,"__esModule",{value:!0}),Kd.NsisUpdater=void 0;const oh=z,ah=M.default,sh=x.default,lh=Ju,ch=td,uh=Qd,dh=V,hh=Nc,ph=Bc,fh=Qr,mh=th,gh=D.default,yh=q.default;class Eh extends lh.BaseUpdater{constructor(e,t){super(e,t)}doDownloadUpdate(e){const t=e.updateInfoAndProvider.provider,n=ph.findFile(t.resolveFiles(e.updateInfoAndProvider.info),"exe");return this.executeDownload({fileExtension:"exe",downloadUpdateOptions:e,fileInfo:n,task:async(r,i,o,a)=>{const s=n.packageInfo,l=null!=s&&null!=o;(l||await this.differentialDownloadInstaller(n,e,r,t))&&await this.httpExecutor.download(n.url,r,i);const c=await this.verifySignature(r);if(null!=c)throw await a(),oh.newError(`New version ${e.updateInfoAndProvider.info.version} is not signed by the application owner: ${c}`,"ERR_UPDATER_INVALID_SIGNATURE");if(l&&await this.differentialDownloadWebPackage(e,s,o,t))try{await this.httpExecutor.download(new gh.URL(s.path),o,{headers:e.requestHeaders,cancellationToken:e.cancellationToken,sha512:s.sha512})}catch(e){try{await fh.unlink(o)}catch(e){}throw e}}})}async verifySignature(e){let t;try{if(t=(await this.configOnDisk.value).publisherName,null==t)return null}catch(e){if("ENOENT"===e.code)return null;throw e}return await mh.verifySignature(Array.isArray(t)?t:[t],e,this._logger)}doInstall(e){const t=["--updated"];e.isSilent&&t.push("/S"),e.isForceRunAfter&&t.push("--force-run");const n=null==this.downloadedUpdateHelper?null:this.downloadedUpdateHelper.packageFile;null!=n&&t.push(`--package-file=${n}`);const r=()=>{vh(sh.join(process.resourcesPath,"elevate.exe"),[e.installerPath].concat(t)).catch((e=>this.dispatchError(e)))};return e.isAdminRightsRequired?(this._logger.info("isAdminRightsRequired is set to true, run installer using elevate.exe"),r(),!0):(vh(e.installerPath,t).catch((e=>{const t=e.code;this._logger.info(`Cannot run installer: error code: ${t}, error message: "${e.message}", will be executed again using elevate if EACCES"`),"UNKNOWN"===t||"EACCES"===t?r():this.dispatchError(e)})),!0)}async differentialDownloadInstaller(e,t,n,r){try{if(null!=this._testOnlyOptions&&!this._testOnlyOptions.isUseDifferentialDownload)return!0;const i=hh.blockmapFiles(e.url,this.app.version,t.updateInfoAndProvider.info.version);this._logger.info(`Download block maps (old: "${i[0]}", new: ${i[1]})`);const o=async e=>{const n=await this.httpExecutor.downloadToBuffer(e,{headers:t.requestHeaders,cancellationToken:t.cancellationToken});if(null==n||0===n.length)throw new Error(`Blockmap "${e.href}" is empty`);try{return JSON.parse(yh.gunzipSync(n).toString())}catch(t){throw new Error(`Cannot parse blockmap "${e.href}", error: ${t}, raw data: ${n}`)}},a={newUrl:e.url,oldFile:sh.join(this.downloadedUpdateHelper.cacheDir,oh.CURRENT_APP_INSTALLER_FILE_NAME),logger:this._logger,newFile:n,isUseMultipleRangeRequest:r.isUseMultipleRangeRequest,requestHeaders:t.requestHeaders,cancellationToken:t.cancellationToken};this.listenerCount(dh.DOWNLOAD_PROGRESS)>0&&(a.onProgress=e=>this.emit(dh.DOWNLOAD_PROGRESS,e));const s=await Promise.all(i.map((e=>o(e))));return await new uh.GenericDifferentialDownloader(e.info,this.httpExecutor,a).download(s[0],s[1]),!1}catch(e){if(this._logger.error(`Cannot download differentially, fallback to full download: ${e.stack||e}`),null!=this._testOnlyOptions)throw e;return!0}}async differentialDownloadWebPackage(e,t,n,r){if(null==t.blockMapSize)return!0;try{const i={newUrl:new gh.URL(t.path),oldFile:sh.join(this.downloadedUpdateHelper.cacheDir,oh.CURRENT_APP_PACKAGE_FILE_NAME),logger:this._logger,newFile:n,requestHeaders:this.requestHeaders,isUseMultipleRangeRequest:r.isUseMultipleRangeRequest,cancellationToken:e.cancellationToken};this.listenerCount(dh.DOWNLOAD_PROGRESS)>0&&(i.onProgress=e=>this.emit(dh.DOWNLOAD_PROGRESS,e)),await new ch.FileWithEmbeddedBlockMapDifferentialDownloader(t,this.httpExecutor,i).download()}catch(e){return this._logger.error(`Cannot download differentially, fallback to full download: ${e.stack||e}`),"win32"===process.platform}return!1}}async function vh(e,t){return new Promise(((n,r)=>{try{const i=ah.spawn(e,t,{detached:!0,stdio:"ignore"});i.on("error",(e=>{r(e)})),i.unref(),void 0!==i.pid&&n(!0)}catch(e){r(e)}}))}Kd.NsisUpdater=Eh,function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.UpdaterSignal=e.UPDATE_DOWNLOADED=e.DOWNLOAD_PROGRESS=e.NsisUpdater=e.MacUpdater=e.AppImageUpdater=e.Provider=e.CancellationToken=e.NoOpLogger=e.AppUpdater=void 0;const t=z;Object.defineProperty(e,"CancellationToken",{enumerable:!0,get:function(){return t.CancellationToken}});var n=We;Object.defineProperty(e,"AppUpdater",{enumerable:!0,get:function(){return n.AppUpdater}}),Object.defineProperty(e,"NoOpLogger",{enumerable:!0,get:function(){return n.NoOpLogger}});var r=Bc;Object.defineProperty(e,"Provider",{enumerable:!0,get:function(){return r.Provider}});var i=Xu;Object.defineProperty(e,"AppImageUpdater",{enumerable:!0,get:function(){return i.AppImageUpdater}});var o=Bd;Object.defineProperty(e,"MacUpdater",{enumerable:!0,get:function(){return o.MacUpdater}});var a=Kd;let s;function l(e,t,n){e.on(t,n)}Object.defineProperty(e,"NsisUpdater",{enumerable:!0,get:function(){return a.NsisUpdater}}),Object.defineProperty(e,"autoUpdater",{enumerable:!0,get:()=>s||(s="win32"===process.platform?new Kd.NsisUpdater:"darwin"===process.platform?new Bd.MacUpdater:new Xu.AppImageUpdater,s)}),e.DOWNLOAD_PROGRESS="download-progress",e.UPDATE_DOWNLOADED="update-downloaded",e.UpdaterSignal=class{constructor(e){this.emitter=e}login(e){l(this.emitter,"login",e)}progress(t){l(this.emitter,e.DOWNLOAD_PROGRESS,t)}updateDownloaded(t){l(this.emitter,e.UPDATE_DOWNLOADED,t)}updateCancelled(e){l(this.emitter,"update-cancelled",e)}}}(V);var wh=G(V),bh=Object.freeze(S({__proto__:null,[Symbol.toStringTag]:"Module",default:wh},[V]));exports.main=bh;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
